[
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T09:39:09.720013Z", 
  "msg": [
   "Can now specify the @Value's encoderDecoder and parser via Configuration."
  ], 
  "revision_id": "1017660"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T09:17:14.653679Z", 
  "msg": [
   "The NO applib value types (eg Money) as well as the Java primitive value types (eg int, String) are now being \"dog-fooded\" through (respectively) the @Value annotation and updated facet factories (eg StringFacetFactory) that install Value annotations; have added AggregatedFacet  (but not yet @Aggregated or an AggregatedFacetFactory); other big change (a simplificatoin) is that I've removed the facetTypes() from FacetFactory.  This was never being called apart from in the tests, and is/was fragile code.  But the main reason is because with the value type handling for built-in types, the set of facets being installed could vary on a case-by-case basis.  For example, java.lang.String is immutable, whereas java.sql.Date is not."
  ], 
  "revision_id": "1017659"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T09:16:58.700974Z", 
  "msg": [
   "The NO applib value types (eg Money) as well as the Java primitive value types (eg int, String) are now being \"dog-fooded\" through (respectively) the @Value annotation and updated facet factories (eg StringFacetFactory) that install Value annotations; have added AggregatedFacet  (but not yet @Aggregated or an AggregatedFacetFactory); other big change (a simplificatoin) is that I've removed the facetTypes() from FacetFactory.  This was never being called apart from in the tests, and is/was fragile code.  But the main reason is because with the value type handling for built-in types, the set of facets being installed could vary on a case-by-case basis.  For example, java.lang.String is immutable, whereas java.sql.Date is not."
  ], 
  "revision_id": "1017658"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T09:14:43.413417Z", 
  "msg": [
   "The NO applib value types (eg Money) as well as the Java primitive value types (eg int, String) are now being \"dog-fooded\" through (respectively) the @Value annotation and updated facet factories (eg StringFacetFactory) that install Value annotations; have added AggregatedFacet  (but not yet @Aggregated or an AggregatedFacetFactory); other big change (a simplificatoin) is that I've removed the facetTypes() from FacetFactory.  This was never being called apart from in the tests, and is/was fragile code.  But the main reason is because with the value type handling for built-in types, the set of facets being installed could vary on a case-by-case basis.  For example, java.lang.String is immutable, whereas java.sql.Date is not."
  ], 
  "revision_id": "1017657"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T09:13:13.640549Z", 
  "msg": [
   "The NO applib value types (eg Money) as well as the Java primitive value types (eg int, String) are now being \"dog-fooded\" through (respectively) the @Value annotation and updated facet factories (eg StringFacetFactory) that install Value annotations; have added AggregatedFacet  (but not yet @Aggregated or an AggregatedFacetFactory); other big change (a simplificatoin) is that I've removed the facetTypes() from FacetFactory.  This was never being called apart from in the tests, and is/was fragile code.  But the main reason is because with the value type handling for built-in types, the set of facets being installed could vary on a case-by-case basis.  For example, java.lang.String is immutable, whereas java.sql.Date is not."
  ], 
  "revision_id": "1017656"
 }
]