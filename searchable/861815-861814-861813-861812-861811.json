[
 {
  "author": "djames", 
  "date": "2006-10-03T18:32:14.187577Z", 
  "msg": [
   "Add more detail to the documentation for the SVN::Repos Perl bindings", 
   "Rearrange how methods are wrapped in this file, to make it easier to add new", 
   "methods in the future while keeping the documentation in sync.", 
   "Patch by: Nik Clayton <nik@ngo.org.uk>", 
   "* subversion/bindings/swig/perl/native/Repos.pm", 
   "(@methods): Build up the list of exported methods throughout the file,", 
   "which keeps a method's export point nearer its point of documentation.", 
   "(POD Documentation): Add documentation for get_logs().  Explicitly list", 
   "the other methods that are exported.  Bring the example up to date, and", 
   "update the copyright date."
  ], 
  "revision_id": "861815"
 }, 
 {
  "author": "dlr", 
  "date": "2006-10-03T16:59:17.459868Z", 
  "msg": [
   "* subversion/tests/cmdline/svnadmin_tests.py", 
   "(setrevprop): Correct some inline comments.", 
   "Found by: glasser"
  ], 
  "revision_id": "861814"
 }, 
 {
  "author": "glasser", 
  "date": "2006-10-03T16:03:15.961780Z", 
  "msg": [
   "Extract the validation and canonicalization of svn:* properties from", 
   "svn_wc_prop_set2 into a new API, which could theoretically be used", 
   "for \"svn propset URL\".", 
   "* subversion/include/svn_wc.h", 
   "(svn_wc_canonicalize_svn_prop): New API to validate and canonicalize", 
   "svn:* properties.", 
   "(svn_wc_canonicalize_svn_prop_get_file_t): New callback type for above API.", 
   "* subversion/libsvn_wc/props.c", 
   "(svn_wc_canonicalize_svn_prop): Implement new API (extracted from", 
   "svn_wc_prop_set2).", 
   "(getter_baton): New baton implementation for new callback.", 
   "(get_file_for_validation): New function, implementing new callback", 
   "type; contents extracted from validate_eol_prop_against_file.", 
   "(validate_eol_prop_against_file): Use callback instead of direct WC access.", 
   "(svn_wc_prop_set2): Use new API for property validation and canonicalization", 
   "instead of doing it directly.", 
   "(validate_prop_against_node_kind, validate_eol_prop_against_file,", 
   "svn_wc_parse_externals_description2): Allow an argument which is", 
   "only used in error messages to be an URL."
  ], 
  "revision_id": "861813"
 }, 
 {
  "author": "malcolm", 
  "date": "2006-10-03T15:54:47.639494Z", 
  "msg": [
   "FSFS: Detect a particular class of FS API violation (encountered while", 
   "modifying a transaction) and return an error instead of corrupting the", 
   "eventual revision file.", 
   "(There is evidence that suggests that mod_dav_svn is currently committing", 
   "this API violation; see issue #2467, of which this may be the root cause.)", 
   "Prevent concurrent writes to the prototype revision file (whether by", 
   "writing a representation or committing the transaction) by:", 
   "1. Introducing a framework for storing per-filesystem and per-transaction", 
   "shared data (i.e. data that is shared between all threads in a", 
   "process).", 
   "2. Using that framework to check whether any threads in the current", 
   "process are writing to the proto-revision file.", 
   "3. Creating a 'rev-lock' file in the transaction directory to check", 
   "whether any other processes are writing to the proto-revision file.", 
   "* subversion/include/svn_fs.h", 
   "(svn_fs_apply_text): Document the requirement that the caller close", 
   "the returned stream before further operating on the transaction,", 
   "using the same wording as svn_fs_apply_textdelta() already provides.", 
   "* subversion/include/svn_error_codes.h", 
   "(SVN_ERR_FS_REP_BEING_WRITTEN): New.", 
   "* subversion/libsvn_fs_fs/fs.h", 
   "(fs_fs_shared_txn_data_t): New. Shared (one per process) object to", 
   "hold shared data for an active transaction in a filesystem.", 
   "(fs_fs_shared_data_t): New. Shared (one per process) object to hold", 
   "shared data for a filesystem.", 
   "(fs_fs_data_t): Extend to contain a reference to an explicit", 
   "fs_fs_shared_data_t object rather that just the single write-lock", 
   "mutex.", 
   "* subversion/libsvn_fs_fs/fs.c", 
   "(SVN_FSFS_LOCK_USERDATA_PREFIX): Remove, in favour of the more general...", 
   "(SVN_FSFS_SHARED_USERDATA_PREFIX): New.", 
   "(fs_serialized_init): Allocate an explicit 'shared filesystem data'", 
   "object, and store that in the userdata pool rather than just the", 
   "write-lock mutex. Initialise the contents of that object, including", 
   "the mutexes to serialise write access to the filesystem and read/write", 
   "access to the transaction list.", 
   "* subversion/libsvn_fs_fs/structure", 
   "(Transaction layout) Document the new 'rev-lock' file and locking", 
   "mechanism.", 
   "* subversion/libsvn_fs_fs/fs_fs.c", 
   "(PATH_REV_LOCK, path_txn_proto_rev_lock): New.", 
   "(get_shared_txn, free_shared_txn): New. Add and remove transactions", 
   "from the shared transaction list.", 
   "(with_txnlist_lock): New. Run a function while holding the lock for", 
   "the shared transaction list.", 
   "(struct unlock_proto_rev_baton, unlock_proto_rev_body,", 
   "unlock_proto_rev):", 
   "New. Unlock the prototype revision file.", 
   "(unlock_proto_rev_list_locked): New. Ditto, but for the case where", 
   "the shared transaction list is already locked.", 
   "(struct get_writable_proto_rev_baton, get_writable_proto_rev_body,", 
   "get_writable_proto_rev): New. Lock the prototype revision file and", 
   "return a writable file handle to it.", 
   "(purge_shared_txn_body, purge_shared_txn): New. Remove a transaction", 
   "from the shared transaction list.", 
   "(svn_fs_fs__create_txn): Create an empty 'rev-lock' file when creating", 
   "a transaction.", 
   "(svn_fs_fs__purge_txn): Remove the shared transaction object before", 
   "removing the transaction directory.", 
   "(struct rep_write_baton): Keep track of the returned lock cookie from", 
   "get_writable_proto_rev() so that the proto-rev file can be unlocked.", 
   "(rep_write_get_baton): Call get_writable_proto_rev() to open the", 
   "proto-rev file, stashing the cookie returned into the rep_write_baton).", 
   "(rep_write_contents_close): Unlock the proto-rev file using the cookie.", 
   "(svn_fs_fs__with_write_lock): Account for the movement of the", 
   "filesystem write-lock mutex into the explicit per-filesystem object.", 
   "(commit_body): Call get_writable_proto_rev() to open the proto-rev file,", 
   "and call unlock_proto_rev() to unlock it after we've finalised it."
  ], 
  "revision_id": "861812"
 }, 
 {
  "author": "giorgio_valoti", 
  "date": "2006-10-03T06:47:31.963905Z", 
  "msg": [
   "Updated italian translation.", 
   "* subversion/po/it.po:  - Fixed all fuzzy translations."
  ], 
  "revision_id": "861811"
 }
]