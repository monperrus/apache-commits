[
 {
  "author": "werken", 
  "date": "2002-09-20T14:36:21.000000Z", 
  "msg": [
   "Adding my projects to the powered-by page."
  ], 
  "revision_id": "135219"
 }, 
 {
  "author": "jstrachan", 
  "date": "2002-09-20T13:52:52.000000Z", 
  "msg": [
   "Applied Robert Leftwich's patch setting the proxy host and port before running the jellyunit test cases"
  ], 
  "revision_id": "135218"
 }, 
 {
  "author": "jstrachan", 
  "date": "2002-09-20T13:46:13.000000Z", 
  "msg": [
   "Added Otto as a contributor"
  ], 
  "revision_id": "135217"
 }, 
 {
  "author": "jstrachan", 
  "date": "2002-09-20T13:44:38.000000Z", 
  "msg": [
   "Added Otto von Wachter's first cut of his excellent tutorial - many thanks Otto! - plus a few getting started instructions"
  ], 
  "revision_id": "135216"
 }, 
 {
  "author": "jstrachan", 
  "date": "2002-09-20T13:15:16.000000Z", 
  "msg": [
   "Added support for evaluateAsValue() which (though I don't like the name) will evaluate any nested expressions.", 
   "The evaluateAsString(), evaluateAsIterator() and evaluateAsBoolean() methods now use this new method.", 
   "The reason for this is that sometimes an expression may evaluate to be an Expression object. So the evaluateAsValue() will evaluate the expression, then if the result is another Expression it will keep evaluating it, recursively until its not an Expression.", 
   "Care should be taken when making infinite Expression nesting!", 
   "The reason for this fix is that often Maven will populate the Maven JellyContext with variables which are Expressions (rather than the values of the expressions). So that ${maven.foo} when evaluated would lookup the value of 'maven.foo', which could return an Expression.", 
   "This change will hopefully provide auto-unwrapping of these 'nested expressions'"
  ], 
  "revision_id": "135215"
 }
]