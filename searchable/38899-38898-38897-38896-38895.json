[
 {
  "author": "michi", 
  "date": "2003-02-26T10:32:50.000000Z", 
  "msg": [
   "broken xopus fixed"
  ], 
  "revision_id": "38899"
 }, 
 {
  "author": "egli", 
  "date": "2003-02-26T10:21:50.000000Z", 
  "msg": [
   "The creator hierarchy has been refactored.", 
   "1. There is now an interface (ParentChildCreatorInterface) which", 
   "defines how creators can be invoked.", 
   "2. There is one default class (DefaultCreator) which implements the", 
   "interface and implements the standard behaviour. This class", 
   "replaces the classes AbstractParentChildCreator and", 
   "DefaultParentChildCreator"
  ], 
  "revision_id": "38898"
 }, 
 {
  "author": "egli", 
  "date": "2003-02-26T10:19:33.000000Z", 
  "msg": [
   "The creator hierarchy has been refactored.", 
   "There is one default class (DefaultCreator) which implements the", 
   "interface and implements the standard behaviour."
  ], 
  "revision_id": "38897"
 }, 
 {
  "author": "egli", 
  "date": "2003-02-26T10:15:12.000000Z", 
  "msg": [
   "The creator hierarchy has been refactored.", 
   "1. There is now an interface (ParentChildCreatorInterface) which", 
   "defines how creators can be invoked.", 
   "2. There is one default class (DefaultCreator) which implements the", 
   "interface and implements the standard behaviour. It uses the", 
   "template pattern, e.g. the create method basically just reads the", 
   "template file invokes an (empty) transform method on the DOM node", 
   "and finally writes it back. So subclasses can specify a transform", 
   "method e.g. replace the title with the childName etc.", 
   "3. All classes make use of this and are therefore much smaller.", 
   "4. The create method now takes an additional argument 'parameters'", 
   "which can be used to pass arbitrary arguments. This arg is passed", 
   "to the transform method where it could be used to read things like", 
   "the current user, etc."
  ], 
  "revision_id": "38896"
 }, 
 {
  "author": "egli", 
  "date": "2003-02-26T10:09:36.000000Z", 
  "msg": [
   "The creator hierarchy has been refactored.", 
   "1. There is now an interface (ParentChildCreatorInterface) which", 
   "defines how creators can be invoked.", 
   "2. There is one default class (DefaultCreator) which implements the", 
   "interface and implements the standard behaviour. It uses the", 
   "template pattern, e.g. the create method basically just reads the", 
   "template file invokes an (empty) transform method on the DOM node", 
   "and finally writes it back. So subclasses can specify a transform", 
   "method e.g. replace the title with the childName etc.", 
   "3. All classes make use of this and are therefore much smaller.", 
   "4. The create method now takes an additional argument 'parameters'", 
   "which can be used to pass arbitrary arguments. This arg is passed", 
   "to the transform method where it could be used to read things like", 
   "the current user, etc."
  ], 
  "revision_id": "38895"
 }
]