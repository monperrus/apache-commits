[
 {
  "author": "costin", 
  "date": "2002-04-16T00:04:20.000000Z", 
  "msg": [
   "Refactored ChannelJni - it uses AprImpl to talk with the dark side.", 
   "This will allow us to use the optimizations in channel_jni for other", 
   "C->java calls ( basically avoid creating byte[] or objects per request and minimizing", 
   "the number of JNI calls in the critical path )", 
   "It seems the JNI worker is back ( of course, in single-process mode - the", 
   "multip-process depends on shmem and autoconfiguration )"
  ], 
  "revision_id": "296829"
 }, 
 {
  "author": "costin", 
  "date": "2002-04-16T00:01:33.000000Z", 
  "msg": [
   "Added a more efficient interface to deal with callbacks from C to java", 
   "( code from channel_jni ).", 
   "The idea is to avoid allocations and unneeded calls. I'll also try to", 
   "add some experimental #ifdefed code to use pinning - that would eliminate", 
   "the memcpy.", 
   "Eventually this will be used for the unix channel and other callbacks from", 
   "APR to java ( signals, etc )."
  ], 
  "revision_id": "296828"
 }, 
 {
  "author": "costin", 
  "date": "2002-04-15T23:57:42.000000Z", 
  "msg": [
   "Fix stupid error - now the 2 config phases are corectly detected.", 
   "The first step we call the setters - that would allow validation and", 
   "warnings for invalid settings.", 
   "The second step we call the real init()."
  ], 
  "revision_id": "296827"
 }, 
 {
  "author": "costin", 
  "date": "2002-04-15T23:55:13.000000Z", 
  "msg": [
   "Removed the old native method"
  ], 
  "revision_id": "296826"
 }, 
 {
  "author": "costin", 
  "date": "2002-04-15T23:54:51.000000Z", 
  "msg": [
   "A single class will deal with native."
  ], 
  "revision_id": "296825"
 }
]