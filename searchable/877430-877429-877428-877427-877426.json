[
 {
  "author": "gstein", 
  "date": "2009-04-18T22:12:49.822528Z", 
  "msg": [
   "Fix a problem in svn_wc__merge_internal(). It was attempting to read", 
   "translation properties from a tempfile containing a copyfrom base text.", 
   "Instead, we want to read props from the target, but apply them to an", 
   "arbitrary source file.", 
   "* subversion/libsvn_wc/merge.c:", 
   "(detranslate_wc_file): accept a new SOURCE_FILE parameter to specify", 
   "what file to translate. the MERGE_TARGET param will specify the", 
   "versioned file where we can read properties. adjust code for this", 
   "distinction.", 
   "(svn_wc__merge_internal): pass MERGE_TARGET appropriately, and pass the", 
   "correct filename to detranslate. also: handle a returned error from", 
   "merge_binary_file."
  ], 
  "revision_id": "877430"
 }, 
 {
  "author": "gstein", 
  "date": "2009-04-18T20:12:27.870995Z", 
  "msg": [
   "Revamp a lot of internal props code to not worry about access batons.", 
   "* subversion/libsvn_wc/props.h:", 
   "(svn_wc__wcprop_list): revamp the parameter set", 
   "(svn_wc__load_props): take an ENTRY instead of an access baton. switch", 
   "to dual-pool rather than single.", 
   "* subversion/libsvn_wc/props.c:", 
   "(svn_wc__load_props): take an ENTRY as a param, which means we don't", 
   "need the logic to test for a missing/unversioned node. switch to", 
   "dual-pool usage.", 
   "(read_wcprops): take a DB and a directory abspath, rather than an access", 
   "baton. get the wc_format from the DB rather than access baton.", 
   "(delete_wcprops): update params to read_wcprops().", 
   "(svn_wc__merge_props): update params to svn_wc__load_props(), which also", 
   "entails fetching an entry.", 
   "(svn_wc__wcprop_list): revamp params, and update call to read_wcprops.", 
   "(wcprop_get): removed. inlined into svn_wc_prop_get() since all that was", 
   "really needed is the call to svn_wc__wcprop_list().", 
   "(svn_wc__wcprop_set): update call to read_wcprops()", 
   "(svn_wc_prop_list): use svn_wc__get_entry() instead of svn_wc_entry.", 
   "trim out a bunch of crap and update call to svn_wc__load_props.", 
   "(svn_wc_prop_get): early-out for incorrect property kinds. use", 
   "svn_wc__get_entry, but be wary that callers give us a lot of bogus", 
   "queries, so ignore potential errors. rather than wcprop_get, use", 
   "svn_wc__wcprop_list to get the prophash. rather than svn_wc_prop_list,", 
   "use svn_wc__load_props directly.", 
   "(svn_wc_prop_set3, svn_wc_get_prop_diffs): update call to svn_wc__load_props", 
   "* subversion/libsvn_wc/entries.h:", 
   "(svn_wc__get_entry): add ALLOW_UNVERSIONED param. update docstring.", 
   "* subversion/libsvn_wc/entries.c:", 
   "(svn_wc__get_entry): adjust logic for missing items when", 
   "ALLOW_UNVERSIONED is true.", 
   "* subversion/libsvn_wc/adm_ops.c:", 
   "(revert_admin_things): update call to svn_wc__load_props()", 
   "* subversion/libsvn_wc/lock.c:", 
   "(convert_wcprops): update call to svn_wc__wcprop_list. construct", 
   "full_path in the subpool.", 
   "* subversion/libsvn_wc/update_editor.c:", 
   "(struct edit_baton): add a DB handle", 
   "(close_directory): update call to svn_wc__load_props(), which also", 
   "requires fetching the entry.", 
   "(add_file_with_history): pass the source entry to svn_wc__load_props.", 
   "(make_editor): store the DB into the edit baton", 
   "(check_wc_root): allow the entry to be unversioned and test for a NULL", 
   "entry, rather than detecting the not-found error. update all calls to", 
   "get_entry()", 
   "* subversion/libsvn_wc/copy.c:", 
   "(copy_file_administratively): update call to svn_wc__load_props", 
   "* subversion/libsvn_wc/wc_db.c:", 
   "(svn_wc__db_temp_get_format): if this is called for an unversioned", 
   "subdir, then we walk up the filesystem until we find a versioned", 
   "directory, and create a wcroot for that. this works the first time", 
   "through when parse_local_abspath is called. the second time would fail", 
   "the assertion. instead, recognize the problem and return failure."
  ], 
  "revision_id": "877429"
 }, 
 {
  "author": "steveking", 
  "date": "2009-04-18T17:11:47.639135Z", 
  "msg": [
   "Compare against non-zero instead of equal to TRUE.", 
   "* subversion/libsvn_client/patch.c,", 
   "subversion/libsvn_fs_base/fs.c,", 
   "subversion/libsvn_ra_serf/blame.c", 
   "subversion/libsvn_ra_serf/commit.c", 
   "subversion/libsvn_ra_serf/locks.c", 
   "subversion/libsvn_ra_serf/options.c", 
   "subversion/libsvn_ra_serf/property.c", 
   "subversion/libsvn_ra_serf/replay.c", 
   "subversion/libsvn_ra_serf/update.c", 
   "subversion/libsvn_ra_svn/client.c", 
   "subversion/libsvn_repos/hooks.c", 
   "subversion/libsvn_subr/io.c", 
   "subversion/libsvn_subr/win32_crashrpt.c", 
   "subversion/mod_dav_svn/version.c:", 
   "replace if (xxx == TRUE) with if (xxx)."
  ], 
  "revision_id": "877428"
 }, 
 {
  "author": "stsp", 
  "date": "2009-04-18T16:41:54.615525Z", 
  "msg": [
   "* subversion/libsvn_client/patch.c", 
   "(resolve_target_path): If the parent directory of a path target does", 
   "not exist, report it as 'missing' rather than as 'inapplicable'.", 
   "At least with our command line client, this results in the message", 
   "\"Skipped missing target <file>\", which should give people a better", 
   "hint as to what the problem is than the message \"Skipped <file>\"."
  ], 
  "revision_id": "877427"
 }, 
 {
  "author": "stsp", 
  "date": "2009-04-18T02:27:00.298343Z", 
  "msg": [
   "* subversion/libsvn_client/patch.c", 
   "(copy_lines_to_target): Remove unnecessary check. Short writes cannot", 
   "happen without an error being thrown.", 
   "Found by: gstein"
  ], 
  "revision_id": "877426"
 }
]