[
 {
  "author": "gstein", 
  "date": "2002-06-16T00:47:31.300075Z", 
  "msg": [
   "The beginning of an example: implement the 'svnlook' command entirely", 
   "in Python. While we wouldn't require users to have Python installed,", 
   "this does provide a platform for experimentation, and also a basis for", 
   "how to write a commit-email script entirely in Python which binds", 
   "directly to the SVN libraries (rather than invoking svnlook).", 
   "This implements the following commands: default, author, date,", 
   "dirs-changed, info, and log. It does not (yet) implement: changed,", 
   "diff, ids, and tree.", 
   "Note that one of the editor-based functions (dirs-changed) has been", 
   "implemented. The non-editor functions were cake :-) Given that one", 
   "editor-based function worked, I figured it was time to checkpoint. :-)", 
   "(some of the code is modelled directly from svnlook/main.c, but it is", 
   "also trying to stick to a bit of \"pythonic\" style)"
  ], 
  "revision_id": "842305"
 }, 
 {
  "author": "gstein", 
  "date": "2002-06-16T00:41:36.581264Z", 
  "msg": [
   "Enable an editor to be written in Python. Primarily, this required", 
   "writing an editor that would delegate the calls back to a Python", 
   "object.", 
   "The new svn_swig_py_make_editor() function is used to \"wrap\" a Python", 
   "object into this thunking editor. The editor will call methods on the", 
   "object, such as \"set_target_revision\" with the appropriate", 
   "parameters. The edit_baton is not provided to Python, as it is assumed", 
   "that the editor object is a class instance, which can use instance", 
   "variables for edit state. Directory, file, and window handler batons", 
   "*are* provided, however, and are simply arbitrary Python object.", 
   "The new svn.delta module provides an Editor class which can be derived", 
   "from. The Editor class provides default implementations (they simply", 
   "do nothing), allowing subclasses to override only what they need.", 
   "Major changes were made to swigutil_py.c, which caught up an unrelated", 
   "change to some processing to handle the svn_fs_list_transactions()", 
   "function.", 
   "[ all files in subversion/bindings/swig ]", 
   "* swigutil_py.c:", 
   "(item_baton {}): new baton structure for edit, directory, and file", 
   "batons within the thunking editor.", 
   "(handler_baton {}): new baton for managing a window handler", 
   "(make_pointer): new utility function for constructing a SWIG pointer", 
   "for a given type string.", 
   "(make_ob_pool): new utility function which can be used in a", 
   "BuildValue call to convert a raw pool pointer into a SWIG pointer", 
   "wrapper object.", 
   "(make_ob_window): similar to make_ob_pool, but for delta windows.", 
   "(svn_swig_py_array_to_list): new function for converting an array of", 
   "'const char *' to a python list of string objects.", 
   "(convert_python_error): utility function to convert a Python", 
   "exception into an svn_error_t. not really implemented yet.", 
   "(make_baton): new utility function to construct an item_baton.", 
   "(close_baton): new utility function to call a close_FOO function and", 
   "\"close\" the related baton.", 
   "(thunk_set_target_revision, thunk_open_root, thunk_delete_entry,", 
   "thunk_add_directory, thunk_open_directory,", 
   "thunk_change_dir_prop, thunk_close_directory, thunk_add_file,", 
   "thunk_open_file, thunk_window_handler, thunk_apply_textdelta,", 
   "thunk_change_file_prop, thunk_close_file, thunk_close_edit,", 
   "thunk_abort_edit): new functions to implement an editor that", 
   "maps from C callbacks up into a Python object.", 
   "(thunk_editor {}): the editor structure itself.", 
   "(svn_swig_py_make_editor): new function to construct an editor and", 
   "edit_baton for a given Python editor object (and a pool).", 
   "* swigutil_py.h (SWIG_TypeQuery): new prototype for use outside of a", 
   "SWIG wrapper file.", 
   "(svn_swig_py_array_to_list): helper function for return an array of", 
   "strings.", 
   "(svn_swig_py_make_editor): prototype for the editor creation helper", 
   "function.", 
   "* svn_delta.i: note that 'const svn_delta_editor_t **' types are", 
   "always \"out\" parameters. add a 'const' to the old-style editor", 
   "type  'svn_delta_edit_fns_t' so that it is matched properly. when", 
   "Python swig bindings are being compiled, create a SWIG wrapper for", 
   "the svn_swig_py_make_editor() function, and ensure that", 
   "swigutil_py.h gets included into the wrapper file.", 
   "* python/svn/delta.py: new file", 
   "(Editor class): new class for implementing an editor in Python", 
   "(make_editor): utility function to get an editor pointer and baton", 
   "for passing to functions requiring these.", 
   "* svn_fs.i: remove the typemap for 'char ***' and replace it with code", 
   "for returning a list of strings from an apr_array_header_t. this", 
   "updates the type handling for the svn_fs_list_transaction() API.", 
   "NOTE: this references a new svn_swig_py_array_to_list()", 
   "function. that function is arriving in the next commit."
  ], 
  "revision_id": "842304"
 }, 
 {
  "author": "gstein", 
  "date": "2002-06-16T00:25:40.450764Z", 
  "msg": [
   "Further SWIG refinements.", 
   "[ all files in subversion/bindings/swig ]", 
   "* svn_string.i: enable an 'out' typemap for 'svn_string_t *' so that", 
   "we can return svn_string_t values. in particular, this fixes the", 
   "return type for svn_fs_unparse_id().", 
   "* util.i: process the svn_types.h header (except for the svn_error", 
   "structure, which is never exposed to Python -- exceptions are used", 
   "instead). ignore some more (new) svn_io functions, which most", 
   "binding languages will have anyway. ignore the 'now' parameter to", 
   "svn_parse_date, passing NULL in its place. ignore the related", 
   "getdate_time structure.", 
   "* svn_repos.i: the 'src_entry' parameter to dir_delta needs to be NULL", 
   "sometimes, so use some SWIG Fu to alter the argument parsing", 
   "format character. 'z' means that None is allowed, and a NULL will", 
   "be stored in the 'char *' value."
  ], 
  "revision_id": "842303"
 }, 
 {
  "author": "gstein", 
  "date": "2002-06-16T00:13:49.420413Z", 
  "msg": [
   "Set the executable property on these two examples."
  ], 
  "revision_id": "842302"
 }, 
 {
  "author": "brane", 
  "date": "2002-06-15T18:08:54.982562Z", 
  "msg": [
   "Ongoing work on the delta combiner (issue #531).", 
   "* compose_delta.c: (svn_txdelta__compose_windows): When copying", 
   "svn_txdelta_new ops to the target window, use the op's offset to", 
   "calculate the start of the new data. Get rid of new_data_B."
  ], 
  "revision_id": "842301"
 }
]