[
 {
  "author": "jukka", 
  "date": "2012-07-12T14:51:53.691302Z", 
  "msg": [
   "OAK-182: Support for \"invisible\" internal content", 
   "Pass the \":name\" pattern through the name validator"
  ], 
  "revision_id": "1360708"
 }, 
 {
  "author": "gawor", 
  "date": "2012-07-12T14:44:14.121986Z", 
  "msg": [
   "switch version back to 3.0.1-SNAPSHOT"
  ], 
  "revision_id": "1360707"
 }, 
 {
  "author": "erans", 
  "date": "2012-07-12T14:43:18.521219Z", 
  "msg": [
   "MATH-797", 
   "Initial version for Gauss-Legendre quadrature rules: the integration is", 
   "performed on the whole interval using a single rule. [Whereas the approach", 
   "used in class \"analysis.integration.LegendreGaussIntegrator\" is to divide", 
   "iteratively into sub-intervals (over which the integration rule is used)", 
   "until some covergence criterion is met.]", 
   "Adapted from an original code donated by S\u00e9bastien Brisard.", 
   "In the current implementation, the Gauss-Legendre rules are computed in", 
   "double precision in \"LegendreRuleFactory\" and high precision (using", 
   "\"java.math.BigDecimal\") in \"LegendreHighPrecisionRuleFactory\". However,", 
   "the \"GaussIntegrator\" class performs the integration using \"double\"s", 
   "whatever the precision of the rule.", 
   "The framework of \"BaseRuleFactory\" enables the addition of other quadrature", 
   "schemes (by overriding the \"computeRule\" method). [S\u00e9bastien's code already", 
   "provides Gauss-Chebyshev and Gauss-Hermite schemes (in double precision).]"
  ], 
  "revision_id": "1360706"
 }, 
 {
  "author": "cziegeler", 
  "date": "2012-07-12T14:40:28.376199Z", 
  "msg": [
   "Use released version instead of older snapshot"
  ], 
  "revision_id": "1360705"
 }, 
 {
  "author": "fhanik", 
  "date": "2012-07-12T14:34:50.973044Z", 
  "msg": [
   "jdbc-pool is branched off into Tomcat 7 so that refactoring can take place in trunk"
  ], 
  "revision_id": "1360704"
 }
]