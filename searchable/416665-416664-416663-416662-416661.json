[
 {
  "author": "epunzalan", 
  "date": "2006-06-23T10:29:28.758513Z", 
  "msg": [
   "- added fml dir in the site searches", 
   "- fixed bug that swallows the printing of WARN messages when there are no documentation errors."
  ], 
  "revision_id": "416665"
 }, 
 {
  "author": "", 
  "date": "2006-06-23T10:24:32.935814Z", 
  "msg": [
   "This is an empty revision for padding."
  ], 
  "revision_id": "416664"
 }, 
 {
  "author": "cziegeler", 
  "date": "2006-06-23T10:22:31.706838Z", 
  "msg": [
   "Cleanup"
  ], 
  "revision_id": "416663"
 }, 
 {
  "author": "samisa", 
  "date": "2006-06-23T10:20:45.680546Z", 
  "msg": [
   "Fixed bugs in C code generation in XML in/out model"
  ], 
  "revision_id": "416662"
 }, 
 {
  "author": "kahatlen", 
  "date": "2006-06-23T10:15:09.847542Z", 
  "msg": [
   "DERBY-1036: Embedded and client differ with regard to", 
   "Statement.setCursor Name. client will disallow duplicate cursor", 
   "names. Embedded will allow it.", 
   "and", 
   "DERBY-1183: Client java.sql.ResultSet.getCursorName() does not return", 
   "the correct cursor name for Statements after the first execution", 
   "Patch description:", 
   "The problem underlying DERBY-1183 is the following: A Statement (and by", 
   "inheritance, PreparedStatement and CallableStatement) will have a", 
   "cursor name associated with result set generated by the statement. Such", 
   "names are either set by the user (Statement#setCursorName) or assigned", 
   "by the system (aka \"canned\" cursor names in the client driver). In", 
   "either case, the user can get at the cursor name attached to a", 
   "statement by calling Resultset#getCursorName. This string can be used", 
   "to construct the SQL text of positioned update or delete statement.", 
   "Currently, when a cursor name is set on a statement, the following", 
   "actions are taken (Statement#setCursorName):", 
   "1. The statement's string variable cursorName_ is set to the", 
   "new string. This keeps track of the user cursor name set", 
   "for this statement.", 
   "2. A cache (clientCursorNameCache) of cursor names set by", 
   "the user for this connection is maintained to avoid having", 
   "any two identical cursor name for the same statement/result", 
   "set. When the cursor name is set, the check is performed", 
   "(2a) and the cache is updated with the new cursor name if", 
   "all is well (2b).", 
   "If the statement (only applies for PreparedStatement and", 
   "CallableStatement) already has a DRDA section (ch 7.14)", 
   "allocated, the following is also performed:", 
   "3. A map (cursor name -> section) is updated.", 
   "4. The section associated with this statement gets its", 
   "variable clientCursorName set to the supplied cursor name.", 
   "For Statement, this association (steps 3 and 4) is performed at", 
   "statement execution time (inside flowExecute, just after the new", 
   "section is allocated for a query).", 
   "5. Also in flowExecute (of Statement, PreparedStatement) the", 
   "cursor (user set or canned) is associated with the result", 
   "set (call to mapCursorNameToResultSet).", 
   "The symptom of this bug is that the cursor name set for a statement", 
   "seems to be lost after one execution of that statement, reverting to a", 
   "canned cursor name for executions 2..n.", 
   "This happens because the cursor name is actually reset as part of the", 
   "next execute on a statement object:", 
   "6. Open result sets for a statement are closed when", 
   "flowExecute calls readCloseResultSets. During the closing", 
   "of a result set, ResultSet#markClosed calls", 
   "statement_.removeClientCursorNameFromCache, which in", 
   "addition to removing the user cursor name from the cache", 
   "also sets the statements cursorName_ to null, causing it", 
   "effectively to be forgotten.", 
   "Since #5 happens *after* #6 in flowExecute, the execution still works,", 
   "but with a canned cursor instead of the user named cursor (see", 
   "mapCursorNameToResultSet).", 
   "This \"race condition\" suggests deferring the setup of mappings and", 
   "insertion into the name cache till execution time (*after* the closing", 
   "of open result sets on this statement). When studying this I found", 
   "there was already a bug filed (DERBY-1036) which advises that we defer", 
   "the check of duplicates till execution time, so this patch fixes both", 
   "DERBY-1183 and DERBY-1036.", 
   "In the patch, Statement#setCursorName now only sets the string", 
   "variable cursorName_.", 
   "The patch also removes the resetting of cursorName_ in", 
   "removeClientCursorNameFromCache, so it won't be forgotten. It is still", 
   "removed from the cache when the result set is closed (and current maps", 
   "deleted).", 
   "Furthermore, it moves #2, #3 and #4 till execution time (flowExecute).", 
   "Item #2a is performed at the start of flowExecute, so we can avoid", 
   "starting any protocol action if it turns out that we should not", 
   "start execution (duplicate name). The actions needed in", 
   "Statement#flowExecute and PreparedStatement#flowExecute are similar,", 
   "so I factored these out into the methods Statement#", 
   "checkForDuplicateCursorName and Statement#setupCursorNameCacheAndMappings.", 
   "Next, I removed code from getCursorName which redundantly performs #3", 
   "(now always handled at execute time).", 
   "CAVEAT: When working on understanding what goes on here, I found that", 
   "the Statement finalizer can lead to cursors being released; this is", 
   "part of the client side clean-up for statements that are not", 
   "explicitly closed (DERBY-210). This can sometimes lead to time", 
   "variability in canned cursor names in client driver tests which do not", 
   "close statements explicitly. If the canned cursor name occurs in the", 
   "canon file, we can see spurious diff due to this. I think we have seen", 
   "this in the past. Avoid it by closing statements or by naming the", 
   "cursors explicitly.", 
   "Finally, I removed work-around code in jdbcapi/checkDataSource.java", 
   "for derby-1036 and derby-1183 and updated masters to reflect that the", 
   "cursor names are no longer forgotten.", 
   "Patch submitted by Dag H. Wanvik."
  ], 
  "revision_id": "416661"
 }
]