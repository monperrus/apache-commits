[
 {
  "author": "dennisl", 
  "date": "2011-09-30T12:35:35.100687Z", 
  "msg": [
   "Enable the Examples menu and fill it with the correct links."
  ], 
  "revision_id": "1177630"
 }, 
 {
  "author": "tross", 
  "date": "2011-09-30T12:32:26.092975Z", 
  "msg": [
   "QPID-3362 - Creates the Qpid gem file for distribution on RubyGems.org", 
   "Committed patch from Darryl Pierce"
  ], 
  "revision_id": "1177629"
 }, 
 {
  "author": "dennisl", 
  "date": "2011-09-30T12:31:54.214974Z", 
  "msg": [
   "Fix typos in the documentation."
  ], 
  "revision_id": "1177628"
 }, 
 {
  "author": "saya", 
  "date": "2011-09-30T12:28:59.696043Z", 
  "msg": [
   "First set of changes towards a transactional system over parititions.", 
   "This is the first set of changes for the logging subsystem.:", 
   "Log.java: interface to the logging subsystem. Logging subsystem logs uninterpreted blobs of user data.", 
   "LogManager.java: Manages deletion, creation and formatting of log files and reading/writing of control file. ControlFile is a special file where critical information for the logging subsystem is held. It includes checkpoint information. Control file is updated by writing to a shadow file first and then renaming(moving) the shadow file to the controlfile.", 
   "LogFlushManager.java: Manager logging of data to log files. Manager an internal circular buffer where user data is appended first and then flushed to the underlying log file either when the buffer is full or when one of the clients wants to sync the data. It is possible to specify a zero for the buffer size and directly append the data to the underlying file.Log flushing is done by the foreground threads(No special background thread is used to do it).", 
   "LogScanner.java, DefaultLogScanner.java: Implements forwards scanning of log files.", 
   "LogFileManager.java: defines an interface that exposes basic file operations on log files. It is possible to use different implementations to satisfy this interface. Currently, randomaccessfile is used but FileChannel or HDFS files can be used as well.", 
   "UserLogRecord.java: used to pass byte[] user log records and log position information between the clients and the logging subsystem.", 
   "LogFile format: Log file numbers start from 0 and keep increasing as new log files are created. A log file has a log file header which should be verified when the log file is opened for reading. User log records are uninterpreted blobs of data. A recordHeader is prepended and a record footer is appended to the user log record. This record header and footer has also verification information to detect corrupt/partiallly written log records. Record header/footer and file headers are used by the LogScanner implementation to scan the logs. This format makes it possible to log any data in the logging subsystem.", 
   "TODO: test, handle IO exceptions and other exceptions better."
  ], 
  "revision_id": "1177627"
 }, 
 {
  "author": "markt", 
  "date": "2011-09-30T12:28:48.482857Z", 
  "msg": [
   "Proposal"
  ], 
  "revision_id": "1177626"
 }
]