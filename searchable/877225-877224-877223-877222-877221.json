[
 {
  "author": "gstein", 
  "date": "2009-04-10T02:08:59.740413Z", 
  "msg": [
   "During cleanup, construct a DB first thing, and then pass it around. In", 
   "particular, pass it into svn_wc__adm_steal_write_lock() so it doesn't have", 
   "to keep creating one on each call.", 
   "* subversion/libsvn_wc/lock.h:", 
   "(svn_wc__adm_steal_write_lock): accept a DB param and a two-pool.", 
   "(svn_wc__adm_wc_format): constify the ADM_ACCESS param", 
   "(svn_wc__adm_set_wc_format): constify the ADM_ACCESS param", 
   "(svn_wc__adm_get_db): revamp params. just return the DB.", 
   "(svn_wc__adm_access_abspath): new declaration. similar to access_path,", 
   "but return the baton's abspath instead.", 
   "* subversion/libsvn_wc/lock.c:", 
   "(svn_wc__adm_steal_write_lock): accept a DB and two-pools. don't bother", 
   "to create a DB. pass the DB and two pools into adm_access_alloc.", 
   "(svn_wc__adm_access_abspath): new function.", 
   "(svn_wc__adm_wc_format, svn_wc__adm_set_wc_format): constify the", 
   "ADM_ACCESS parameter. greatly simplify the body since we have a DB and", 
   "ABSPATH handy already.", 
   "(svn_wc__adm_get_db): revamp", 
   "* subversion/libsvn_wc/entries.c:", 
   "(read_entries, svn_wc__entries_write): simplify invocation of get_db,", 
   "and use access_abspath rather than computing the absolute path.", 
   "* subverison/libsvn_wc/log.c:", 
   "(run_existing_logs): grab the DB value from the baton, and pass it along", 
   "to cleanup_internal.", 
   "(upgrade_working_copy): take a DB param, andd pass it along to", 
   "steal_write_lock and recursively to self.", 
   "(cleanup_internal): take a DB parameter, and pass it to steal_write_lock", 
   "(svn_wc_cleanup3): construct a DB early, and pass it to subfunctions."
  ], 
  "revision_id": "877225"
 }, 
 {
  "author": "gstein", 
  "date": "2009-04-10T01:38:29.227334Z", 
  "msg": [
   "Shift some version checking around a bit. Rather than always looking at", 
   "the directory in svn_wc_check_wc(), we construct a DB and ask *it* for the", 
   "version information. In the future, svn_wc_check_wc() should arrange to", 
   "get a DB from somewhere else to use since created one on its own will not", 
   "cache anything.", 
   "* subversion/libsvn_wc/wc_db.h:", 
   "(svn_wc__db_version): removed", 
   "* subversion/libsvn_wc/wc_db.c:", 
   "(svn_wc_-db_version): renamed to ...", 
   "(db_version): ... this.", 
   "(svn_wc__db_temp_get_format): track rename", 
   "* subversion/libsvn_wc/questions.c:", 
   "(svn_wc_check_wc): construct a DB and ask it for the format number."
  ], 
  "revision_id": "877224"
 }, 
 {
  "author": "gstein", 
  "date": "2009-04-10T01:26:07.912556Z", 
  "msg": [
   "Remove the shared structure and directly place the DB into the access", 
   "baton. This completes the basic cleanup steps in the baton, enabling the", 
   "DB to know about batons for any directory.", 
   "* subversion/libsvn_wc/lock.c:", 
   "(svn_wc__adm_shared_t): removed", 
   "(svn_wc_adm_access_t): replaced SHARED with DB.", 
   "(adm_access_alloc): replace SHARED param with DB, and store it in the", 
   "new access baton.", 
   "(alloc_shared): renamed to ...", 
   "(alloc_db): ... this. just create/init the DB now", 
   "(add_to_shared): get the DB from the baton rather than SHARED", 
   "(mark_missing, remove_path_from_shared, remove_from_shared): removed, in", 
   "favor of directly calling the DB.", 
   "(get_from_shared): swap out SHARED param for DB. adjust for lack of", 
   "SHARED member in the baton.", 
   "(svn_wc__adm_steal_write_lock): create a DB rather than a SHARED. adjust", 
   "call to adm_access_alloc", 
   "(open_single, open_all): take and pass along a DB rather than SHARED", 
   "(close_single): call the DB directly rather than via remove_from_shared.", 
   "adjust for drop of SHARED member.", 
   "(do_open): take and pass along a DB rather than SHARED. replace call to", 
   "mark_missing with a direct DB call.", 
   "(svn_wc_adm_open3): create or fetch a DB, and pass it around intead of", 
   "SHARED.", 
   "(svn_wc__adm_pre_open): create and pass along a DB instead of SHARED", 
   "(svn_wc__adm_retrieve_internal): adjust call to get_from_shared", 
   "(svn_wc_adm_open_anchor): create a DB rather than SHARED. adjust calls.", 
   "call DB directly instead of remove_path_from_shared. rather than", 
   "remove_from_shared, just call the DB. when closing the P_ACCESS, just", 
   "call close_single directly to avoid recursion. replace call to", 
   "mark_missing with a direct DB call.", 
   "(do_close): update fetching of DB. replace remove_path_from_shared with", 
   "a direct DB call.", 
   "(svn_wc__adm_get_db, svn_wc__adm_missing): tweak fetching of DB."
  ], 
  "revision_id": "877223"
 }, 
 {
  "author": "gstein", 
  "date": "2009-04-10T00:48:15.137899Z", 
  "msg": [
   "Remove the old SET concept from the access batons. The DB can handle all", 
   "of this for us now.", 
   "* subversion/libsvn_wc/wc_db.h:", 
   "(svn_wc__db_temp_get_all_access): new declaration", 
   "* subversion/libsvn_wc/wc_db.c:", 
   "(svn_wc__db_temp_get_all_access): new function to return a hash of all", 
   "open access batons (note: shallow / borrowed references).", 
   "* subversion/libsvn_wc/lock.c:", 
   "(svn_wc__adm_shared_t): remove the SET member", 
   "(svn_wc_adm_access_t): remove the SET_OWNER member", 
   "(adm_access_alloc): don't bother to set the SET_OWNER value", 
   "(alloc_shared): don't worry about the SET member", 
   "(add_to_shared): don't put the lock into SET. cast away a const warning", 
   "regarding &missing.", 
   "(mark_missing): trim out unused parameters, and don't bother with SET.", 
   "(remove_path_from_shared): don't bother with SET. drop the PATH param.", 
   "(remove_from_shared): don't bother with SET. drop the PATH param.", 
   "(get_from_shared): switch the PATH param to ABSPATH. grab the value from", 
   "the DB, and don't worry about the SET.", 
   "(close_single): drop the SET_OWNER handling, and switch to see how many", 
   "open batons are stored in the DB. if zero, then close the DB.", 
   "(do_open): adjust call to mark_missing()", 
   "(svn_wc_adm_open3): compute and pass an abspath to get_from_shared()", 
   "(svn_wc__adm_retrieve_internal): compute and pass abspath to", 
   "get_from_shared. avoid returning an incorrect baton.", 
   "(svn_wc_adm_open_anchor): adjust params to remove_path_from_shared and", 
   "mark_missing. stop messing with SET_OWNER.", 
   "(do_close): adjust params to get_from_shared(). use get_all_access() to", 
   "fetch all the open access batons, and look for ones to close.", 
   "(svn_wc__adm_missing): compute an absolute path, and adjust the call to", 
   "get_from_shared."
  ], 
  "revision_id": "877222"
 }, 
 {
  "author": "hwright", 
  "date": "2009-04-09T21:51:31.756258Z", 
  "msg": [
   "Announce the 1.6.1 release.", 
   "* www/release-history.html,", 
   "www/getting.html,", 
   "www/index.html,", 
   "www/roadmap.html:", 
   "Update website for 1.6.1."
  ], 
  "revision_id": "877221"
 }
]