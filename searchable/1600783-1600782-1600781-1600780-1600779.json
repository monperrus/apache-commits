[
 {
  "author": "marcus", 
  "date": "2014-06-05T22:26:14.651238Z", 
  "msg": [
   "Updated styles"
  ], 
  "revision_id": "1600783"
 }, 
 {
  "author": "marcus", 
  "date": "2014-06-05T22:25:40.810315Z", 
  "msg": [
   "Added style"
  ], 
  "revision_id": "1600782"
 }, 
 {
  "author": "breser", 
  "date": "2014-06-05T22:15:55.168553Z", 
  "msg": [
   "Make the gpg-agent pinentry not ask for confirmation of password entries and", 
   "make it re-prompt if the password is incorrect.", 
   "* subversion/libsvn_subr/gpg_agent.c:", 
   "(ATTEMPT_PARAMETER): New macro.", 
   "(send_options, get_cache_id): New functions with code taken out of", 
   "password_get_gpg_agent() so it can be reused.", 
   "(password_get_gpg_agent): Use send_options() and get_cache_id(),", 
   "retrieve the attempt from the parameters and use it to determine", 
   "if we should set an error message that will be displayed in pinentry.", 
   "(simple_gpg_agent_first_creds): Set an iter_baton so we can limit the", 
   "retries, put the iter_baton in the parameters so password_get_gpg_agent()", 
   "can access it.", 
   "(simple_gpg_agent_next_creds): New function, removes the cached password", 
   "and prompts the user again.", 
   "(gpg_agent_simple_provider): Add simple_gpg_agent_next_creds callback."
  ], 
  "revision_id": "1600781"
 }, 
 {
  "author": "desruisseaux", 
  "date": "2014-06-05T22:14:53.598697Z", 
  "msg": [
   "Merge from the JDK6 branch."
  ], 
  "revision_id": "1600780"
 }, 
 {
  "author": "dag", 
  "date": "2014-06-05T22:00:26.033842Z", 
  "msg": [
   "DERBY-6576 A immediate Fk constraint blows up iff its referenced PK is deferred and we modify a duplicate key column", 
   "A follow-up patch, derby-6576-repeatable-read. In the case where we do", 
   "not throw an exception because the deferred unique/pk constraint", 
   "referenced by an fk is upheld by another row, we need to make sure", 
   "that condition holds until we commit. This patch changes the check (in", 
   "ReferencedKeyRIChecker#isDuplicated) to scan using repeatable read", 
   "isolation level instead of read committed. This will set a read lock", 
   "on any (well, the first we find) duplicate row till transaction end", 
   "and thus ensure things are good till we commit."
  ], 
  "revision_id": "1600779"
 }
]