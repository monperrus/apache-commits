[
 {
  "author": "cmpilato", 
  "date": "2008-02-13T14:29:55.031618Z", 
  "msg": [
   "Cast some votes, approving some backports."
  ], 
  "revision_id": "869390"
 }, 
 {
  "author": "kfogel", 
  "date": "2008-02-13T08:30:23.810724Z", 
  "msg": [
   "On the mergeinfo-capability branch:", 
   "Follow up to r29314 with a protocol correction.", 
   "* subversion/svnserve/serve.c", 
   "(serve): A list always follows \"success\".  D'oh."
  ], 
  "revision_id": "869389"
 }, 
 {
  "author": "kfogel", 
  "date": "2008-02-13T08:14:42.153061Z", 
  "msg": [
   "On the mergeinfo-capability branch:", 
   "Report mergeinfo capability more efficiently over ra_svn and ra_local.", 
   "For ra_svn, this avoids the extra round trip of r29263.", 
   "Suggested by: glasser", 
   "#########################################################################", 
   "###                                                                   ###", 
   "###                             STATUS                                ###", 
   "###                                                                   ###", 
   "### ra_dav and ra_local pass; ra_svn gets a typical error as in       ###", 
   "### http://subversion.tigris.org/hacking.html#debugging-ra-svn:       ###", 
   "###                                                                   ###", 
   "###    $ svn co svn://localhost/repos wc                              ###", 
   "###    subversion/libsvn_ra_svn/marshal.c:755: (apr_err=210004)       ###", 
   "###    svn: Malformed network data                                    ###", 
   "###                                                                   ###", 
   "### There's a protocol trace at http://pastebin.ca/902213; nothing    ###", 
   "### jumped out at me, but it's late.  Will pick up in after sleep.    ###", 
   "###                                                                   ###", 
   "### Followup: turned out to be a nesting problem, see r29315.         ###", 
   "###                                                                   ###", 
   "#########################################################################", 
   "First make an interface to ask the repository if it supports mergeinfo:", 
   "* subversion/include/svn_repos.h", 
   "(svn_repos_has_capability): New prototype.", 
   "(SVN_REPOS_CAPABILITY_MERGEINFO): New capability.", 
   "* subversion/libsvn_repos/repos.h", 
   "(repository_capabilities): New field.", 
   "* subversion/libsvn_repos/repos.c", 
   "(create_svn_repos_t): Initialize new repository_capabilities field.", 
   "(capability_yes, capability_no): New static constant strings.", 
   "(svn_repos_has_capability): New function.", 
   "Then make svnserve use it, and report back to the client early:", 
   "* subversion/svnserve/serve.c", 
   "(serve): Only report mergeinfo capability if repos supports it.", 
   "* subversion/libsvn_ra_svn/ra_svn.h", 
   "(svn_ra_svn__session_baton_t): Remove repository_supports_mergeinfo", 
   "field that was introduced in r29263.", 
   "* subversion/libsvn_ra_svn/client.c", 
   "(open_session): Expect repos capabilities to arrive separately.", 
   "Remove repository_supports_mergeinfo initialization.", 
   "(ra_svn_has_capability): Remove extra round trip introduced in r29263.", 
   "* subversion/include/svn_ra_svn.h", 
   "(svn_ra_svn_set_capabilities): Document idempotency.", 
   "* subversion/libsvn_ra_svn/protocol: Document where repository", 
   "capabilities fit in.", 
   "Make ra_local use the new interface too:", 
   "* subversion/libsvn_ra_local/ra_local.h", 
   "(svn_ra_local__session_baton_t): Remove repository_supports_mergeinfo", 
   "field that was introduced in r29263.", 
   "* subversion/libsvn_ra_local/ra_plugin.c", 
   "(svn_ra_local__open): Remove repository_supports_mergeinfo initialization.", 
   "(svn_ra_local__has_capability): Just ask repository directly if it", 
   "has mergeinfo capability, and while we're at it, tighten the", 
   "conditional structure introduced in r29263.", 
   "Unrelatedly, make mod_dav transmit an svn_error_t correctly:", 
   "* subversion/mod_dav_svn/reports/mergeinfo.c", 
   "(dav_svn__get_mergeinfo_report): Don't flush before returning error,", 
   "as flushing might obscure the error due to certain intricacies of", 
   "mod_dav's plumbing.", 
   "DEBUGGING BLOCK -- REMOVE THIS WHEN DONE TESTING:", 
   "* subversion/libsvn_client/update.c", 
   "(svn_client__update_internal): YO."
  ], 
  "revision_id": "869388"
 }, 
 {
  "author": "joeswatosh", 
  "date": "2008-02-13T05:39:19.517235Z", 
  "msg": [
   "Follow on to r29250 \"Yet another node-origins-cache-for-FSFS implementation!\"", 
   "Per glasser svn_fs_recover() \"more or less\" no longer supports cancel.  See:", 
   "(http://subversion.tigris.org/servlets/ReadMsg?listName=dev&msgNo=135020)", 
   "* subversion/bindings/swig/ruby/test/test_repos.rb", 
   "(SvnReposTest#test_recover): Remove assertions about cancellation during", 
   "recover.", 
   "* subversion/bindings/swig/ruby/test/test_fs.rb", 
   "(SvnFsTest#assert_recover): Don't assert cancellation."
  ], 
  "revision_id": "869387"
 }, 
 {
  "author": "glasser", 
  "date": "2008-02-13T03:51:07.494696Z", 
  "msg": [
   "On the mergeinfo-api-cleanup branch:", 
   "- Introduce the typedefs \"svn_mergeinfo_t\" and", 
   "\"svn_mergeinfo_catalog_t\".  Change many occurrences of apr_hash_t to", 
   "use these typedefs.  Remove old terminology like \"mergeinfo hash\"", 
   "and \"mergeinfo by path\" in many places.", 
   "- Add notes labeled TODO(miapi) to various places where I believe the", 
   "API needs to be improved.  Specifically,", 
   "svn_[repos_]fs_get_mergeinfo ought to return an", 
   "svn_mergeinfo_catalog_t instead of an \"unparsed\" version; and", 
   "several mergeinfo and rangelist APIs are unused or encourage the", 
   "creation of invalid mergeinfos.", 
   "SUBR LAYER", 
   "* subversion/include/svn_mergeinfo.h", 
   "(Terminology for data structures that contain mergeinfo): New", 
   "comment section.", 
   "(svn_mergeinfo_t, svn_mergeinfo_catalog_t): New.", 
   "(svn_mergeinfo_parse): Update types.  Recommend changing argument to", 
   "svn_string_t *.", 
   "(svn_mergeinfo_diff, svn_mergeinfo_merge, svn_mergeinfo_remove,", 
   "svn_mergeinfo_intersect, svn_mergeinfo_inheritable,", 
   "svn_mergeinfo_dup): Update types.", 
   "(svn_rangelist_reverse, svn_mergeinfo_sort): Recommend removing (or", 
   "privatizing), because they imply that rangelists can legally be", 
   "unsorted.", 
   "(svn_rangelist_count_revs, svn_rangelist_to_revs,", 
   "svn_range_compact): Consider removing unused APIs.", 
   "(svn_rangelist_to_stringbuf, svn_mergeinfo_to_stringbuf): Recommend", 
   "replacing with immutable-string versions.", 
   "* subversion/include/private/svn_mergeinfo_private.h", 
   "(svn_mergeinfo__to_string): Update types.  Recommend that this", 
   "replace the public svn_mergeinfo_to_stringbuf.", 
   "(svn_mergeinfo__equals, svn_mergeinfo__remove_empty_rangelists):", 
   "Update types.", 
   "* subversion/libsvn_subr/mergeinfo.c", 
   "(parse_revision_line, parse_top, svn_mergeinfo_parse,", 
   "walk_mergeinfo_hash_for_diff, svn_mergeinfo_diff,", 
   "svn_mergeinfo__equals, svn_mergeinfo_merge,", 
   "svn_mergeinfo_intersect, svn_mergeinfo_remove,", 
   "svn_mergeinfo_to_stringbuf, svn_mergeinfo__to_string,", 
   "svn_mergeinfo_sort, svn_mergeinfo_dup, svn_mergeinfo_inheritable,", 
   "svn_mergeinfo__remove_empty_rangelists): Update types.", 
   "FS LAYER", 
   "* subversion/include/svn_fs.h", 
   "(svn_fs_get_mergeinfo): Update types.  Note poor return type.", 
   "* subversion/libsvn_fs/fs-loader.h", 
   "(struct root_vtable_t.get_mergeinfo): Update types.", 
   "* subversion/libsvn_fs/fs-loader.c", 
   "(svn_fs_get_mergeinfo): Update types.", 
   "* subversion/libsvn_fs_base/tree.c", 
   "(struct get_mergeinfo_data_and_entries_baton,", 
   "txn_body_get_mergeinfo_data_and_entries,", 
   "crawl_directory_for_mergeinfo, append_to_merged_froms,", 
   "base_get_mergeinfo): Update types.", 
   "(struct get_mergeinfo_for_path_baton,", 
   "txn_body_get_mergeinfo_for_path, get_mergeinfos_for_paths): Rename", 
   "from struct get_mergeinfo_hash_for_path_baton,", 
   "txn_body_get_mergeinfo_hash_for_path, and", 
   "get_mergeinfo_hashes_for_paths.  Note the existence of a bug in a", 
   "TODO(miapi).", 
   "* subversion/libsvn_fs_fs/tree.c", 
   "(crawl_directory_for_mergeinfo, append_to_merged_froms,", 
   "add_descendant_mergeinfo, fs_get_mergeinfo): Update types.", 
   "(get_mergeinfo_for_path, get_mergeinfos_for_paths): Rename from", 
   "get_mergeinfo_hash_for_path and get_mergeinfo_hashes_for_paths.", 
   "Note the existence of a bug in a TODO(miapi).", 
   "REPOS LAYER", 
   "* subversion/include/svn_repos.h", 
   "(svn_repos_fs_get_mergeinfo): Update types.  Note poor return type.", 
   "* subversion/libsvn_repos/fs-wrap.c", 
   "(svn_repos_fs_get_mergeinfo): Update types.", 
   "RA LAYER", 
   "* subversion/include/svn_ra.h", 
   "(svn_ra_get_mergeinfo): Update types.", 
   "* subversion/libsvn_ra/ra_loader.h", 
   "(struct svn_ra__vtable_t.get_mergeinfo): Update types.", 
   "* subversion/libsvn_ra/ra_loader.c", 
   "(svn_ra_get_mergeinfo): Update types.", 
   "* subversion/libsvn_ra_local/ra_plugin.c", 
   "(svn_ra_local__get_mergeinfo): Update types.", 
   "* subversion/libsvn_ra_svn/client.c", 
   "(ra_svn_get_mergeinfo): Update types.", 
   "* subversion/svnserve/serve.c", 
   "(get_mergeinfo): Update types.", 
   "* subversion/libsvn_ra_neon/mergeinfo.c", 
   "(struct mergeinfo_baton, end_element, svn_ra_neon__get_mergeinfo):", 
   "Update types.", 
   "* subversion/libsvn_ra_serf/mergeinfo.c", 
   "(struct mergeinfo_context_t, end_element,", 
   "svn_ra_serf__get_mergeinfo): Update types.", 
   "* subversion/mod_dav_svn/reports/mergeinfo.c", 
   "(dav_svn__get_mergeinfo_report): Update types.", 
   "CLIENT LAYER", 
   "* subversion/include/svn_client.h", 
   "(svn_client_mergeinfo_get_merged): Update types.", 
   "* subversion/libsvn_client/mergeinfo.h", 
   "(struct svn_client__merge_path_t,", 
   "svn_client__get_wc_mergeinfo,", 
   "svn_client__get_repos_mergeinfo,", 
   "svn_client__get_wc_or_repos_mergeinfo,", 
   "svn_client__get_history_as_mergeinfo,", 
   "svn_client__mergeinfo_from_segments,", 
   "svn_client__parse_mergeinfo,", 
   "svn_client__record_wc_mergeinfo,", 
   "svn_client__elide_children,", 
   "svn_client__elide_mergeinfo_catalog): Update types.", 
   "* subversion/libsvn_client/merge.c", 
   "(filter_self_referential_mergeinfo, filter_merged_revisions,", 
   "calculate_remaining_ranges, get_full_mergeinfo,", 
   "populate_remaining_ranges, update_wc_mergeinfo,", 
   "record_mergeinfo_for_record_only_merge,", 
   "mark_mergeinfo_as_inheritable_for_a_range,", 
   "record_mergeinfo_on_merged_children, struct", 
   "get_mergeinfo_walk_baton, get_mergeinfo_walk_cb,", 
   "get_mergeinfo_paths, do_file_merge, do_directory_merge,", 
   "ensure_all_missing_ranges_are_phantoms, remove_irrelevant_ranges,", 
   "calculate_left_hand_side, svn_client_merge_reintegrate): Update", 
   "types.", 
   "* subversion/libsvn_client/mergeinfo.c", 
   "(svn_client__parse_mergeinfo, svn_client__record_wc_mergeinfo,", 
   "adjust_mergeinfo_source_paths, svn_client__get_wc_mergeinfo,", 
   "svn_client__get_repos_mergeinfo,", 
   "svn_client__get_wc_or_repos_mergeinfo,", 
   "svn_client__mergeinfo_from_segments,", 
   "svn_client__get_history_as_mergeinfo, should_elide_mergeinfo,", 
   "svn_client__elide_children, svn_client__elide_mergeinfo,", 
   "get_mergeinfo, struct elide_mergeinfo_catalog_dir_baton, struct", 
   "elide_mergeinfo_catalog_cb_baton,", 
   "svn_client__elide_mergeinfo_catalog,", 
   "svn_client_mergeinfo_get_merged,", 
   "svn_client_mergeinfo_get_available,", 
   "svn_client_suggest_merge_sources): Update types.", 
   "APPLICATION LAYER", 
   "* subversion/svn/mergeinfo-cmd.c", 
   "(svn_cl__mergeinfo): Update types."
  ], 
  "revision_id": "869386"
 }
]