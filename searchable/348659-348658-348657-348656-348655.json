[
 {
  "author": "costin", 
  "date": "2005-11-24T05:27:02.808016Z", 
  "msg": [
   "New endpoint - it's a long time since I had this planned, now I got the chance.", 
   "I think this is the _RIGHT_ way to do the pool and threading - not run any benchmark, but I have", 
   "a feeling it will be good ( in particular on MP machines !).", 
   "Each thread is accepting - the kernel decides who gets to process the request ( may accept at", 
   "the same time on multiple CPUs AFAIK ) - no thread switching or lock or anything.", 
   "I'll use this as a base for the NIO stuff"
  ], 
  "revision_id": "348659"
 }, 
 {
  "author": "bodewig", 
  "date": "2005-11-24T05:26:34.954640Z", 
  "msg": [
   "adapt to output differences in different versions of svn client"
  ], 
  "revision_id": "348658"
 }, 
 {
  "author": "costin", 
  "date": "2005-11-24T05:24:26.826275Z", 
  "msg": [
   "New Endpoint - as simple as possible, no 'spare threads' or recycling. This is a good", 
   "fit for embedded - where footprint is more important and you don't expect huge loads. It", 
   "also makes it easy to organize the code.", 
   "Note that all the SSL code is gone too ( both here and in base class ) - so same approach as Apr could", 
   "be taken. Instead of having SslImpl and all the other classes, that will be specific to the endpoint."
  ], 
  "revision_id": "348657"
 }, 
 {
  "author": "costin", 
  "date": "2005-11-24T05:22:10.625097Z", 
  "msg": [
   "Moved all the functionality from PoolTcpEndpoint in 2 separate classes. It was a mess, impossible", 
   "to understand what thread is created and how. As a result, MasterSlave seems to not be actually using ThreadPools -", 
   "only LeaderFollower."
  ], 
  "revision_id": "348656"
 }, 
 {
  "author": "costin", 
  "date": "2005-11-24T05:20:50.817957Z", 
  "msg": [
   "Refactoring - leave only the core methods, no ThreadPool or specific", 
   "code."
  ], 
  "revision_id": "348655"
 }
]