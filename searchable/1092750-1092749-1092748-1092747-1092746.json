[
 {
  "author": "thejas", 
  "date": "2011-04-15T15:57:36.194751Z", 
  "msg": [
   "PIG-1929:Type checker failed to catch invalid type comparison , PIG-1928: Type Checking, incorrect error message (thejas)"
  ], 
  "revision_id": "1092750"
 }, 
 {
  "author": "coheigea", 
  "date": "2011-04-15T15:47:34.383577Z", 
  "msg": [
   "Committed a refactor of the C14n code."
  ], 
  "revision_id": "1092749"
 }, 
 {
  "author": "rhuijben", 
  "date": "2011-04-15T15:45:40.499178Z", 
  "msg": [
   "* subversion/libsvn_client/commit.c", 
   "(svn_client_commit5): Following up on r1092746, use the right array."
  ], 
  "revision_id": "1092748"
 }, 
 {
  "author": "felixk", 
  "date": "2011-04-15T15:45:17.768629Z", 
  "msg": [
   "Be on the save side when using java 6. When overriding equals also override hashCode.", 
   "This class defines a compareTo(...) method but inherits its equals() method from java.lang.Object. Generally, the value of compareTo should return zero if and only if equals returns true. If this is violated, weird and unpredictable failures will occur in classes such as PriorityQueue. In Java 5 the PriorityQueue.remove method uses the compareTo method, while in Java 6 it uses the equals method.", 
   "From the JavaDoc for the compareTo method in the Comparable interface:", 
   "It is strongly recommended, but not strictly required that (x.compareTo(y)==0) == (x.equals(y)). Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact. The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\""
  ], 
  "revision_id": "1092747"
 }, 
 {
  "author": "rhuijben", 
  "date": "2011-04-15T15:42:57.438143Z", 
  "msg": [
   "* subversion/libsvn_client/commit.c", 
   "(check_nonrecursive_dir_delete): Remove obsolete work. Use standard argument", 
   "ordering.", 
   "(svn_client_commit5): Update caller and comments."
  ], 
  "revision_id": "1092746"
 }
]