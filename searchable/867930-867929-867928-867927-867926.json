[
 {
  "author": "glasser", 
  "date": "2007-11-16T19:35:02.083997Z", 
  "msg": [
   "On the sqlite-node-origins branch.", 
   "* subversion/libsvn_fs_base/tree.c", 
   "(base_node_origin_rev): Canonicalize the input path in both", 
   "cache and non-cache codepaths."
  ], 
  "revision_id": "867930"
 }, 
 {
  "author": "dlr", 
  "date": "2007-11-16T18:49:48.095468Z", 
  "msg": [
   "A follow-up to r27854, fixing the SWIG bindings.", 
   "[ subversion/bindings/swig/ ]", 
   "* core.i", 
   "(svn_swig_mergeinfo_merge, svn_swig_rangelist_merge): Remove", 
   "CONSIDER_INHERITANCE parameter, and update implementation", 
   "accordingly.", 
   "* python/svn/core.py", 
   "(svn_mergeinfo_merge, svn_rangelist_merge): Ditto, also dropping", 
   "relevant PyDoc.", 
   "* ruby/svn/core.rb", 
   "(MergeInfo.merge, RangeList.merge): Ditto.", 
   "Suggested by: pburba"
  ], 
  "revision_id": "867929"
 }, 
 {
  "author": "pburba", 
  "date": "2007-11-16T17:49:08.466673Z", 
  "msg": [
   "Follow-up to r26229, do away with the svn_merge_range_inheritance_t enum.", 
   "r26229 implemented non-inheritable mergeinfo revision ranges in", 
   "svn_merge_range_t.  The introduction of non-inheritable ranges meant", 
   "previously straightforward operations on svn_merge_range_t, i.e. those", 
   "done by the svn_mergeinfo_* and svn_rangelist_* APIs and their helpers,", 
   "became a bit more complicated.  An obvious example being", 
   "\"is range '2-3*' equal to '2-3'?\"  In most cases yes, but not when", 
   "eliding mergeinfo, e.g.:", 
   "Mergeinfo on 'branch':     '/trunk:2-3*'", 
   "Mergeinfo on 'branch/D/G': '/trunk/D/G:2-3' --> No elision should occur!", 
   "To adjust the behavior of these APIs to correctly account for", 
   "inheritability, r26229 introduced the enum svn_merge_range_inheritance_t:", 
   "/* Don't take inheritability into consideration. */", 
   "svn_rangelist_ignore_inheritance,", 
   "/* Inheritability of both ranges must be the same. */", 
   "svn_rangelist_equal_inheritance,", 
   "/* Inheritability of both ranges must be @c TRUE. */", 
   "svn_rangelist_only_inheritable", 
   "*BUT* after looking at this for a long time it is clear that the third", 
   "value, svn_rangelist_only_inheritable, is not necessary and the APIs need", 
   "only a boolean arg to tell them whether to consider inheritability or not", 
   "(and in some cases doesn't need *any* argument).", 
   "So this change removes svn_merge_range_inheritance_t.  It also tweaks", 
   "the C tests of the svn_mergeinfo_* and svn_rangelist_* APIs to provide", 
   "greater coverage in general and of non-inheritable ranges in particular.", 
   "* subversion/include/private/svn_mergeinfo_private.h", 
   "(svn_mergeinfo__equals): Change consider_inheritance argument from a", 
   "svn_merge_range_inheritance_t to a svn_boolean_t.  Improve doc string.", 
   "* subversion/include/svn_mergeinfo.h", 
   "(svn_mergeinfo_parse): Note \"new\" restictions from r27851 in doc string.", 
   "(svn_mergeinfo_diff, svn_rangelist_diff): Change consider_inheritance", 
   "argument from a svn_merge_range_inheritance_t to a svn_boolean_t.", 
   "Improve doc string.", 
   "(svn_mergeinfo_merge, svn_rangelist_merge): Remove", 
   "svn_merge_range_inheritance_t consider_inheritance argument altogether", 
   "and update doc string.", 
   "* subversion/include/svn_types.h", 
   "(svn_merge_range_inheritance_t): Removed.", 
   "* subversion/libsvn_client/copy.c", 
   "(calculate_target_mergeinfo, wc_to_repos_copy): Update calls to", 
   "svn_mergeinfo_merge().", 
   "* subversion/libsvn_client/diff.c", 
   "(display_mergeinfo_diff): Update call to svn_mergeinfo_diff(), always", 
   "considering inheritance.", 
   "* subversion/libsvn_client/merge.c", 
   "(filter_reflected_revisions): Update call to svn_mergeinfo_diff(),", 
   "ignoring inheritance.", 
   "(update_wc_mergeinfo): Update calls to svn_rangelist_remove() and", 
   "svn_rangelist_merge().", 
   "* subversion/libsvn_client/mergeinfo.c", 
   "(elide_mergeinfo): Update calls to svn_mergeinfo__equals(), always", 
   "considering inheritance.", 
   "(svn_client_mergeinfo_get_available): Update call to svn_rangelist_remove,", 
   "don't consider inheritance.", 
   "* subversion/libsvn_fs_util/mergeinfo-sqlite-index.c", 
   "(get_mergeinfo_for_children): Update call to svn_mergeinfo_merge().", 
   "* subversion/libsvn_repos/log.c", 
   "(svn_repos__is_branching_copy): Update call to svn_mergeinfo_diff, don't", 
   "consider inheritance.", 
   "(get_combined_mergeinfo): Update call to svn_mergeinfo_merge().", 
   "(combine_mergeinfo_rangelists): Update call to svn_rangelist_merge().", 
   "(get_merged_rev_mergeinfo): Update calls to svn_mergeinfo_diff(), ignoring", 
   "inheritance, and svn_mergeinfo_merge().", 
   "* subversion/libsvn_repos/rev_hunt.c", 
   "(get_merged_path_revisions): Update call to svn_mergeinfo_diff, don't", 
   "consider inheritance, and call to svn_mergeinfo_merge().", 
   "* subversion/libsvn_subr/mergeinfo.c", 
   "(combine_ranges): Change consider_inheritance argument from a", 
   "svn_merge_range_inheritance_t to a svn_boolean_t.  Tweak the doc", 
   "string.", 
   "(combine_with_lastrange): Get smarter about how we combine two ranges", 
   "with differing inheritability, document said smartness in the doc string.", 
   "(range_to_stringbuf): Move definition prior to first call which is now", 
   "in merge_with_lastrange().", 
   "(combine_with_adjacent_lastrange): New, dedicated helper for", 
   "svn_mergeinfo_parse() via parse_revlist().", 
   "(parse_revlist): Replace calls to combine_with_lastrange with", 
   "combine_with_adjacent_lastrange().  Enforce the svn_mergeinfo_parse", 
   "restriction on reversed ranges.", 
   "(svn_rangelist_merge, svn_mergeinfo_merge): Remove consider_inheritance", 
   "argument and update any callers in this file.  Update calls to", 
   "combine_with_lastrange to not consider inheritance (and thereby merge", 
   "intersecting ranges with different inheritability).", 
   "(inheritance_equal): Removed definition.", 
   "(range_intersect, range_contains): Replace call to inheritance equal with", 
   "simple conditional since the consider_inheritance arg to these functions", 
   "was *always* just a boolean so the special handling of", 
   "svn_merge_range_inheritance_t argument has never actually done", 
   "anything!", 
   "(svn_rangelist_intersect, svn_rangelist_remove, svn_rangelist_diff,", 
   "walk_mergeinfo_hash_for_diff, svn_mergeinfo_diff, svn_mergeinfo__equals):", 
   "Change consider_inheritance argument from a svn_merge_range_inheritance_t", 
   "to a svn_boolean_t.", 
   "* subversion/libsvn_wc/props.c", 
   "(diff_mergeinfo_props): Update call to svn_mergeinfo_diff(), ignoring", 
   "inheritance.", 
   "(diff_mergeinfo_props, combine_forked_mergeinfo_props): Update calls to", 
   "svn_mergeinfo_merge().", 
   "* subversion/tests/libsvn_subr/mergeinfo-test.c", 
   "(broken_mergeinfo_vals): Expand the coverage of our svn_mergeinfo_parse()", 
   "tests to cover not only invalid grammar but also the overlapping, unordered,", 
   "and reversed range restrictions of svn_mergeinfo_parse().  Throw some", 
   "non-inheritable ranges in for good measure too.", 
   "(mergeinfo2, mergeinfo3, mergeinfo4, mergeinfo5, mergeinfo6,", 
   "mergeinfo7): Remove, all the tests previously using now have their own", 
   "test data.", 
   "(test_parse_multi_line_mergeinfo): Remove, this test wasn't very thorough", 
   "and we now have good coverage of multi-line parses in", 
   "test_merge_mergeinfo().", 
   "(test_diff_mergeinfo): Update call to svn_mergeinfo_diff().", 
   "(test_merge_mergeinfo): Tweak the test to enable easier testing of many", 
   "test cases and add a whole slew of new cases.", 
   "(test_rangelist_merge, test_rangelist_diff): New.", 
   "(test_funcs): Remove test_parse_multi_line_mergeinfo and add", 
   "test_rangelist_merge and test_rangelist_diff."
  ], 
  "revision_id": "867928"
 }, 
 {
  "author": "dlr", 
  "date": "2007-11-16T15:54:09.551218Z", 
  "msg": [
   "Follow up to r27845.", 
   "* subversion/svndumpfilter/main.c", 
   "(adjust_mergeinfo): Reconstruct new mergeinfo in a new hash,", 
   "final_mergeinfo, to remove any old mergeinfo for skipped paths.", 
   "Patch by: stylesen", 
   "(Tweaked by me.)"
  ], 
  "revision_id": "867927"
 }, 
 {
  "author": "pburba", 
  "date": "2007-11-16T15:20:11.422306Z", 
  "msg": [
   "Remove comment from C test for svn_mergeinfo_parse questioning if unordered", 
   "ranges are valid, they are not.", 
   "* subversion/tests/libsvn_subr/mergeinfo-test.c", 
   "(mergeinfo_vals): Remove comment."
  ], 
  "revision_id": "867926"
 }
]