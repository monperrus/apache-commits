[
 {
  "author": "asmuts", 
  "date": "2002-02-01T03:55:54.000000Z", 
  "msg": [
   "Added this LRUStore pulled form JCS so it can be used by other programs.", 
   "Not sure this is where it belongs, but it can be moved.  It has O(1) performance degredation and doesn't suffer from the O(N) limitations of the LinkedList LRU implementations.", 
   "It comes with a partial removal and a waterfall method.  it can be overridden and so can the element wrapper, so the system is extendable.  you could extend the wrapper, override the put and use the get(key,container) to get the wrapper if it had more info."
  ], 
  "revision_id": "223484"
 }, 
 {
  "author": "mpoeschl", 
  "date": "2002-02-01T01:23:38.000000Z", 
  "msg": [
   "add license and docs", 
   "the interfaces will be used by torque soon ;-)"
  ], 
  "revision_id": "223483"
 }, 
 {
  "author": "asmuts", 
  "date": "2002-01-31T05:11:12.000000Z", 
  "msg": [
   "remoed unecessary method form interface"
  ], 
  "revision_id": "223482"
 }, 
 {
  "author": "asmuts", 
  "date": "2002-01-31T05:10:51.000000Z", 
  "msg": [
   "A MRUCache suinga  technique presented on", 
   "http://developer.java.sun.com/developer/onlineTraining/Programming/JDCBook/perf4.html", 
   "It is terrible.  The LinkedList remove method is horribly inefficient.", 
   "This should not be used.  It is for example purposes and comparison."
  ], 
  "revision_id": "223481"
 }, 
 {
  "author": "asmuts", 
  "date": "2002-01-29T06:12:58.000000Z", 
  "msg": [
   "fixed compareTo Jisp problem, the result is slow as hell.", 
   "chunked a group to disk in the LRUMemoryCache."
  ], 
  "revision_id": "223480"
 }
]