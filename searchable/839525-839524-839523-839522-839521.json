[
 {
  "author": "kfogel", 
  "date": "2001-06-14T16:28:57.000000Z", 
  "msg": [
   "* subversion/libsvn_fs/reps-table.h (svn_fs__write_rep,", 
   "svn_fs__write_new_rep): Prototype fixes.", 
   "* subversion/libsvn_fs/reps-table.c (svn_fs__write_new_rep):", 
   "Implement.", 
   "(svn_fs__open_reps_table): Initialize the \"next-key\" entry.", 
   "* subversion/libsvn_fs/strings-table.h (svn_fs__new_string_stream):", 
   "New func.", 
   "* subversion/libsvn_fs/strings-table.c (svn_fs__new_string_stream):", 
   "Implement.", 
   "* subversion/libsvn_fs/key-gen.h (svn_fs__next_key_key): Replaces", 
   "`next_key_key', doc fix.  All references changed.", 
   "New tests for strings and representations interfaces:", 
   "* subversion/tests/libsvn_fs/strings-reps-test.c: New file.", 
   "* build.conf (strings-reps-test): New target."
  ], 
  "revision_id": "839525"
 }, 
 {
  "author": "cmpilato", 
  "date": "2001-06-14T16:01:46.000000Z", 
  "msg": [
   "Fixes for the commit process, allowing commits of a single directory", 
   "to actually commit that directory (not just the things in it).", 
   "* include/svn_wc.h", 
   "(svn_wc_get_actual_target): renamed from svn_wc_get_actual_update_target.", 
   "* libsvn_wc/adm_crawler.c", 
   "(struct target_baton): No longer need prop_modified_p.", 
   "(struct stack_object): Added a pool to this structure (so we", 
   "don't have to pass this through all the recursion layers).", 
   "(push_stack, pop_stack): Use new pool.", 
   "(do_dir_replaces): No longer need temporarily pool.", 
   "(do_dir_closures, do_apply_textdelta, do_prop_deltas): Code", 
   "formatting/cleanup.", 
   "(report_single_mod): New function, code broken out from old", 
   "report_local_mods.", 
   "(crawl_dir): Was report_local_mods.", 
   "(svn_wc_crawl_local_mods): Modified to allow for commits of single", 
   "directories.", 
   "* libsvn_client/commit.c", 
   "(svn_client_commit): Use svn_wc_get_actual_target to get a valid", 
   "base_dir and target when committing a single target.", 
   "* clients/cmdline/commit-cmd.c", 
   "(svn_cl__commit): Use svn_wc_get_actual_target to calculate the", 
   "base_dir the same way that svn_client_commit does.", 
   "* clients/cmdline/update-cmd.c", 
   "(svn_cl__update): svn_wc_get_actual_target renamed from", 
   "svn_wc_get_actual_update_target.", 
   "* libsvn_wc/get_editor.c", 
   "(svn_wc_get_actual_target): renamed from svn_wc_get_actual_update_target.", 
   "(make_editor): svn_wc_get_actual_target renamed from", 
   "svn_wc_get_actual_update_target."
  ], 
  "revision_id": "839524"
 }, 
 {
  "author": "cmpilato", 
  "date": "2001-06-14T15:51:19.000000Z", 
  "msg": [
   "* tests/clients/cmdline/local_tests.py", 
   "(run_and_verify_commit): Don't try to pop from an empty array!"
  ], 
  "revision_id": "839523"
 }, 
 {
  "author": "gstein", 
  "date": "2001-06-14T09:48:52.000000Z", 
  "msg": [
   "Check in a new error string system, per discussion on list.", 
   "NOTE: this is /not/ enabled yet (no obvious conclusions on the list yet).", 
   "tweak svn_error.h to define TEST_ALTERNATE_ERROR_SYSTEM to try it out", 
   "* include/svn_error.h: include svn_error_codes.h to pick up the enumerated", 
   "constants. use a different signature for svn_strerror()", 
   "* include/svn_error_codes.h: new file. this file defines all of the custom", 
   "error codes (when normally included). svn_error.c includes it with a", 
   "magic incantation to construct a lookup table instead.", 
   "* libsvn_subr/svn_error.c: redefine svn_strerror() with the new signature,", 
   "and using the error_table[] array built by svn_error_codes.h. if the", 
   "error isn't found, fall back to apr_strerror() (which will fill in a", 
   "default if it doesn't know the error)."
  ], 
  "revision_id": "839522"
 }, 
 {
  "author": "cmpilato", 
  "date": "2001-06-13T13:04:06.000000Z", 
  "msg": [
   "* clients/cmdline/feedback.c", 
   "Squashed some compiler warnings."
  ], 
  "revision_id": "839521"
 }
]