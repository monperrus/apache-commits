[
 {
  "author": "gstein", 
  "date": "2003-10-31T16:10:41.740202Z", 
  "msg": [
   "Work on the bucket allocator. Much of the grunt work concepts for this", 
   "code came from apr-util/buckets/apr_buckets_alloc.c.", 
   "* gen2/serf.h:", 
   "(serf_unfreed_func_t): new callback to notify the application that some", 
   "bucket allocators were not freed. normally, this won't be used, in", 
   "favor of going with the default abort() behavior.", 
   "(serf_bucket_allocator_create): lose the apr_allocator param, as we just", 
   "use the pool's allocator. also take a unfreed callback and baton.", 
   "(serf_bucket_allocator_destroy): removed. the bucket allocator resides", 
   "in a pool now, and is destroyed by clearing/destroying the pool.", 
   "(serf_bucket_allocator_get_pool): get the allocator's pool", 
   "* gen2/buckets/buckets.c:", 
   "(node_header_t): this structure is prepended to each allocation through", 
   "the bucket allocator. it records some info so that we can properly", 
   "free the block (return it to the apr_allocator or put the block onto a", 
   "free list).", 
   "(SIZEOF_NODE_HEADER_T): aligned size of the node_header_t", 
   "(STANDARD_NODE_SIZE): the \"fast alloc\" block size. allocs of this size", 
   "or less can come from a free list.", 
   "(ALLOC_AMT): when retrieving blocks of data for further breaking apart", 
   "into STANDARD_NODE_SIZE chunks, this block size will be requested.", 
   "(serf_bucket_alloc_t): fill out with the unfreed func, the number of", 
   "unfreed allocations, and fields to track blocks-to-free.", 
   "(allocator_cleanup): new pool cleanup function to free apr_allocator", 
   "memory, and to verify that all bucket allocations were freed.", 
   "(serf_bucket_allocator_create): revamped to create the allocator within", 
   "the provided pool.", 
   "(serf_bucket_allocator_destroy): removed", 
   "(serf_bucket_mem_alloc): revamped to pick out sub-blocks from the larger", 
   "allocation (or the free list), and to only hit the apr_allocator for", 
   "\"too big\" block allocations.", 
   "(serf_bucket_mem_free): revamped to put sub-blocks onto a free list, or", 
   "to return the memory to the apr_allocator."
  ], 
  "revision_id": "64"
 }, 
 {
  "author": "gstein", 
  "date": "2003-10-30T20:24:00.130076Z", 
  "msg": [
   "start discussing some dev/design topics"
  ], 
  "revision_id": "63"
 }, 
 {
  "author": "jerenkrantz", 
  "date": "2003-10-30T17:50:28.122197Z", 
  "msg": [
   "* gen2/serf.h: Fix serf_bucket_readline macro to call readline not read."
  ], 
  "revision_id": "62"
 }, 
 {
  "author": "gstein", 
  "date": "2003-10-30T12:05:22.042165Z", 
  "msg": [
   "Various updates and fixes.", 
   "* gen2/serf.h:", 
   "(...): include apr_network_io.h and apr_time.h for proper compilation", 
   "(serf_bucket_t.read_bucket): constify the bucket type", 
   "(serf_bucket_read): fix the parameter list -- add requested amount", 
   "(serf_bucket_readline): new macro for serf_bucket_t.readline", 
   "(serf_bucket_allocator_create): moved in file", 
   "(serf_bucket_allocator_destroy): new declaration", 
   "* gen2/serf_bucket_types.h:", 
   "(...): include apr_mmap.h for compilation", 
   "(serf_bucket_aggregate_create): fix typo in the prototype.", 
   "* gen2/serf_bucket_util.h:", 
   "(serf_bucket_create, serf_default_read_bucket): constify the type", 
   "(serf_bucket_mem_alloc, serf_bucket_mem_free): new declarations", 
   "* gen2/buckets/buckets.c:", 
   "(serf_bucket_create, serf_default_read_bucket): constify the type", 
   "* gen2/buckets/aggregate_buckets.c:", 
   "(serf_bucket_aggregate_create): store the new context into the local", 
   "variable. pass the _address_ of the type to serf_bucket_create().", 
   "(serf_bucket_aggregate_become): implement", 
   "(serf_bucket_aggregate_prepend): sizeof should use the variable name", 
   "(serf_bucket_aggregate_append): sizeof should use the variable name", 
   "(serf_aggregate_read): fix variable name (request -> requested)", 
   "(serf_aggregate_read_bucket): if the first bucket is of the right type,", 
   "then return it and remove it. other minor tweaks for compilation.", 
   "(serf_bucket_type_aggreagate): fill in the default functions for the", 
   "metadata entries.", 
   "* gen2/buckets/request_buckets.c:", 
   "(serf_request_state_t): removed. we serialize everything in one fell", 
   "swoop now.", 
   "(serf_bucket_request_create): assign new memory properly, and pass a", 
   "pointer to the type to serf_bucket_create().", 
   "(serialize_data): new function to turn \"self\" into an aggregate bucket", 
   "hold the request.", 
   "(serf_request_read, serf_request_readline, serf_request_peek): serialize", 
   "the data, then ask the aggregate bucket  to response properly."
  ], 
  "revision_id": "61"
 }, 
 {
  "author": "gstein", 
  "date": "2003-10-30T11:01:17.202753Z", 
  "msg": [
   "Update the acceptor callback handling, and add some skeleton code for the", 
   "request processing.", 
   "* serf/branches/gen2/STATUS: update some notes", 
   "* serf/branches/gen2/serf.h:", 
   "(serf_context_run): note that APR_TIMEUP is returned when the", 
   "connections have been inactive for the specified duration.", 
   "(serf_connection_create): move the acceptor to the request creation", 
   "function. We want to enable per-request acceptors since those define", 
   "which buckets are wrapped around the socket, and (thus) how the", 
   "response data is manipulated and processed.", 
   "(serf_connection_request_create): add the acceptor callbacks. remove the", 
   "bucket allocator since the core system doesn't actually create", 
   "buckets; we get a request bucket passed to us, and the acceptor", 
   "callback creates the response buckets.", 
   "* serf/branches/test/serf_get.c:", 
   "(main): adjust parameters to compensate for the changes to", 
   "serf_connection_create and serf_connection_request_create.", 
   "* serf/branches/test/context.c:", 
   "(struct serf_connection_t): add structure which got dropped during the", 
   "merge of context.c and connection.c", 
   "(request_t): new structure to hold some per-request tracking info.", 
   "(process_creation): was serf_connection_process; the name doesn't have", 
   "to follow the strict namespacing since it is now internal.", 
   "(add_connection, remove_connection): renamed from", 
   "serf_context_add_connection and serf_context_remove_connection,", 
   "respectively. we don't need the hard-core namespacing for internal", 
   "functions.", 
   "(serf_connection_create): remove the acceptor callback and its baton.", 
   "(serf_connection_request_create): add the acceptor callback and its", 
   "baton, and remove the bucket allocator."
  ], 
  "revision_id": "60"
 }
]