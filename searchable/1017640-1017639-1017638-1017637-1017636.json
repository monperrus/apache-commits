[
 {
  "author": "dkhaywood", 
  "date": "2008-02-14T15:05:54.206313Z", 
  "msg": [
   "the EncodeableFacetUsingEncoderDecoder & ParseableFacetUsingParser have moved down into the java reflector; all of the AbstractValueAdapters (eg StringAdapter, IntAdapter) have also moved down into the java reflector; EncoderDecoder and Parser are still generic in the applib, but I've extended the Parser interface to also allow it to be used as the delegate for TitleFacet and for TypicalLengthFacet.  My reasoning is that a parser basically has knowledge that a value has some sort of string representation, so it seems reasonable that it can manufacture the title and knows how long, on average, such a title might be.  Have also added EqualByContentFacet (for equals/hashCode side of a @Value)."
  ], 
  "revision_id": "1017640"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-14T15:05:39.956128Z", 
  "msg": [
   "the EncodeableFacetUsingEncoderDecoder & ParseableFacetUsingParser have moved down into the java reflector; all of the AbstractValueAdapters (eg StringAdapter, IntAdapter) have also moved down into the java reflector; EncoderDecoder and Parser are still generic in the applib, but I've extended the Parser interface to also allow it to be used as the delegate for TitleFacet and for TypicalLengthFacet.  My reasoning is that a parser basically has knowledge that a value has some sort of string representation, so it seems reasonable that it can manufacture the title and knows how long, on average, such a title might be.  Have also added EqualByContentFacet (for equals/hashCode side of a @Value)."
  ], 
  "revision_id": "1017639"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-14T15:04:58.474363Z", 
  "msg": [
   "the EncodeableFacetUsingEncoderDecoder & ParseableFacetUsingParser have moved down into the java reflector; all of the AbstractValueAdapters (eg StringAdapter, IntAdapter) have also moved down into the java reflector; EncoderDecoder and Parser are still generic in the applib, but I've extended the Parser interface to also allow it to be used as the delegate for TitleFacet and for TypicalLengthFacet.  My reasoning is that a parser basically has knowledge that a value has some sort of string representation, so it seems reasonable that it can manufacture the title and knows how long, on average, such a title might be.  Have also added EqualByContentFacet (for equals/hashCode side of a @Value)."
  ], 
  "revision_id": "1017638"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-14T15:02:23.776508Z", 
  "msg": [
   "the EncodeableFacetUsingEncoderDecoder & ParseableFacetUsingParser have moved down into the java reflector; all of the AbstractValueAdapters (eg StringAdapter, IntAdapter) have also moved down into the java reflector; EncoderDecoder and Parser are still generic in the applib, but I've extended the Parser interface to also allow it to be used as the delegate for TitleFacet and for TypicalLengthFacet.  My reasoning is that a parser basically has knowledge that a value has some sort of string representation, so it seems reasonable that it can manufacture the title and knows how long, on average, such a title might be.  Have also added EqualByContentFacet (for equals/hashCode side of a @Value)."
  ], 
  "revision_id": "1017637"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-14T15:02:03.101584Z", 
  "msg": [
   "the EncodeableFacetUsingEncoderDecoder & ParseableFacetUsingParser have moved down into the java reflector; all of the AbstractValueAdapters (eg StringAdapter, IntAdapter) have also moved down into the java reflector; EncoderDecoder and Parser are still generic in the applib, but I've extended the Parser interface to also allow it to be used as the delegate for TitleFacet and for TypicalLengthFacet.  My reasoning is that a parser basically has knowledge that a value has some sort of string representation, so it seems reasonable that it can manufacture the title and knows how long, on average, such a title might be.  Have also added EqualByContentFacet (for equals/hashCode side of a @Value)."
  ], 
  "revision_id": "1017636"
 }
]