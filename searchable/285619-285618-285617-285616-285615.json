[
 {
  "author": "remm", 
  "date": "2001-02-03T20:36:21.000000Z", 
  "msg": [
   "- Apply Kief Morris patch on session persistence.", 
   "- Tested session persistence across server restarts : it works great.", 
   "- Here are Kief's comments about his patch :", 
   "The main change is the addition of a PersistentManager class, an optional replacement", 
   "for StandardManager, providing the following configurable functionality:", 
   "- Saves sessions to a Store on shutdown, loads on restart. This is currently implemented", 
   "in StandardManager, but PersistentManager makes use of the Store interface.", 
   "- Swaps sessions out to a Store if the number in memory exceeds maxActiveSessions,", 
   "to better manage resources. A minIdleSwap property prevents sessions from being", 
   "swapped out if they haven't been idle for very long, to avoid thrashing.", 
   "- Swaps sessions out to a Store if they are idle for too long. With this feature, an app", 
   "can have very long session expiration times without over-burdening memory.", 
   "- Backs sessions up to Store (but keeps them in memory) if they are idle for too long.", 
   "This provides basic fault tolerance, since the sessions will be read in from the Store", 
   "when the server starts after a crash. NOT IMPLEMENTED YET! There is an issue", 
   "regarding the Servlet 2.3 specification which I will discuss below.", 
   "ISSUES:", 
   "----------------------------------------", 
   "- Backing up Sessions: I believe that HttpSessionActivationListeners should be notified", 
   "when sessions are being backed up and restored. However, application developers", 
   "reading the Servlet 2.3 specification [PFD] might not expect a session to remain", 
   "in active use after the sessionWillPassivate() method is called. I would like to get", 
   "some feedback on this.", 
   "- I still have not figured out how to get Catalina to instantiate the Store class for me,", 
   "this patch hard-codes the use of FileStore in PersistentManager. I've tried mucking", 
   "around in startup/Catalina.java, to no avail. Can anyone help me out with this?", 
   "- There is a lot of duplication of code between PersistentManager and StandardManager.", 
   "Maybe this should be moved to ManagerBase?", 
   "- The use of Session/StandardSession is very messy in ManagerBase, StandardManager,", 
   "and now PersistentManager. Although some code uses the Session interface and executes", 
   "StandardSession-specific code only after testing, much of this code will break if an", 
   "alternative implementation is used (essential properties aren't set, etc.), and some", 
   "code has StandardSession hard-coded without tests.", 
   "It looks as if someone had good intentions to make it possible to replace StandardSession", 
   "with a different implementation, but it hasn't been followed through, so it's just a mess.", 
   "This means I can't create a PersistentSession class and keep persistence-related code", 
   "out of StandardSession, which is too bad.", 
   "Fixing this will require a fair amount of refactoring.", 
   "- While developing apps you would sometimes like to wipe out all of the sessions,", 
   "which is a bit awkward to do with persistence enabled because the server saves", 
   "and restores them on restarts. Currently you would have to change the server.xml", 
   "configuration for PersistentManager to disable all persistence and backups, and then", 
   "it will clear out the Store when you restart. You can manually delete them from the", 
   "directory used by FileStore, but this won't work with other Store implementations.", 
   "Ideally there should be a command line argument which causes the Store to be", 
   "cleared.", 
   "PATCH COMMENTS", 
   "----------------------------------------", 
   "ManagerBase.java", 
   "----------------------------------------", 
   "- Fixed a bug where recycled sessions don't seem to have their Managers set.", 
   "The session.recycle() clears the manager, so the createSession() method should", 
   "set the manager if it uses a recycled session. It's possible this is done elsewhere,", 
   "but I don't see it, caused some NullPointerExceptions while testing my persistence", 
   "code.", 
   "- Fixed a bug where findSession() apparently doesn't call access() on the returned", 
   "session. The result is sessions will expire based on when they were first created,", 
   "not when they were last accessed. Again, this might be set somewhere else, but", 
   "it wasn't getting set in my persistence testing.", 
   "StandardSession.java", 
   "----------------------------------------", 
   "- Changed expire() to recycle the session if the Manager is a subclass of ManagerBase.", 
   "- Added activate() and passivate() methods which notify HttpSessionActivationListeners", 
   "when the session is activated or passivated, as per the Servlet 2.3 specification PFD.", 
   "Store.java", 
   "----------------------------------------", 
   "- Added getManager(), setManager(), and clear() methods.", 
   "FileStore.java", 
   "----------------------------------------", 
   "- Implemented Store functionality, sessions are serialized one per file.", 
   "PersistentManager", 
   "----------------------------------------", 
   "- Implemented persistence across server restarts", 
   "- Implemented swapping out of sessions to manage resources, based on", 
   "the number of sessions in memory and idle times.", 
   "- Stubs for backing up of sessions based on idle times, not yet implemented.", 
   "server.xml", 
   "----------------------------------------", 
   "- Added a commented out section to enable and configure PersistentManager", 
   "LocalStrings.properties", 
   "----------------------------------------", 
   "- Added strings for logging by FileStore and PersistentManager."
  ], 
  "revision_id": "285619"
 }, 
 {
  "author": "glenn", 
  "date": "2001-02-03T16:42:39.000000Z", 
  "msg": [
   "Implement SecurityManager"
  ], 
  "revision_id": "285618"
 }, 
 {
  "author": "remm", 
  "date": "2001-02-03T07:48:33.000000Z", 
  "msg": [
   "- Will now return a status report for every status except 304 (and 200).", 
   "- Now try to emulate Apache 1.3.x behavior as closely as possible.", 
   "- Don't add a Content-Length: 0 when status is 304.", 
   "- The directory browsing pages will now return links to other directories with", 
   "a trailing \"/\" to minimize the number of redirections needed."
  ], 
  "revision_id": "285617"
 }, 
 {
  "author": "craigmcc", 
  "date": "2001-02-01T19:24:49.000000Z", 
  "msg": [
   "Add nested copies of \".cvsignore\" so that updates in subdirectories", 
   "get the same benefits as updates from the top level directory."
  ], 
  "revision_id": "285616"
 }, 
 {
  "author": "craigmcc", 
  "date": "2001-02-01T19:08:16.000000Z", 
  "msg": [
   "Modify the Tomcat 4.0 build process as discussed on TOMCAT-DEV today.", 
   "Now, the destination directories will be \"build\" and \"dist\" inside the", 
   "\"jakarta-tomcat-4.0\" source directory, rather than \"../build/tomcat-4.0\"", 
   "and \"../dist/tomcat-4.0\".", 
   "Update the README.txt file in the top level directory to reflect these", 
   "changes, and remove the obsolete README file in the \"catalina\" directory.", 
   "NOTE:  A \".cvsignore\" file was previously checked in which should cause", 
   "CVS to ignore the existence of these directories when doing commits and", 
   "updates."
  ], 
  "revision_id": "285615"
 }
]