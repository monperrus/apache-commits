[
 {
  "author": "arkurth", 
  "date": "2009-07-15T14:34:47.570747Z", 
  "msg": [
   "VCL-183", 
   "Replaced all calls to DataStructure.pm::get_computer_private_ip() with get_computer_private_ip_address(). Removed get_computer_private_ip() sub from DataStructure.pm."
  ], 
  "revision_id": "794285"
 }, 
 {
  "author": "ltheussl", 
  "date": "2009-07-15T14:33:38.705960Z", 
  "msg": [
   "log parse exception"
  ], 
  "revision_id": "794284"
 }, 
 {
  "author": "arkurth", 
  "date": "2009-07-15T14:30:16.065653Z", 
  "msg": [
   "VCL-167", 
   "There was a bug in the regex which was attempting to find \"Offending key\" and \"Matching host key\" lines in SSH output. Removed ^ from beginning of regex. It now finds the lines.", 
   "VCL-183", 
   "Removed DataStructure.pm::get_computer_private_ip() sub and created a sub with the same name which only calls get_computer_private_ip_address(). This is so subs with both names exist while the rest of the code which calls either sub is transitioned to only call get_computer_private_ip_address().", 
   "Removed utils.pm::get_ip_address_from_hosts(). It was only being called by DataStructure.pm::get_computer_private_ip().", 
   "Also fixed bug in regex in get_computer_private_ip_address(). It wasn't handling computer names correctly if names had the same prefix, ie blade1g4-1 and blade1g4-14.", 
   "VCL-81", 
   "Added is_management_node_process_running() sub to utils.pm. This runs pgrep to determine if a process is running on the management node. It is used to determine if another SCP process is already running to retrieve a given image from another management node.", 
   "Updated does_image_exist() subs in vmware.pm and xCAT.pm. The subs now check if an SCP process is running to retrieve the image before checking if the image files exist. If running, they wait and keep checking. This will prevent does_image_exist() from returning true if a partial image exists which is actively being copied.", 
   "Updated retrieve_image() subs in vmware.pm and xCAT.pm. The subs now check all partner management nodes and try to retrieve from the partner with the largest image. This will prevent retrieval from a partner which contains a partial image, which could happen if that partner is actively retrieving the same image from another partner."
  ], 
  "revision_id": "794283"
 }, 
 {
  "author": "jgray", 
  "date": "2009-07-15T14:27:10.942868Z", 
  "msg": [
   "HBASE-1661 HBASE-1215 partial commit broke trunk, does not compile"
  ], 
  "revision_id": "794282"
 }, 
 {
  "author": "hindessm", 
  "date": "2009-07-15T14:25:38.580776Z", 
  "msg": [
   "This regression test for HARMONY-946 should actually failed due to the", 
   "spurious space at the end of the 0.0.0.0 string.  Fixing the typo so", 
   "it should pass on RI too now.  We need to make it fail so I've raised", 
   "'HARMONY-6273 [classlib] [luni] InetAddress.getByName(\"0.0.0.0 \")", 
   "should throw UnknownHostException'."
  ], 
  "revision_id": "794281"
 }
]