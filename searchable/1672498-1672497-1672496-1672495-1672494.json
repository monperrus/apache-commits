[
 {
  "author": "ylavic", 
  "date": "2015-04-09T21:35:12.267276Z", 
  "msg": [
   "Merge r1671957 from trunk.", 
   "Introduce apr_skiplist_last[_compare]() and apr_skiplist_remove_node().", 
   "The apr_skiplist_last[_compare]() functions return the last matching element", 
   "(duplicate) whereas the existing apr_skiplist_find[_compare]() return the first", 
   "one encountered during the walk.", 
   "The function apr_skiplist_remove_node() function allows to remove an element", 
   "given its node, e.g. an iterator from apr_skiplist_{getlist,previous,next}().", 
   "The goal is to have a reliable way to find (and remove) any element having a", 
   "unique address/pointer, by starting with the last duplicate and then iterating", 
   "on the previous ones until the match (see example in testskiplist.c).", 
   "apr_skiplist_last() is much more efficient than apr_skiplist_first() would be,"
  ], 
  "revision_id": "1672498"
 }, 
 {
  "author": "rmannibucau", 
  "date": "2015-04-09T21:33:23.051654Z", 
  "msg": [
   "handling @Priority for producers"
  ], 
  "revision_id": "1672497"
 }, 
 {
  "author": "hadrian", 
  "date": "2015-04-09T21:24:44.699210Z", 
  "msg": [
   "CMS commit to www by hadrian"
  ], 
  "revision_id": "1672496"
 }, 
 {
  "author": "ylavic", 
  "date": "2015-04-09T21:24:35.198332Z", 
  "msg": [
   "testskiplist: axe buggy compare function acomp() and associated test.", 
   "Instead, define and use ecomp() which bases uniqueness on both elem's a and b,", 
   "and test it with multiple duplicates inserted/found/removed in arbitray order.", 
   "Improve comment on when/how these compare functions could be used in real apps."
  ], 
  "revision_id": "1672495"
 }, 
 {
  "author": "trawick", 
  "date": "2015-04-09T21:22:25.644382Z", 
  "msg": [
   "warnings are distracting :)"
  ], 
  "revision_id": "1672494"
 }
]