[
 {
  "author": "jta", 
  "date": "2005-03-10T23:58:46.042254Z", 
  "msg": [
   "Corrected wording in derby_comm.html and checked in built page for Andrew's modification of derby_downloads.xml (svn revision 157007)."
  ], 
  "revision_id": "157014"
 }, 
 {
  "author": "leosimons", 
  "date": "2005-03-10T23:26:07.660399Z", 
  "msg": [
   "Some thoughts about dependency modelling"
  ], 
  "revision_id": "157013"
 }, 
 {
  "author": "michi", 
  "date": "2005-03-10T23:25:43.849985Z", 
  "msg": [
   "all methods synchronized"
  ], 
  "revision_id": "157012"
 }, 
 {
  "author": "leosimons", 
  "date": "2005-03-10T23:22:30.614923Z", 
  "msg": [
   "* start testing the walker", 
   "* clean up walker code a little", 
   "* started but disabled print() friendly model", 
   "* started on a brute-force find-every-cycle algorithm with arguably horrible performance. In evaluating options, I decided that a simple algorithm that didn't worry about stuff like graph breadth, connectedness, partitioning, etc, is probably worth the performance hit as it is so much easier to understand, and if all is right we don't have to run this code very often at all, since it only gets run if a cycle is determined to exist using an efficient topsort. Still need to test it all though :-D"
  ], 
  "revision_id": "157011"
 }, 
 {
  "author": "dolander", 
  "date": "2005-03-10T23:19:44.311670Z", 
  "msg": [
   "Updated doc...."
  ], 
  "revision_id": "157010"
 }
]