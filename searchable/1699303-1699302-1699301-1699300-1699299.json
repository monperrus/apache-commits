[
 {
  "author": "lgo", 
  "date": "2013-04-09T20:38:14.037832Z", 
  "msg": [
   "On the multiple_ssl_impls branch:", 
   "Implement loading a CA cert from file for Secure Transport. Add this as a new", 
   "function to the API, unfortunately current serf_ssl_load_cert_file doesn't", 
   "thank any parameter that can be used to identify which SSL bucket implementation", 
   "needs to be used.", 
   "* serf_bucket_types.h", 
   "(serf_ssl_load_cert_file): Add deprecation comment.", 
   "(serf_ssl_load_CA_cert_from_file): New public API declaration.", 
   "* buckets/bucket_private.h", 
   "(struct serf_ssl_bucket_type_t): Rename load_cert_file to", 
   "load_CA_cert_from_file.", 
   "* buckets/openssl_buckets.c", 
   "(serf__openssl_load_cert_file): Rename function to...", 
   "(serf__openssl_load_CA_cert_from_file): ... this.", 
   "* buckets/securetransport_buckets.c", 
   "(CFStringToChar, splitext): New helper functions.", 
   "(serf_ssl_bucket_type_securetransport): Rename load_cert_file.", 
   "(load_cert_file): Rename function to...", 
   "(load_CA_cert_from_file): ... this. Implement using Keychain Services API.", 
   "* buckets/ssl_buckets.c", 
   "(serf_ssl_load_CA_cert_from_file): New function, wrapper for one of the SSL", 
   "bucket implementations.", 
   "* test/test_ssl.c", 
   "(test_ssl_cert_subject): Update to use the new load_CA_cert from file API.", 
   "(test_ssl_load_CA_cert_from_file): New test.", 
   "(test_ssl): Run the new test."
  ], 
  "revision_id": "1699303"
 }, 
 {
  "author": "lgo", 
  "date": "2013-04-09T19:57:37.944993Z", 
  "msg": [
   "On the multiple_ssl_impls branch:", 
   "* buckets/openssl_buckets.c:", 
   "(serf__openssl_set_allowed_cert_validation_modes): Fix copy-pasty error."
  ], 
  "revision_id": "1699302"
 }, 
 {
  "author": "lgo", 
  "date": "2013-04-06T19:11:09.712496Z", 
  "msg": [
   "On the multiple_ssl_impls branch:", 
   "Try to fit both the models to validate server certificates of", 
   "Secure Transport/Keychain and OpenSSL into serf. Allow the application to", 
   "indicate the allowed 'validation modes': serf vs application managed, user", 
   "interaction allowed versus not allowed.", 
   "Let this commit also be the place where I express my frustration for the extent", 
   "to which Apple went to make it difficult for OS X developers to extract some", 
   "meaningful information out of the certificates. Let's reduce a Mac to an", 
   "iPod with a keyboard and remove all code that could make it more than that.", 
   "* serf_bucket_types.h", 
   "(enum serf_ssl_cert_validation_mode_t): New type.", 
   "(serf_ssl_set_allowed_cert_validation_modes): New function declaration.", 
   "* buckets/bucket_private.h", 
   "(struct serf_ssl_bucket_type_t): Add set_allowed_cert_validation_modes", 
   "function.", 
   "* buckets/openssl_buckets.c", 
   "(struct openssl_context_t): Add modes member variable.", 
   "(serf__openssl_client_cert_password_set,", 
   "serf__openssl_server_cert_callback_set,", 
   "serf__openssl_server_cert_chain_callback_set): Add 'application managed'", 
   "as allowed mode when the app sets one of the callbacks.", 
   "(ssl_init_context): Set the default mode to serf managed without UI.", 
   "(serf__openssl_set_allowed_cert_validation_modes): New function.", 
   "(serf_ssl_bucket_type_openssl): Add the new setter function.", 
   "* buckets/securetransport_buckets.c", 
   "(struct sectrans_context_t): Add modes member variable.", 
   "(sectrans_init_context): Set the default mode to serf managed without UI.", 
   "(validate_server_certificate): Only open the GUI panel when the application", 
   "allowed it. New error codes.", 
   "(ask_approval_gui): New error code in case the user clicked the Cancel", 
   "button.", 
   "(do_handshake): Improve comment.", 
   "(client_cert_password_set,", 
   "server_cert_callback_set,", 
   "server_cert_chain_callback_set): Add 'application managed' as allowed mode", 
   "when the app sets one of the callbacks.", 
   "(cert_subject): Cleanup dead code.", 
   "(cert_certificate): Cleanup whitespace.", 
   "(set_allowed_cert_validation_modes): New function.", 
   "(serf_ssl_bucket_type_securetransport): Add the new setter function.", 
   "* buckets/ssl_buckets.c", 
   "(serf_ssl_set_allowed_cert_validation_modes): New function, wrapper for", 
   "the specific implementations.", 
   "* serf.h", 
   "* context.c", 
   "(serf_error_string): New error codes."
  ], 
  "revision_id": "1699301"
 }, 
 {
  "author": "lgo", 
  "date": "2013-04-04T21:27:40.701004Z", 
  "msg": [
   "On the multiple_ssl_impls branch:", 
   "Continue with the server certificate evaluation and handling of failures. Add", 
   "the default Mac OS X GUI panel for the user to accept a certificate.", 
   "* buckets/securetransport_buckets.c", 
   "(struct sectrans_context_t): Add hostname variable.", 
   "(sectrans_read_cb): Logging and layout changes only.", 
   "(get_hostname): Remove, replaced by cached hostname.", 
   "(ask_approval_gui): Open a SFCertificateTrustPanel to ask the user for", 
   "approval of the certificate.", 
   "(validate_server_certificate): Remove code to get hostname and policy, the", 
   "trust object used in the first validation is directly available. Set", 
   "failure codes depending on the situation. Comment out the certificate", 
   "validation code for now.", 
   "(do_handshake): Minor improvements.", 
   "(set_hostname): Cache the hostname in the session object.", 
   "(serf_sectrans_encrypt_read): Group some logging lines.", 
   "* serf_bucket_types.h", 
   "(SERF_SSL_CERT_*): Add new codes + switch to hex encoding for bit flags.", 
   "* SConstruct:", 
   "add Security Interface framework and objc library for the Security Panel GUI."
  ], 
  "revision_id": "1699300"
 }, 
 {
  "author": "lgo", 
  "date": "2013-04-02T21:03:56.425580Z", 
  "msg": [
   "On the multiple_ssl_impls branch:", 
   "* buckets/securetransport_buckets.c", 
   "(use_compression): Implement, Secure Transport doesn't support any type of", 
   "SSL compression."
  ], 
  "revision_id": "1699299"
 }
]