[
 {
  "author": "gstein", 
  "date": "2004-09-20T12:08:29.871261Z", 
  "msg": [
   "fix guardian #define"
  ], 
  "revision_id": "1698518"
 }, 
 {
  "author": "gstein", 
  "date": "2004-09-17T13:50:08.370637Z", 
  "msg": [
   "* Makefile:", 
   "- add header dependencies for all files", 
   "- add EXTRA_INCLUDES to allow cmdline to add more paths"
  ], 
  "revision_id": "1698517"
 }, 
 {
  "author": "gstein", 
  "date": "2004-09-17T13:43:47.600831Z", 
  "msg": [
   "Added a new callback to construct connection-oriented buckets whenever a", 
   "connection is established. The callback wraps the apr_socket_t with the", 
   "appropriate bucket(s), which is then passed to the response acceptor.", 
   "Previously, the application had no idea when a connection (socket) may", 
   "have been closed and reopened. In some cases, it is perfectly fine, but", 
   "when using SSL or other connection-stateful buckets, that was a problem", 
   "waiting to happen. This gives us a control point to manage the life cycle", 
   "of these buckets.", 
   "* serf.h:", 
   "(serf_connection_setup_t): new callback datatype for setting up a new", 
   "connection. more precisely: for setting up buckets for reading", 
   "responses as they arrive.", 
   "(serf_response_acceptor_t): a bucket is now passed, rather than a raw", 
   "socket. this bucket was established by the setup callback.", 
   "(serf_connection_create): take a setup callback and baton now.", 
   "* context.c:", 
   "(serf_connection_t): store the connection-level bucket generated by the", 
   "setup callback. also store the setup callback/baton.", 
   "(read_from_connection): call the setup callback to initialize the", 
   "connection-level bucket (conn->stream). pass that stream to the", 
   "response acceptor rather than the raw socket.", 
   "(serf_connection_create): take a setup callback/baton and store them.", 
   "(serf_connection_close): per the docco, we are responsible for the", 
   "connection-level stream, so destroy the bucket(s).", 
   "* test/serf_get.c:", 
   "(accept_baton_t): renamed to ...", 
   "(app_baton_t): this. also dropped the 'bkt' member -- not needed.", 
   "(closed_connection): no longer destroy the connection-level bucket. the", 
   "connection itself owns that and will manage it. (we passed", 
   "responsibility for the bucket to serf in the setup callback)", 
   "(conn_setup): new callback to wrap bucket(s) around the raw socket", 
   "object at each connection-establishment point.", 
   "(accept_response): takes a bucket (built by the connection setup) rather", 
   "than a raw socket now. wraps it in a barrier and a response bucket and", 
   "returns it.", 
   "(main): rename the accept_ctx variable to app_ctx. for connection", 
   "creation, pass the new setup callback and the app context as the", 
   "baton. skip init of ctx.bkt; no longer there or needed."
  ], 
  "revision_id": "1698516"
 }, 
 {
  "author": "gstein", 
  "date": "2004-09-17T13:16:39.227357Z", 
  "msg": [
   "add TODO item about pool usage/investigation"
  ], 
  "revision_id": "1698515"
 }, 
 {
  "author": "gstein", 
  "date": "2004-09-17T09:15:22.125817Z", 
  "msg": [
   "Enable an optional username:password to be provide on the command line to", 
   "generate a Basic authentication header.", 
   "* test/serf_get.c:", 
   "(main): look for a third param, base64-encode it, and pass it in the", 
   "\"Authorization:\" header."
  ], 
  "revision_id": "1698514"
 }
]