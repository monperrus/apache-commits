[
 {
  "author": "jm", 
  "date": "2010-07-19T19:19:46.689679Z", 
  "msg": [
   "auto-generated test rules"
  ], 
  "revision_id": "965590"
 }, 
 {
  "author": "tabish", 
  "date": "2010-07-19T19:09:50.618434Z", 
  "msg": [
   "* Connection.cs:   Fix an error when running unit tests and the host env var is set to an IP address."
  ], 
  "revision_id": "965589"
 }, 
 {
  "author": "ehu", 
  "date": "2010-07-19T19:06:56.307170Z", 
  "msg": [
   "Update NODE_DATA properties when updating BASE/WORKING.", 
   "* subversion/libsvn_wc/wc-queries.sql", 
   "(STMT_UPDATE_NODE_DATA_BASE_PROPS,", 
   "STMT_UPDATE_NODE_DATA_WORKING_PROPS): New.", 
   "* subversion/libsvn_wc/wc_db.c", 
   "(svn_wc__db_temp_base_set_props,", 
   "svn_wc__db_temp_working_set_props): Execute the new queries."
  ], 
  "revision_id": "965588"
 }, 
 {
  "author": "jeastman", 
  "date": "2010-07-19T19:06:14.417467Z", 
  "msg": [
   "MAHOUT-294:", 
   "- added argMap local to AbstractJob to allow option accessing abstraction", 
   "- added hasOption(), getOption() and optionKey() to AbstractJob to encapsulate all -- prepending", 
   "- revised all clustering components to use hasOption()/getOption()", 
   "- added MahoutTestCase.optKey() to use optionKey() to encapsulate all -- prepending", 
   "- decided not to continue with public addOptions() approach in earlier patch", 
   "- removed all public OPTION_KEY constants in DefaultOptionsCreator but made", 
   "respective OPTION constants public", 
   "- revised all clustering tests to use optKey", 
   "- made interClusterDensity, intraClusterDensity and separation() public in CDbwEvaluator", 
   "- all unit tests run"
  ], 
  "revision_id": "965587"
 }, 
 {
  "author": "mikem", 
  "date": "2010-07-19T19:04:43.409087Z", 
  "msg": [
   "DERBY-4731", 
   "backport change #965351 from 10.6 to 10.3 branch.", 
   "Previous change did not completely solve the problem. There is a problem with", 
   "the initial fix, not sure why it only showed an error in the 10.3 backport.", 
   "The temporary tables are stored in the transaction context, so using a nested", 
   "transaction creates a new context and the work there is not reflected in the", 
   "parent context. Thus the previous fix which used a nested transaction does", 
   "not work.", 
   "This patch delays the work on the XA global temporary tables until after the xa transaction has committed but before control returns to the client executing", 
   "the commit. The delay solves the issue of attempting to do work in a", 
   "prepared transaction.", 
   "It drops all global temporary tables following an XA commit. This gives us", 
   "consistent behavior between embedded and network server implementations. At", 
   "the time of an xa end the system \"Ends the work performed on behalf of a transaction branch. The resource manager disassociates the XA resource from the transaction branch specified and lets the transaction complete.\" Given this", 
   "description of the behavior of XAResource it seems reasonable to document", 
   "that global temporary tables are not supported across the XA commit boundary.", 
   "In the worst case one might be connecting to an resource in completely another", 
   "database and the temp table implementation is tied to the transaction", 
   "context in a single connection to a existing server."
  ], 
  "revision_id": "965586"
 }
]