[
 {
  "author": "ehillenius", 
  "date": "2006-02-19T06:28:15.000000Z", 
  "msg": [
   "do NOT forget the not!"
  ], 
  "revision_id": "459445"
 }, 
 {
  "author": "ehillenius", 
  "date": "2006-02-19T06:26:46.000000Z", 
  "msg": [
   "the isInputNullable method was a good idea, but had to be implemented the other way around. Furthermore kept the enabled check. Got rid of the nested if in favor of better readable checks that just return."
  ], 
  "revision_id": "459444"
 }, 
 {
  "author": "ehillenius", 
  "date": "2006-02-19T05:58:38.000000Z", 
  "msg": [
   "isInputNullable was 'fixing' the wrong thing. The point was not whether components may have null inputs or not - as far as I am concerned, any component may receive null input at any time - but whether values came in at all. For example, TextField would never get an actual null *unless* it was rendered as a disabled field; it would be an empty string otherwise, which is therefore part of the required field check.", 
   "Follow ups (from wicket-user by me):", 
   "1. A potential, theoretic issue can be that isEnabled is based on an", 
   "algoritm in such a way that it was false during rendering, but true", 
   "now that the post back comes in. Or the other way around. But I think", 
   "that is too theoretical to worry about, and even if it would show up", 
   "sometime, somewhere for anyone, it would be easy to fix for that", 
   "custom situation.", 
   "2. another potential nastier problem is that you put in", 
   "disabled=\"disabled\" there yourself either directly or with an", 
   "attribute modifier. In that case, the old code makes sense, though it", 
   "is not very generic."
  ], 
  "revision_id": "459443"
 }, 
 {
  "author": "jcompagner", 
  "date": "2006-02-18T21:55:48.000000Z", 
  "msg": [
   "fixed test"
  ], 
  "revision_id": "459442"
 }, 
 {
  "author": "jdonnerstag", 
  "date": "2006-02-18T20:00:52.000000Z", 
  "msg": [
   "fixed a stack overflow exception with the regex to remove html comments"
  ], 
  "revision_id": "459441"
 }
]