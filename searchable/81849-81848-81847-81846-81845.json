[
 {
  "author": "rse", 
  "date": "1998-08-03T09:30:56.000000Z", 
  "msg": [
   "Fix the following warning because of a missing prototype:", 
   "rse@en1:/e/apache/SRC/apache-1.3/src/modules/proxy", 
   ":> make", 
   "gcc -c  -I../../os/unix -I../../include   -funsigned-char -DSTATUS -pipe -O", 
   "-Wall -Wshadow -Wpointer-arith -Wcast-align -Wmissing-prototypes", 
   "-Wmissing-declarations -Wnested-externs -Winline `../../apaci` mod_proxy.c", 
   "mod_proxy.c: In function `proxy_handler':", 
   "mod_proxy.c:305: warning: implicit declaration of function `ap_die'", 
   "rm -f libproxy.a", 
   "ar cr libproxy.a mod_proxy.o  proxy_cache.o proxy_connect.o proxy_ftp.o", 
   "proxy_http.o proxy_util.o", 
   "ranlib libproxy.a"
  ], 
  "revision_id": "81849"
 }, 
 {
  "author": "rse", 
  "date": "1998-08-03T09:15:33.000000Z", 
  "msg": [
   "Renamed __EMX__ (internal define of the gcc port under OS/2) to OS2", 
   "following the same idea as \"MSVC vs WIN32\". Additionally the src/os/emx/", 
   "directory was renamed to src/os/os2/ for consistency.", 
   "Background information:", 
   "1. The src/os/os2/ stuff was created by a repository copy", 
   "so we're both keep the history and sill be able", 
   "to checkout older Apache releases.", 
   "2. The __EMX__ check in ap_config.h was replaced by", 
   "a OS2 check while src/Configure now sets CFLAGS", 
   "to \"-DOS ..\". Same is done for the Unix platforms,", 
   "so make no difference here just for OS2.", 
   "3. The src/os/os2 is now also references from within", 
   "src/Configure to reflect the change.", 
   "Submitted by: Brian Havard", 
   "Reviewed by: Martin Kraemer, Ralf S. Engelschall", 
   "Finalized, cleaned up and applied by: Ralf S. Engelschall"
  ], 
  "revision_id": "81848"
 }, 
 {
  "author": "rse", 
  "date": "1998-08-03T08:44:10.000000Z", 
  "msg": [
   "Link DSO modules against possible libraries from $(LIBS) (take 2)", 
   "=================================================================", 
   "Currently we have the following entry in our dso.html document:", 
   "| Because DSO modules cannot be linked against other DSO-based libraries (ld", 
   "| -lfoo) on all platforms (for instance a.out-based platforms usually don't", 
   "| provide this functionality while ELF-based platforms do) you cannot use the", 
   "| DSO mechanism for all types of modules. Or in other words, modules compiled as", 
   "| DSO files are restricted to only use symbols from the Apache core, from the C", 
   "| library (libc) and all other dynamic or static libraries used by the Apache", 
   "| core, or from static library archives (libfoo.a) containing position", 
   "| independend code. The only chance to use other code is to either make sure the", 
   "| Apache core itself already contains a reference to it or loading the code", 
   "| yourself via dlopen().", 
   "The important part here is: \"cannot be linked .... on all platforms\".  But", 
   "there _are_ platform (especially ELF-based ones) which support linking DSO", 
   "files agains other DSO files.  And even on platforms where this is not", 
   "possible is it possible to at least link against libraries assuming they", 
   "contain PIC code.", 
   "So, the idea is this: In the configuration process we already determine the", 
   "variable LDFLAGS and LIBS. They hold -L and -l options for linking", 
   "executables.  We parse these options and separate them into three classes:", 
   "OBJ, PIC and DSO.  And then we re-assemble a LIBS_SHLIB variable from only the", 
   "options in classes PIC and DSO. This variable is then used on the build", 
   "command for mod_xxx.so.", 
   "Example:", 
   "| $ ./configure --prefix=/tmp/apache \\", 
   "|               --enable-module=auth_db \\", 
   "|               --enable-shared=auth_db \\", 
   "|               --enable-rule=SHARED_CHAIN", 
   "Without SHARED_CORE the mod_auth_db.so cannot be linked or at least not loaded", 
   "correctly under run-time. With SHARED_CHAIN enabled it is linked against the", 
   "libdb.so and all is fine (at least under this ELF-based Debian box I tried):", 
   "| :> make mod_auth_db.so", 
   "| gcc -c  -I../../os/unix -I../../include -I/usr/include/  -DLINUX=2", 
   "| -DUSE_HSREGEX `../../apaci` -fpic -DSHARED_MODULE mod_auth_db.c && mv", 
   "| mod_auth_db.o mod_auth_db.lo", 
   "| ld -Bshareable -o mod_auth_db.so mod_auth_db.lo -lm -ldb", 
   "| root@gw1:/e/apache/SRC/WORK/apache-1.3-libsshlib/src/modules/standard", 
   "| :> ldd mod_auth_db.so", 
   "|         ./mod_auth_db.so => ./mod_auth_db.so", 
   "|         libc.so.5 => /lib/libc.so.5", 
   "|         libm.so.5 => /lib/libm.so.5", 
   "|         libdb.so.1 => /usr/lib/libdb.so.1", 
   "This way we provide the maximum we can provide. Sure, on some platforms the", 
   "user still has no chance. But this shouldn't mean he becomes no chance on", 
   "other platforms where there _is_ a chance. So this patch is a first step for", 
   "more friendly and flexible DSO support.", 
   "The complete mechanism is triggered by a new Rule named SHARED_CHAIN. To avoid", 
   "problems this is DISABLED(!) for ALL(!) platforms currently. But when", 
   "experience shows that it worked fine for users we can enable it for tested", 
   "platforms per default."
  ], 
  "revision_id": "81847"
 }, 
 {
  "author": "rse", 
  "date": "1998-08-03T08:44:10.000000Z", 
  "msg": [
   "Link DSO modules against possible libraries from $(LIBS) (take 2)", 
   "=================================================================", 
   "Currently we have the following entry in our dso.html document:", 
   "| Because DSO modules cannot be linked against other DSO-based libraries (ld", 
   "| -lfoo) on all platforms (for instance a.out-based platforms usually don't", 
   "| provide this functionality while ELF-based platforms do) you cannot use the", 
   "| DSO mechanism for all types of modules. Or in other words, modules compiled as", 
   "| DSO files are restricted to only use symbols from the Apache core, from the C", 
   "| library (libc) and all other dynamic or static libraries used by the Apache", 
   "| core, or from static library archives (libfoo.a) containing position", 
   "| independend code. The only chance to use other code is to either make sure the", 
   "| Apache core itself already contains a reference to it or loading the code", 
   "| yourself via dlopen().", 
   "The important part here is: \"cannot be linked .... on all platforms\".  But", 
   "there _are_ platform (especially ELF-based ones) which support linking DSO", 
   "files agains other DSO files.  And even on platforms where this is not", 
   "possible is it possible to at least link against libraries assuming they", 
   "contain PIC code.", 
   "So, the idea is this: In the configuration process we already determine the", 
   "variable LDFLAGS and LIBS. They hold -L and -l options for linking", 
   "executables.  We parse these options and separate them into three classes:", 
   "OBJ, PIC and DSO.  And then we re-assemble a LIBS_SHLIB variable from only the", 
   "options in classes PIC and DSO. This variable is then used on the build", 
   "command for mod_xxx.so.", 
   "Example:", 
   "| $ ./configure --prefix=/tmp/apache \\", 
   "|               --enable-module=auth_db \\", 
   "|               --enable-shared=auth_db \\", 
   "|               --enable-rule=SHARED_CHAIN", 
   "Without SHARED_CORE the mod_auth_db.so cannot be linked or at least not loaded", 
   "correctly under run-time. With SHARED_CHAIN enabled it is linked against the", 
   "libdb.so and all is fine (at least under this ELF-based Debian box I tried):", 
   "| :> make mod_auth_db.so", 
   "| gcc -c  -I../../os/unix -I../../include -I/usr/include/  -DLINUX=2", 
   "| -DUSE_HSREGEX `../../apaci` -fpic -DSHARED_MODULE mod_auth_db.c && mv", 
   "| mod_auth_db.o mod_auth_db.lo", 
   "| ld -Bshareable -o mod_auth_db.so mod_auth_db.lo -lm -ldb", 
   "| root@gw1:/e/apache/SRC/WORK/apache-1.3-libsshlib/src/modules/standard", 
   "| :> ldd mod_auth_db.so", 
   "|         ./mod_auth_db.so => ./mod_auth_db.so", 
   "|         libc.so.5 => /lib/libc.so.5", 
   "|         libm.so.5 => /lib/libm.so.5", 
   "|         libdb.so.1 => /usr/lib/libdb.so.1", 
   "This way we provide the maximum we can provide. Sure, on some platforms the", 
   "user still has no chance. But this shouldn't mean he becomes no chance on", 
   "other platforms where there _is_ a chance. So this patch is a first step for", 
   "more friendly and flexible DSO support.", 
   "The complete mechanism is triggered by a new Rule named SHARED_CHAIN. To avoid", 
   "problems this is DISABLED(!) for ALL(!) platforms currently. But when", 
   "experience shows that it worked fine for users we can enable it for tested", 
   "platforms per default."
  ], 
  "revision_id": "81846"
 }, 
 {
  "author": "rse", 
  "date": "1998-08-03T08:15:38.000000Z", 
  "msg": [
   "The heaven is gray these days in Munich, Germany."
  ], 
  "revision_id": "81845"
 }
]