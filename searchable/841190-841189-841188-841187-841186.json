[
 {
  "author": "kfogel", 
  "date": "2002-01-30T22:42:36.881557Z", 
  "msg": [
   "Do all string --> revnum conversions with a macro, instead of writing", 
   "out a casted atol call.  This is counterpart to revision 1109; Greg", 
   "Stein saw 1109 and pointed out the desirability of having a single", 
   "conversion routine.", 
   "* subversion/include/svn_types.h (SVN_STR_TO_REV): New macro.", 
   "* everywhere else: Use it."
  ], 
  "revision_id": "841190"
 }, 
 {
  "author": "cmpilato", 
  "date": "2002-01-30T21:54:31.626804Z", 
  "msg": [
   "* clients/cmdline", 
   "Now ignoring local_tmp.", 
   "* libsvn_wc", 
   "Now ignoring *.src and *.dst."
  ], 
  "revision_id": "841189"
 }, 
 {
  "author": "gstein", 
  "date": "2002-01-30T21:20:05.270948Z", 
  "msg": [
   "Kill that damned feedback table. It was just a fancy global variable,", 
   "implemented (in Ben's words) as a \"fancy hack.\"", 
   "[ when considering layering: this meant that SVN semantics were very", 
   "much hard-coded into libsvn_subr. ooky... ]", 
   "Added a standard notification function type (svn_wc_notify_func_t) and", 
   "pattern for calling it. From the point where we used and called", 
   "feedback functions, I replaced them with notifications (for each", 
   "specific purpose) and then bubbled the function/baton up through the", 
   "interface layers.", 
   "At the cmdline client, I renamed the feedback functions in feedback.c", 
   "to module-local functions to enable their use within the client. With", 
   "a handy macro to test for the \"-q\" flag (opt_state.quiet), we pass the", 
   "appropriate notification function into the libsvn_client APIs.", 
   "* include/svn_wc.h (svn_wc_notify_func_t): new function type for", 
   "notification callbacks. It takes a baton and the path of the", 
   "affected item.", 
   "(svn_wc_copy, svn_wc_delete, svn_wc_add, svn_wc_crawl_revisions,", 
   "svn_wc_revert): add parameters for a notify_FOO callback", 
   "function and its associated notify_baton baton. added appropriate", 
   "documentation for each function.", 
   "* include/svn_client.h: shift the #ifdef __cplusplus stuff to the", 
   "right place.", 
   "(svn_client_update, svn_client_switch, svn_client_add,", 
   "svn_client_mkdir, svn_client_delete, svn_client_revert,", 
   "svn_client_copy, svn_client_move): add parameters for a", 
   "notify_FOO callback function and its associated baton. added", 
   "appropriate documentation for each function. svn_client_move", 
   "actually takes two pairs of functions/batons.", 
   "* include/svn_pools.h: update documentation to remove discussion of", 
   "the feedback vtable.", 
   "(struct svn_pool_feedback_t): removed", 
   "(svn_pool_get_feedback_vtable): removed", 
   "* libsvn_wc/copy.c (copy_file_administratively,", 
   "copy_dir_administratively, svn_wc_copy): pass notify functions", 
   "and batons as appropriate.", 
   "* libsvn_wc/adm_crawler.c (report_revisions): remove usage of feedback", 
   "table, invoking NOTIFY_RESTORE instead. take notify func/baton and", 
   "pass it to self in the recursion.", 
   "(svn_wc_crawl_revisions): take notify func/baton. pass to", 
   "report_revisions. use func/baton rather than the feedback table to", 
   "notify about restorations.", 
   "* libsvn_wc/adm_ops.c (mark_tree): take a delete notify", 
   "func/baton. pass it during recursion. use it to notify about", 
   "deletes, rather than the feedback table.", 
   "(svn_wc_delete): take notify func/baton. pass to mark_tree(). use", 
   "instead of feedback table.", 
   "(svn_wc_add): take notify func/baton. pass NULLs to mark_tree since", 
   "we aren't deleting. use func/baton to notify about the add.", 
   "(svn_wc_revert): pass func/baton. use it rather than the feedback", 
   "table. pass to self when recursion occurs.", 
   "* libsvn_subr/svn_error.c (SVN_ERROR_FEEDBACK_VTABLE): removed.", 
   "(report_unversioned_item, report_added_item, report_deleted_item,", 
   "report_warning, report_progress, report_reversion,", 
   "report_restoration, svn_pool_get_feedback_vtable): removed.", 
   "(svn_error_init_pool): don't worry about the vtable any more.", 
   "(svn_pool_create): don't propagate the vtable.", 
   "(svn_pool_clear): no need to worry about the vtable. update comments", 
   "appropriately.", 
   "* libsvn_client/switch.c (svn_client_switch): take notification func", 
   "and baton. pass to svn_wc_crawl_revisions().", 
   "* libsvn_client/delete.c (svn_client_delete): take notification func", 
   "and baton. pass to svn_wc_delete().", 
   "* libsvn_client/revert.c (svn_client_revert): take notification func", 
   "and baton. pass to svn_wc_revert().", 
   "* libsvn_client/diff.c (svn_client_diff): update call to", 
   "svn_wc_crawl_revisions() to pass NULL for the notification stuff.", 
   "* libsvn_client/copy.c (wc_to_wc_copy): take add/delete notification", 
   "funcs and batons. pass, as appropriate, to svn_wc_copy() and", 
   "svn_wc_delete().", 
   "(repos_to_wc_copy): take a notification func/baton and pass to", 
   "svn_wc_add().", 
   "(setup_copy): take two sets of notification func/batons and pass", 
   "along as appropriate.", 
   "(svn_client_copy): take notification func/baton, and pass along", 
   "(svn_client_move): take notification funcs/batons, and pass along", 
   "* libsvn_client/update.c (svn_client_update): take restoration", 
   "notification func/baton, pass to svn_wc_crawl_revisions()", 
   "* libsvn_client/status.c (add_update_info_to_status_hash): pass NULL", 
   "pointers for the func/baton to svn_wc_crawl_revisions().", 
   "* libsvn_client/add.c (add_dir_recursive): take notification func and", 
   "baton for recursion and passing to svn_wc_add().", 
   "(svn_client_add): take notification func/baton and pass to", 
   "svn_wc_add or add_dir_recursive, as appropriate.", 
   "(svn_client_mkdir): take notification func/baton for svn_wc_add()", 
   "* bindings/ruby/wc.c (wc_revert): pass NULLs to svn_wc_revert()", 
   "* bindings/ruby/client.c (cl_update): pass NULLs to", 
   "svn_client_update().", 
   "(cl_add): pass NULLs to svn_client_add().", 
   "(cl_mkdir): pass NULLs to svn_client_mkdir().", 
   "(cl_delete): pass NULLs to svn_client_delete().", 
   "(cl_revert): pass NULLs to svn_client_revert().", 
   "(cl_copy): pass NULLs to svn_client_copy().", 
   "* clients/cmdline/cl.h (svn_cl__init_feedback_vtable): removed.", 
   "(svn_cl__notify_unversioned_item, svn_cl__notify_added_item,", 
   "svn_cl__notify_deleted_item, svn_cl__notify_restored_item,", 
   "svn_cl__notify_reverted_item): new declarations.", 
   "(SVN_CL_NOTIFY): new macro for selecting proper notify func value.", 
   "* clients/cmdline/move-cmd.c (svn_cl__move): use SVN_CL_NOTIFY() to", 
   "pass notify funcs, and pass batons to svn_client_move().", 
   "* clients/cmdline/mkdir-cmd.c (svn_cl__mkdir): pass notify func and", 
   "baton to svn_client_mkdir().", 
   "* clients/cmdline/revert-cmd.c (svn_cl__revert): pass notify func and", 
   "baton to svn_client_revert().", 
   "* clients/cmdline/copy-cmd.c (svn_cl__copy): pass notify func and", 
   "baton to svn_client_copy().", 
   "* clients/cmdline/update-cmd.c (svn_cl__update): pass notify func and", 
   "baton to svn_client_update().", 
   "* clients/cmdline/add-cmd.c (svn_cl__add): pass notify func and", 
   "baton to svn_client_add().", 
   "* clients/cmdline/switch-cmd.c (svn_cl__switch): pass notify func and", 
   "baton to svn_client_switch().", 
   "* clients/cmdline/delete-cmd.c (svn_cl__delete): pass notify func and", 
   "baton to svn_client_delete().", 
   "* clients/cmdline/main.c (main): remove call to", 
   "svn_cl__init_feedback_vtable().", 
   "* clients/cmdline/feedback.c (svn_cl__notify_unversioned_item):", 
   "renamed from report_unversioned_item, and new signature used.", 
   "(svn_cl__notify_added_item): renamed from report_added_item, and new", 
   "signature used.", 
   "(svn_cl__notify_deleted_item): renamed from report_deleted_item, and", 
   "new signature used.", 
   "(svn_cl__notify_restored_item): renamed from report_restoration, and", 
   "new signature used.", 
   "(svn_cl__notify_reverted_item): renamed from report_reversion, and", 
   "new signature used.", 
   "(report_warning): removed. never used.", 
   "(report_progress): removed. never used.", 
   "(svn_cl__init_feedback_vtable): removed."
  ], 
  "revision_id": "841188"
 }, 
 {
  "author": "sussman", 
  "date": "2002-01-30T18:55:11.762093Z", 
  "msg": [
   "I believe 'svn switch' now works in ra_local;  fixed the anchor/target", 
   "issues.  I need to play around some more.", 
   "* switch-cmd.c (svn_cl__switch): call svn_wc_get_actual_target, and", 
   "use results to get a properly anchored 'trace' editor.  duh.", 
   "* svn_ra.h, ra_plugin.c (do_switch): take new boolean flag; use the", 
   "flag to make sure the pipe editor is anchored in exactly the same", 
   "way that the update editor is anchored.  It's tricky, because in", 
   "\"normal\" updates, both editors are anchored based on the fs_path", 
   "within the RA session;  but now we have a case where each editor", 
   "needs to be anchored off of -different- URLs.", 
   "* switch.c (svn_client_switch): if the wc path was split into an", 
   "anchor/target, let do_switch() know about it via the flag."
  ], 
  "revision_id": "841187"
 }, 
 {
  "author": "cmpilato", 
  "date": "2002-01-30T17:24:57.755887Z", 
  "msg": [
   "This commit is a no-op.", 
   "It was originally a directory propset, but that failed (bug) and the", 
   "new revision contained no changes."
  ], 
  "revision_id": "841186"
 }
]