[
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T02:20:26.076548Z", 
  "msg": [
   "Removing DynamicByteBloomFilter. This should have been part of D251932.", 
   "Summary:", 
   "See D251932 for details. DynamicByteBloomFilter is being removed as", 
   "part of HFile format v2 changes, as we are transitioning to compound", 
   "Bloom filters. Committing this without a separate Differential", 
   "revision and review, because this was already reviewed as part of", 
   "D251932.", 
   "Test Plan: Unit tests, dark launch.", 
   "Reviewed By: nspiegelberg", 
   "Reviewers: nspiegelberg, kannan, kranganathan, gqchen, jgray, aaiyer", 
   "Revert plan:", 
   "OK", 
   "Commenters: jgray", 
   "CC: hbase-hdfs@lists, , mbautin, jgray, nspiegelberg,", 
   "Revert Plan:", 
   "HFile format version 2 introduces backwards-compatible but", 
   "non-reverse-compatible changes."
  ], 
  "revision_id": "1181560"
 }, 
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T02:20:18.107662Z", 
  "msg": [
   "Unit test changes, HFile reader/writer API call changes, and utility functions for HFile format version 2", 
   "Summary:", 
   "This is the sixth diff for the HFile version 2 / compound Bloom filters /", 
   "multi-level block indexes project. It bundles the following types of changes:", 
   "- API calls to create HFile readers/writes now have to go through the", 
   "appropriate factory methods.", 
   "- Unit test changes to enable testing both HFile format version 1 and 2. The", 
   "set of tests to be made parameterized was selected in an ad-hoc way during", 
   "development. Certain unit tests had to be converted to JUnit 4, but still extend", 
   "HBaseTestCase, to minimize code changes. Now that the default HFile format for", 
   "this feature has been flipped to version 2, we might be able to avoid a lot of", 
   "these unit test changes by running two rounds of test with the default HFile", 
   "format version specified through e.g. a system property. Also,", 
   "testHeapSizeForBlockIndex was moved from TestHFile to block index's own unit", 
   "test, TestHFileBlockIndex.", 
   "- New utility functions required for other parts of HFile v2 functionality", 
   "(e.g. changes to Bytes and TestBytes).", 
   "- A fix for a typo in Hash.java javadoc.", 
   "Test Plan:", 
   "Unit tests. Load testing with HBase test. Will push to dark launch along with", 
   "other HFile format v2 changes.", 
   "Reviewed By: nspiegelberg", 
   "Reviewers: kannan, liyintang, nspiegelberg, kranganathan, gqchen, aaiyer", 
   "CC: hbase@lists, , mbautin, nspiegelberg", 
   "Revert Plan:", 
   "HFile format v2 changes are backwards-compatible but not reverse-compatible.", 
   "Differential Revision: 252110"
  ], 
  "revision_id": "1181559"
 }, 
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T02:20:06.137323Z", 
  "msg": [
   "\"IdLock\" synchronization primitive that will be used to synchronize on block offsets in HFileReaderV2", 
   "Summary:", 
   "HFile block read operations are currently synchronized on the block index key", 
   "object for the particular block. This is done so that only one client goes to", 
   "HDFS to read the block and caches it, and all other clients interested in the", 
   "block pick it up from the cache. However, with HFile format v2, the data block", 
   "index might be multi-level, so there is not a canonical object to use for", 
   "synchronizing clients. The IdLock synchronization primitive allows to", 
   "synchronize on arbitrary long numbers, creating temporary objects for them as", 
   "necessary.", 
   "Test Plan:", 
   "New unit test. Load testing as part of HFile format v2 testing.", 
   "Reviewed By: kannan", 
   "Reviewers: kannan, kranganathan, liyintang", 
   "Commenters: nspiegelberg, jgray", 
   "CC: , hbase@lists, kannan, nspiegelberg, jgray", 
   "Revert Plan:", 
   "OK", 
   "Differential Revision: 248448"
  ], 
  "revision_id": "1181558"
 }, 
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T02:19:54.605925Z", 
  "msg": [
   "Compound Bloom filters", 
   "Summary:", 
   "This is a port of D237675 to be consistent with other HFile format version 2", 
   "changes. Instead of breaking an existing ByteBloomFilter's bit array into", 
   "blocks, we accumulate keys into a Bloom filter chunk as an HFile is being", 
   "written, and flush this Bloom filter to disk as soon as a fixed number of keys", 
   "is reached. At read time, the appropriate Bloom filter block is determined using", 
   "binary search on the key, loaded, cached, and queried.", 
   "New configuration options:", 
   "io.storefile.bloom.compound - a boolean option specifying whether compound", 
   "Bloom filters are turned on", 
   "io.storefile.bloom.block.size - the target size of a single Bloom filter chunk", 
   "(only takes effect when io.storefile.bloom.compound=true)", 
   "io.storefile.bloom.cacheonwrite - allows to enable cache-on-write for Bloom", 
   "chunks", 
   "The TestCompoundBloomFilter unit test validates the false positive rate to", 
   "ensure it closely matches what is expected. Compound Bloom filters do not rely", 
   "on an estimate of how many keys will be added to the Bloom filter, so they can", 
   "hit the target false positive rate much more precisely. There are still reasons", 
   "for the discrepancy between the theoretical and observed false positive rate,", 
   "and they are controlled for in the unit test:", 
   "- Previously, the number of bits in the Bloom was computed as if the number of", 
   "hash functions could be an arbitrary number, while it must be an integer. In", 
   "this implementation, the number of bits is adjusted to ensure the given target", 
   "error rate as soon as the precise (rounded) number of hash functions is known.", 
   "- The last chunk of a compound Bloom filter may be undersized, even if it", 
   "undergoes folding, so the observed error rate may be lower than expected.", 
   "Therefore, the last chunk of a multi-chunk compound Bloom filter is excluded", 
   "when checking the lower bound of the false positive rate.", 
   "- We use combinatorial hashing, which gives a slightly higher false positive", 
   "rate than a set of truly independent hash functions (thanks to Nicolas for", 
   "pointing this out). However, we can test the false positive rate as though we", 
   "had independent hash functions, by looking up random bits instead of the bits", 
   "the hash functions point to. This technique is referred to as \"fake lookups\" in", 
   "the code and is obviously only valid for the unit test. That said, it does yield", 
   "the false positive rate that is closer to the expectation than that of our", 
   "production Bloom filters.", 
   "While most of the Bloom filter logic is kept out of HFile, there is only one", 
   "version of StoreFile (i.e. there is no hierarchy of StoreFile implementations", 
   "similar to that introduced for StoreFile in D251875). Therefore, HFile needs to", 
   "know where to store Bloom filter metadata, even though it does not need to know", 
   "anything about how that metadata is structured. In version 2, we store Bloom", 
   "filter metadata as part of the \"load-on-open\" section of the HFile.", 
   "Finally, Bloom filter code has been split into a writer interface and Bloom", 
   "filter itself (which one might call reader) to avoid keeping around fields and", 
   "code that is only used when writing at read time. Note", 
   "that CompoundBloomFilterWriter implements InlineBlockWriter, an interface", 
   "introduced in D250060 for writing \"inline\" blocks into the data section of a", 
   "version 2 HFile.", 
   "Test Plan:", 
   "Unit tests. Load test (HBaseTest).", 
   "Still need to improve HBaseTest to allow testing ROWCOL Bloom filters.", 
   "Reviewed By: nspiegelberg", 
   "Reviewers: nspiegelberg, kannan, kranganathan, gqchen, jgray, aaiyer", 
   "Commenters: jgray", 
   "CC: hbase-hdfs@lists, , mbautin, jgray, nspiegelberg, kenny", 
   "Revert Plan:", 
   "HFile format version 2 introduces backwards-compatible but", 
   "non-reverse-compatible changes.", 
   "Differential Revision: 251932"
  ], 
  "revision_id": "1181557"
 }, 
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T02:19:47.461899Z", 
  "msg": [
   "Multi-level block index", 
   "Summary:", 
   "This is a version of Liyin's original implementation of multi-level block", 
   "indexes with a significant amount of refactoring, documentation, and bug fixes", 
   "to the point that it can run smoothly in HBaseTest for at least a few days. I", 
   "also added a unit test, which currently only tests one- and two-level block", 
   "indexes. There is a discussion of multi-level block indexes at", 
   "https://issues.apache.org/jira/browse/HBASE-3857, and the relevant JIRA these", 
   "changes will be part of is https://issues.apache.org/jira/browse/HBASE-3856.", 
   "Test Plan:", 
   "Unit tests. Load test (HBaseTest). Dark launch.", 
   "Reviewed By: kannan", 
   "Reviewers: liyintang, kranganathan, kannan, nspiegelberg, gqchen, aaiyer", 
   "Commenters: jgray, liyintang", 
   "CC: hbase@lists, , mbautin, jgray, kenny, liyintang, kannan", 
   "Revert Plan:", 
   "The new block index implementation is capable of reading version 1 HFile block", 
   "indexes and does that as part of HFile reader v1 in D251875. Howver, multi-level", 
   "block indexes introduce non-reverse-compatible changes to the block index", 
   "format.", 
   "Differential Revision: 251949"
  ], 
  "revision_id": "1181556"
 }
]