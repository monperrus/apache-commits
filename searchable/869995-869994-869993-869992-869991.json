[
 {
  "author": "cmpilato", 
  "date": "2008-03-14T20:48:15.833773Z", 
  "msg": [
   "Recommend r29920 for backport."
  ], 
  "revision_id": "869995"
 }, 
 {
  "author": "cmpilato", 
  "date": "2008-03-14T20:47:04.811377Z", 
  "msg": [
   "Implement the same workaround in ra_neon that ra_serf uses to deal", 
   "with the fact that some mod_dav_svn servers, when using a skelta-style", 
   "update REPORT response, don't inform the client that his lock tokens", 
   "are stale.", 
   "This fixes issue #3120.", 
   "* subversion/libsvn_ra_neon/fetch.c", 
   "(report_baton_t): Add 'lock_tokens' hash.", 
   "(add_node_props): Implement a lock-token-staleness check workaround", 
   "similar to what libsvn_ra_serf/update.c:check_lock() does.", 
   "(reporter_set_path, reporter_link_path): Store lock tokens in the", 
   "report baton's 'lock_tokens' hash.", 
   "(make_reporter): Initialize the report baton's 'lock_tokens' hash.", 
   "* subversion/libsvn_ra_neon/lock.c", 
   "(svn_ra_neon__get_lock_internal): New, forged from the guts of", 
   "svn_ra_neon__get_lock().  Accepts a private session baton instead", 
   "of a public Subversion RA session baton.", 
   "(svn_ra_neon__get_lock): Now just wraps svn_ra_neon__get_lock_internal().", 
   "* subversion/libsvn_ra_neon/ra_neon.h", 
   "(svn_ra_neon__get_lock_internal): New."
  ], 
  "revision_id": "869994"
 }, 
 {
  "author": "glasser", 
  "date": "2008-03-14T20:40:11.481042Z", 
  "msg": [
   "On the in-memory-cache branch:", 
   "Hoist the caches of immutable (revision file) data from the individual", 
   "svn_fs_t to a structure shared between all svn_fs_t's for the same", 
   "filesystem in the process (and stored in the userdata of the common", 
   "pool).", 
   "One downside to this: the caches live as long as the server does, so a", 
   "single server process that serves a large number of repositories", 
   "infrequently may use more memory than necessary.", 
   "This uses a combination of UUID and path to index into the userdata.", 
   "This implies that if a repository administrator changes a repository", 
   "(say, does a dump/delete/create/load on it) *and* keeps it in the same", 
   "place *and* doesn't change the UUID *and* keeps a server process", 
   "running the whole time, then queries to the cache might return", 
   "incorrect values.  I think you just shouldn't do that: turn off your", 
   "servers if you're going to mess with history!  (A few of our tests do", 
   "do this by accident; I made them use new UUIDs instead.)", 
   "Note also that DAG nodes contain an FS pointer, so in order to share a", 
   "cache of them between multiple svn_fs_t's, we NULL out the pointer", 
   "when copying in and out of the cache, and replace it with whatever fs", 
   "we're currently using.", 
   "* subversion/libsvn_fs_fs/fs.h", 
   "(struct fs_fs_shared_caches_t): New.  Add a big comment explaining", 
   "why we need two different shared structures.", 
   "(struct fs_fs_data_t): Replace three caches with shared_cache", 
   "member.", 
   "* subversion/libsvn_fs_fs/fs.c", 
   "(SVN_FSFS_SHARED_USERDATA_PREFIX): Add 'data-'.", 
   "(SVN_FSFS_SHARED_CACHES_USERDATA_PREFIX): New.", 
   "(dup_ids, dup_dir_listing): Move declarations higher.", 
   "(fs_serialized_init): Initialize shared_caches structure.", 
   "(initialize_fs_struct): No need to initialize caches here.", 
   "* subversion/libsvn_fs_fs/fs_fs.c", 
   "(svn_fs_fs__rev_get_root, svn_fs_fs__rep_contents_dir): Look for", 
   "caches in shared_caches.", 
   "* subversion/libsvn_fs_fs/tree.c", 
   "(locate_cache): Look for cache in shared_caches.", 
   "(dag_node_cache_get): Fill in FS field on DAG node.", 
   "* subversion/libsvn_fs_fs/dag.c", 
   "* subversion/libsvn_fs_fs/dag.h", 
   "(svn_fs_fs__dag_dup_for_cache): NULL FS field.", 
   "(svn_fs_fs__dag_set_fs): New.", 
   "* subversion/bindings/swig/python/tests/mergeinfo.py", 
   "(SubversionMergeinfoTestCase.setUp): Keep the autogenerated UUID.", 
   "* subversion/bindings/swig/python/tests/trac/versioncontrol/tests/svn_fs.py", 
   "(SubversionRepositoryTestSetup.setUp): Keep the autogenerated UUID.", 
   "* subversion/tests/cmdline/svndumpfilter_tests.py", 
   "(reflect_dropped_renumbered_revs): Keep the autogenerated UUID.", 
   "* subversion/tests/cmdline/svnserveautocheck.sh", 
   "Accidental commit: run svnserve in threaded mode.", 
   "Suggested by: malcolm"
  ], 
  "revision_id": "869993"
 }, 
 {
  "author": "kfogel", 
  "date": "2008-03-14T19:55:11.181399Z", 
  "msg": [
   "* www/merge-tracking/index.html", 
   "(internal): Mention what happened to SQLite."
  ], 
  "revision_id": "869992"
 }, 
 {
  "author": "julianfoad", 
  "date": "2008-03-14T18:06:56.916792Z", 
  "msg": [
   "* COMMITTERS: Update my email address."
  ], 
  "revision_id": "869991"
 }
]