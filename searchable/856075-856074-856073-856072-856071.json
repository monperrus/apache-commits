[
 {
  "author": "jlvarner", 
  "date": "2005-08-30T18:44:52.447944Z", 
  "msg": [
   "* www/project_links.html", 
   "(Sites that Offer Subversion Hosting):", 
   "Add SourceHosting.Net entry", 
   "Patch By: Greg Larkin <glarkin@sourcehosting.net>"
  ], 
  "revision_id": "856075"
 }, 
 {
  "author": "danderson", 
  "date": "2005-08-30T18:05:27.774922Z", 
  "msg": [
   "Fix a memory management bug in the RA compatibility layer which", 
   "triggered random callback table corruption when the legacy API is", 
   "used.", 
   "* subversion/libsvn_ra/wrapper_template.h", 
   "(compat_open): Allocate *callbacks2 in pool instead of defining a", 
   "local callbacks2 structure."
  ], 
  "revision_id": "856074"
 }, 
 {
  "author": "kou", 
  "date": "2005-08-30T17:20:10.330641Z", 
  "msg": [
   "Remove garbages. Followup to r15998.", 
   "* subversion/bindings/swig/ruby/svn/delta.rb: Remove my memo.", 
   "* subversion/bindings/swig/ruby/test/test_fs.rb", 
   "(SvnFsTest#test_id, SvnFsTest#test_transaction): Remove unused", 
   "test."
  ], 
  "revision_id": "856073"
 }, 
 {
  "author": "kou", 
  "date": "2005-08-30T17:13:53.789664Z", 
  "msg": [
   "Fully implement the Ruby bindings but there aren't enough tests.", 
   "* subversion/bindings/swig/INSTALL", 
   "(STATUS OF THE SWIG BINDINGS): Update the Ruby bindings status.", 
   "* subversion/bindings/swig/svn_delta.i", 
   "(%typemap(ruby, in)", 
   "(svn_txdelta_window_handler_t handler, void *handler_baton),", 
   "%typemap(ruby, in) apr_array_header_t *paths,", 
   "%typemap(ruby, in)", 
   "(svn_delta_path_driver_cb_func_t callback_func,", 
   "void *callback_baton)): New typemap.", 
   "(svn_txdelta_to_svndiff_handler,", 
   "svn_txdelta_invoke_handler): New function.", 
   "* subversion/bindings/swig/svn_wc.i", 
   "(%apply apr_hash_t **PROPHASH): Add 'apr_hash_t **original_props'.", 
   "(%apply apr_array_header_t **OUTPUT_OF_PROP,", 
   "%apply apr_hash_t *PROPHASH): New apply.", 
   "(%typemap(ruby, in, numinputs=0) apr_hash_t **entries,", 
   "%typemap(ruby, argout, fragment=\"output_helper\")", 
   "apr_hash_t **entries,", 
   "%typemap(ruby, in, numinputs=0)", 
   "apr_array_header_t **externals_p (apr_array_header_t *temp),", 
   "%typemap(ruby, argout, fragment=\"output_helper\")", 
   "apr_array_header_t **externals_p", 
   "%typemap(ruby, in) apr_array_header_t *wcprop_changes,", 
   "%typemap(ruby, in) apr_array_header_t *propchanges,", 
   "%typemap(ruby, in)", 
   "(svn_wc_notify_func2_t notify_func2, void *notify_baton2),", 
   "%typemap(ruby, in)", 
   "(svn_wc_status_func2_t status_func, void *status_baton),", 
   "%typemap(ruby, in)", 
   "(const svn_wc_diff_callbacks2_t *callbacks, void *callback_baton)):", 
   "New typemap.", 
   "* subversion/bindings/swig/svn_repos.i", 
   "(%typemap(ruby, in)", 
   "(svn_repos_history_func_t history_func, void *history_baton),", 
   "%typemap(ruby, in)", 
   "(svn_repos_file_rev_handler_t handler, void *handler_baton),", 
   "%typemap(ruby, in)", 
   "(svn_repos_authz_func_t authz_read_func, void *authz_read_baton),", 
   "%typemap(ruby, in)", 
   "(svn_repos_authz_callback_t authz_callback, void *authz_baton),", 
   "%typemap(ruby, in, numinputs=0) apr_hash_t **table_p,", 
   "%typemap(ruby, argout, fragment=\"output_helper\")", 
   "apr_hash_t **dirents): New typemap.", 
   "* subversion/bindings/swig/svn_fs.i", 
   "(%typemap(ruby, in, numinputs=0) apr_hash_t **changed_paths_p,", 
   "%typemap(ruby, argout) apr_hash_t **changed_paths_p,", 
   "%typemap(ruby, in)", 
   "(svn_fs_get_locks_callback_t get_locks_func,", 
   "void *get_locks_baton)): New typemap.", 
   "* subversion/bindings/swig/svn_ra.i", 
   "(%typemap(ruby, in)", 
   "(const svn_ra_callbackss_t *callbacks,", 
   "void *callback_baton),", 
   "%typemap(ruby, in)", 
   "(svn_ra_lock_callback_t lock_func, void *lock_baton),", 
   "%typemap(ruby, in)", 
   "(svn_ra_file_rev_handler_t handler, void *handler_baton),", 
   "%typemap(ruby, in) apr_hash_t *lock_tokens,", 
   "%typemap(ruby, in) apr_array_header_t *location_revisions):", 
   "New typemap.", 
   "* subversion/bindings/swig/include/svn_string.swg", 
   "(%typemap(ruby, argout) svn_stringbuf_t *output): New typemap.", 
   "* subversion/bindings/swig/include/svn_types.swg", 
   "(%typemap(ruby, in)", 
   "(svn_commit_callback_t callback, void *callback_baton),", 
   "%typemap(ruby, in)", 
   "(svn_fs_warning_callback_t warning, void *warning_baton),", 
   "%typemap(ruby, argout, fragment=\"output_helper\")", 
   "unsigned char digest[ANY]): New typemap.", 
   "* subversion/bindings/swig/include/apr.swg", 
   "(%typemap(ruby, argout, fragment=\"output_helper\")", 
   "apr_hash_t **PROPHASH): Use output_helper().", 
   "* subversion/bindings/swig/ruby/libsvn_swig_ruby/swigutil_rb.c", 
   "(SVN_ERR_P): New predicate macro.", 
   "(open_tmp_file, get_wc_prop, set_wc_prop, push_wc_prop,", 
   "invalidate_wc_props, progress_func, auth_baton, found_entry,", 
   "file_changed, file_added, file_deleted, dir_added, dir_deleted,", 
   "dir_props_changed): New ID.", 
   "(svn_swig_rb_handle_svn_error): Use", 
   "svn_swig_rb_svn_error_to_rb_error().", 
   "(callback): Remove debug code.", 
   "(callback_rescue): Use r2c_svn_err().", 
   "(svn_swig_rb_client_blame_receiver_func): Fix inverse condition.", 
   "(r2c_long, r2c_svn_err,", 
   "svn_swig_rb_apr_array_to_array_external_item,", 
   "svn_swig_rb_array_to_apr_array_revnum,", 
   "svn_swig_rb_svn_error_to_rb_error,", 
   "ra_callbacks_open_tmp_file, ra_callbacks_get_wc_prop,", 
   "ra_callbacks_set_wc_prop, ra_callbacks_push_wc_prop,", 
   "ra_callbacks_invalidate_wc_props, ra_callbacks_progress_func,", 
   "wc_entry_callbacks_found_entry, wc_diff_callbacks_file_changed,", 
   "wc_diff_callbacks_file_added, wc_diff_callbacks_file_deleted,", 
   "wc_diff_callbacks_dir_added, wc_diff_callbacks_dir_deleted,", 
   "wc_diff_callbacks_dir_props_changed): New function.", 
   "* subversion/bindings/swig/ruby/libsvn_swig_ruby/swigutil_rb.c,", 
   "subversion/bindings/swig/ruby/libsvn_swig_ruby/swigutil_rb.h", 
   "(svn_swig_rb_apr_array_to_array_external_item,", 
   "svn_swig_rb_array_to_apr_array_revnum,", 
   "svn_swig_rb_repos_authz_callback,", 
   "svn_swig_rb_commit_callback,", 
   "svn_swig_rb_delta_path_driver_cb_func,", 
   "svn_swig_rb_txdelta_window_handler,", 
   "svn_swig_rb_fs_warning_callback,", 
   "svn_swig_rb_fs_get_locks_callback,", 
   "svn_swig_rb_just_call,", 
   "svn_swig_rb_setup_ra_callbacks,", 
   "svn_swig_rb_ra_lock_callback,", 
   "svn_swig_rb_ra_file_rev_handler,", 
   "svn_swig_rb_repos_history_func,", 
   "svn_swig_rb_repos_file_rev_handler,", 
   "svn_swig_rb_wc_relocation_validator,", 
   "svn_swig_rb_wc_entry_callbacks,", 
   "svn_swig_rb_wc_diff_callbacks2): New function.", 
   "* subversion/bindings/swig/ruby/svn/info.rb", 
   "(Svn::Info#get_info, Svn::Info#format_date): use Time.", 
   "* subversion/bindings/swig/ruby/svn/wc.rb", 
   "(Svn::Wc.ensure_adm,", 
   "Svn::Wc.parse_externals_description, Svn::Wc.actual_target,", 
   "Svn::Wc.normal_prop?, Svn::Wc.wc_prop?, Svn::Wc.entry_prop?,", 
   "Svn::Wc.pristine_copy_path, Svn::Wc.default_ignores): New", 
   "module function.", 
   "(Svn::Wc::AdmAccess.probe_open, Svn::Wc::AdmAccess.open_anchor,", 
   "Svn::Wc::AdmAccess.probe_try, Svn::Wc::AdmAccess._open,", 
   "Svn::Wc::Notify::new): New class method.", 
   "(Svn::Wc::AdmAccess#open, Svn::Wc::AdmAccess#probe_open,", 
   "Svn::Wc::AdmAccess#retrieve,", 
   "Svn::Wc::AdmAccess#probe_retrieve,", 
   "Svn::Wc::AdmAccess#probe_try, Svn::Wc::AdmAccess#access_path,", 
   "Svn::Wc::AdmAccess#locked?,", 
   "Svn::Wc::AdmAccess#has_binary_prop?,", 
   "Svn::Wc::AdmAccess#text_modified?,", 
   "Svn::Wc::AdmAccess#props_modified?, Svn::Wc::AdmAccess#entry,", 
   "Svn::Wc::AdmAccess#read_entries, Svn::Wc::AdmAccess#ancestry,", 
   "Svn::Wc::AdmAccess#walk_entries,", 
   "Svn::Wc::AdmAccess#mark_missing_deleted,", 
   "Svn::Wc::AdmAccess#maybe_set_repos_root,", 
   "Svn::Wc::AdmAccess#status_editor, Svn::Wc::AdmAccess#copy,", 
   "Svn::Wc::AdmAccess#delete, Svn::Wc::AdmAccess#add,", 
   "Svn::Wc::AdmAccess#add_repos_file,", 
   "Svn::Wc::AdmAccess#remove_from_revision_control,", 
   "Svn::Wc::AdmAccess#resolved_conflict,", 
   "Svn::Wc::AdmAccess#process_committed,", 
   "Svn::Wc::AdmAccess#crawl_revisions,", 
   "Svn::Wc::AdmAccess#wc_root?, Svn::Wc::AdmAccess#update_editor,", 
   "Svn::Wc::AdmAccess#switch_editor,", 
   "Svn::Wc::AdmAccess#prop_list, Svn::Wc::AdmAccess#prop,", 
   "Svn::Wc::AdmAccess#set_prop, Svn::Wc::AdmAccess#diff_editor,", 
   "Svn::Wc::AdmAccess#diff, Svn::Wc::AdmAccess#prop_diffs,", 
   "Svn::Wc::AdmAccess#merge, Svn::Wc::AdmAccess#merge_props,", 
   "Svn::Wc::AdmAccess#mrege_prop_diffs,", 
   "Svn::Wc::AdmAccess#cleanup, Svn::Wc::AdmAccess#relocate,", 
   "Svn::Wc::AdmAccess#revert,", 
   "Svn::Wc::AdmAccess#transmit_text_deltas,", 
   "Svn::Wc::AdmAccess#transmit_prop_deltas,", 
   "Svn::Wc::AdmAccess#ignores, Svn::Wc::AdmAccess#add_lock,", 
   "Svn::Wc::AdmAccess#remove_lock,", 
   "Svn::Wc::Entry#dup, Svn::Wc::Entry#conflicted,", 
   "Svn::Wc::Entry#text_conflicted,", 
   "Svn::Wc::Entry#prop_conflicted, Svn::Wc::Status2#dup,", 
   "Svn::Wc::Notify#dup): New method.", 
   "(Svn::Wc::TraversalInfo): New class.", 
   "* subversion/bindings/swig/ruby/svn/delta.rb", 
   "(Svn::Delta.svndiff_handler, Svn::Delta.read_svndiff_window)", 
   "(Svn::Delta.skip_svndiff_window, Svn::Delta.path_driver,", 
   "Svn::Delta::TextDeltaStream.push_target,", 
   "Svn::Delta::TextDeltaStream.apply,", 
   "Svn::Delta::TextDeltaStream.parse_svndiff): New class method.", 
   "(Svn::Delta::TextDeltaStream#send_string,", 
   "Svn::Delta::TextDeltaStream#send_stream): New method.", 
   "* subversion/bindings/swig/ruby/svn/repos.rb", 
   "(Svn::Repos.hotcopy, Svn::Repos.recover,", 
   "(Svn::Repos.db_logfiles, Svn::Repos.read_authz): New class method.", 
   "(Svn::Repos::ReposCore#set_authz_read_func)", 
   "(Svn::Repos::ReposCore#report)", 
   "(Svn::Repos::ReposCore#commit_editor)", 
   "(Svn::Repos::ReposCore#committed_info)", 
   "(Svn::Repos::ReposCore#stat, Svn::Repos::ReposCore#logs)", 
   "(Svn::Repos::ReposCore#file_revs)", 
   "(Svn::Repos::ReposCore#commit_txn)", 
   "(Svn::Repos::ReposCore#transaction_for_update)", 
   "(Svn::Repos::ReposCore#lock, Svn::Repos::ReposCore#unlock)", 
   "(Svn::Repos::ReposCore#get_locks)", 
   "(Svn::Repos::ReposCore#set_rev_prop)", 
   "(Svn::Repos::ReposCore#rev_prop)", 
   "(Svn::Repos::ReposCore#rev_proplist)", 
   "(Svn::Repos::ReposCore#dump_fs, Svn::Repos::ReposCore#load_fs)", 
   "(Svn::Repos::ReposCore#build_parser)", 
   "(Svn::Repos::ReposCore#setup_report_baton): New method.", 
   "(Svn::Repos::Authz): New class.", 
   "* subversion/bindings/swig/ruby/svn/fs.rb", 
   "(Svn::Fs): Call Svn::Fs.initialize.", 
   "(Svn::Fs#modules): New class method.", 
   "(Svn::Fs::FileSystem.delete, Svn::Fs::FileSystem.hotcopy): New", 
   "class method.", 
   "(Svn::Fs::FileSystem.new): Just an alias of", 
   "Svn::Fs::FileSystem.open.", 
   "(Svn::Fs::Access, Svn::Fs::History, Svn::Fs::PathChange): New class.", 
   "Svn::Fs::Transaction#commit): Fix typo.", 
   "Svn::Fs::FileSystem#set_warning_func,", 
   "Svn::Fs::FileSystem#path, Svn::Fs::FileSystem#transaction,", 
   "Svn::Fs::FileSystem#access, Svn::Fs::FileSystem#access,", 
   "Svn::Fs::FileSystem#deltify_revision,", 
   "Svn::Fs::FileSystem#uuid, Svn::Fs::FileSystem#uuid,", 
   "Svn::Fs::FileSystem#lock, Svn::Fs::FileSystem#unlock,", 
   "Svn::Fs::FileSystem#generate_lock_token,", 
   "Svn::Fs::FileSystem#get_lock, Svn::Fs::FileSystem#get_locks,", 
   "Svn::Fs::Transaction#set_prop, Svn::Fs::Transaction#purge,", 
   "Svn::Fs::Root#file?, Svn::Fs::Root#name,", 
   "Svn::Fs::Root#node_created_path, Svn::Fs::Root#set_node_prop,", 
   "Svn::Fs::Root#file_md5_checksum, Svn::Fs::Root#txn_root?,", 
   "Svn::Fs::Root#revision_root?, Svn::Fs::Root#paths_changed,", 
   "Svn::Fs::Root#node_history, Svn::Fs::Root#props_changed,", 
   "Svn::Fs::Root#merge, Svn::Fs::Root#make_dir,", 
   "Svn::Fs::Root#delete, Svn::Fs::Root#copy,", 
   "Svn::Fs::Root#revision_link, Svn::Fs::Root#make_file,", 
   "Svn::Fs::Root#apply_textdelta, Svn::Fs::Root#apply_text,", 
   "Svn::Fs::Root#contents_changed?,", 
   "Svn::Fs::Root#file_delta_stream,", 
   "Svn::Fs::Id#compare, Svn::Fs::Id#related?): New method.", 
   "* subversion/bindings/swig/ruby/svn/core.rb", 
   "(Time): Support svn time handling functions.", 
   "(Svn::Core::Stream#write): Fix typo.", 
   "(Svn::Core::Config::Property): New module.", 
   "* subversion/bindings/swig/ruby/svn/ra.rb", 
   "(Svn::Ra): Call Svn::Ra.initialize.", 
   "(Svn::Ra.modules): New class method.", 
   "(Svn::Ra::Session, Svn::Ra::Reporter2): New class.", 
   "* subversion/bindings/swig/ruby/svn/client.rb", 
   "(Svn::Client::CommitInfo2#date, Svn::Client::Context#log,", 
   "Svn::Client::Context#blame): Use Time.from_svn_format.", 
   "* subversion/bindings/swig/ruby/svn/util.rb", 
   "(Svn::Util::MILLION,", 
   "Svn::Util.to_apr_time, Svn::Util.string_to_time): Remove. Moved", 
   "to Time.", 
   "* subversion/bindings/swig/ruby/test/test_util.rb", 
   "(SvnUtilTest#test_time): Remove. Moved to SvnCoreTest#test_time.", 
   "* subversion/bindings/swig/ruby/test/test_fs.rb", 
   "(SvnFsTest#test_version, SvnFsTest#test_create,", 
   "SvnFsTest#test_hotcopy, SvnFsTest#test_root): New test.", 
   "* subversion/bindings/swig/ruby/test/test_core.rb", 
   "(SvnCoreTest#test_time): New test. Moved from", 
   "SvnUtilTest#test_time.", 
   "(SvnCoreTest#used_pool): Use Time#to_apr_time."
  ], 
  "revision_id": "856072"
 }, 
 {
  "author": "maxb", 
  "date": "2005-08-30T17:08:39.722585Z", 
  "msg": [
   "* www/test-redirects.html: XHTML-ize, and put in a proper document structure,", 
   "in case that will please the server munging better."
  ], 
  "revision_id": "856071"
 }
]