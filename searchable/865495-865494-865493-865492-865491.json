[
 {
  "author": "blair", 
  "date": "2007-06-15T17:53:42.210985Z", 
  "msg": [
   "* subversion/tests/cmdline/davautocheck.sh:", 
   "In the generated Apache configuration file:", 
   "Rename the ErrorLog file from log to error_log.", 
   "Enable logging all HTTP requests to a new access_log file using a", 
   "CustomLog directive."
  ], 
  "revision_id": "865495"
 }, 
 {
  "author": "dlr", 
  "date": "2007-06-15T16:59:28.643782Z", 
  "msg": [
   "* notes/fs-improvements.txt", 
   "Quickly scribble down some FS improvements we tossed around on IRC", 
   "for \"multiple parents per change\" and \"atomic renames\"."
  ], 
  "revision_id": "865494"
 }, 
 {
  "author": "pburba", 
  "date": "2007-06-15T16:38:47.898579Z", 
  "msg": [
   "* www/merge-tracking/func-spec.html", 
   "Remove 'unimplemented' tags from section on merge info elision."
  ], 
  "revision_id": "865493"
 }, 
 {
  "author": "pburba", 
  "date": "2007-06-15T16:35:48.467849Z", 
  "msg": [
   "Support setting and elision of empty rev range mergeinfo and elision to repos.", 
   "Prior to this patch we supported empty revision range merge info,", 
   "e.g. svn:mergeinfo '/A/B:', in the sqlite db but we didn't allow it to be set", 
   "on a working copy path.  This patch allows that and also makes the mergeinfo", 
   "elision code DTRT with empty revision range merge info.  Basically this means", 
   "that if empty revision range merge info has no meaning it elides.  This patch", 
   "also introduces the new concept of 'partial' elision, where only paths mapped", 
   "to empty rev ranges elide, leaving other path mappings behind.  Again, this is", 
   "only done where the elision of the empty ranges has no semantic impact on the", 
   "total merge info.", 
   "Lastly this patch allows elision not only to a path's nearest WC ancestor but", 
   "also its nearest REPOS ancestor if a WC ancestor doesn't exist.", 
   "* notes/webdav-protocol", 
   "Update section on merge-info-report to reflect svn_mergeinfo_inheritance_t.", 
   "* subversion/include/private/svn_fs_mergeinfo.h", 
   "(svn_fs_mergeinfo__get_mergeinfo):", 
   "* subversion/include/svn_fs.h", 
   "(svn_fs_get_mergeinfo):", 
   "* subversion/include/svn_ra.h", 
   "(svn_ra_get_mergeinfo):", 
   "* subversion/include/svn_repos.h", 
   "(svn_repos_fs_get_mergeinfo):", 
   "Replace svn_boolean_t \"include_parents\" arg with svn_mergeinfo_inheritance_t", 
   "argument.", 
   "* subversion/include/svn_types.h", 
   "(svn_mergeinfo_inheritance_t): New enum describing the three ways to request", 
   "merge info affecting a path (explicit, explicit or inherited, or inherited", 
   "only).", 
   "(svn_inheritance_to_word, svn_inheritance_from_word): New declarations, for", 
   "communicating svn_mergeinfo_inheritance_t over svn and dav.", 
   "* subversion/libsvn_client/copy.c", 
   "(calculate_target_mergeinfo): Update call to", 
   "svn_client__get_repos_mergeinfo().", 
   "* subversion/libsvn_client/merge.c", 
   "(get_wc_mergeinfo): Replace inherited_only boolean argument with", 
   "svn_mergeinfo_inheritance_t for consistency with other merge info retrieval", 
   "functions.", 
   "(get_wc_or_repos_mergeinfo): Add two new arguments, one signaling retrieval", 
   "of merge info only from the repository and one svn_mergeinfo_inheritance_t.", 
   "Update call to svn_client__get_repos_mergeinfo().  Also prevent a check of", 
   "repository merge info for locally added paths.", 
   "(get_empty_rangelists_unique_to_child): New helper for mergeinfo_elides(),", 
   "finds merge info for paths in a child hash that map to empty revision ranges", 
   "and don't exist in the parent hash.", 
   "(mergeinfo_elides): Renamed to elide_mergeinfo()", 
   "(elide_mergeinfo): New, replacement for mergeinfo_elides, now not only", 
   "determines if elision occurs, but also performs the elision.", 
   "(elide_children): Replace call to mergeinfo_elides() with elide_mergeinfo().", 
   "(svn_client__elide_mergeinfo): Let helper elide_mergeinfo() test for *and*", 
   "perform elision.  If no working copy ancestor with mergeinfo is found permit", 
   "possible check of the repository for ancestor mergeinfo.  Rename", 
   "elision_limit_path argument to more accurate wc_elision_limit_path and use", 
   "it as a flag indicating whether to check the repos for ancestor merge info.", 
   "(update_wc_mergeinfo): Allow empty revision range merge info to be set.", 
   "(do_merge, do_single_file_merge): Update callers of", 
   "get_wc_or_repos_mergeinfo().", 
   "(svn_client_get_mergeinfo): Update calls to", 
   "svn_client__get_repos_mergeinfo() and get_wc_or_repos_mergeinfo().", 
   "* subversion/libsvn_client/mergeinfo.h", 
   "(svn_client__get_repos_mergeinfo): Add svn_mergeinfo_inheritance_t argument.", 
   "(svn_client__elide_mergeinfo): Rename elision_limit_path argument to more", 
   "accurate wc_elision_limit_path.  Tweak docstring to reflect new empty rev", 
   "range elision and repos elision behaviors.", 
   "* subversion/libsvn_client/mergeinfo.c", 
   "(svn_client__get_repos_mergeinfo): Add svn_mergeinfo_inheritance_t argument,", 
   "update call to svn_ra_get_mergeinfo().", 
   "* subversion/libsvn_fs/fs-loader.h", 
   "(struct root_vtable_t): Add svn_mergeinfo_inheritance_t arg to", 
   "'get_mergeinfo' hook.", 
   "* subversion/libsvn_fs/fs-loader.c", 
   "(svn_fs_get_mergeinfo): Add svn_mergeinfo_inheritance_t argument, update", 
   "call to get_mergeinfo().", 
   "* subversion/libsvn_fs_util/mergeinfo-sqlite-index.c", 
   "(get_mergeinfo_for_path): Add svn_mergeinfo_inheritance_t argument, update", 
   "recursive call.", 
   "(index_path_mergeinfo): Update call to get_mergeinfo_for_path().", 
   "(get_mergeinfo): Add svn_mergeinfo_inheritance_t arg, update call to", 
   "get_mergeinfo_for_path().", 
   "(svn_fs_mergeinfo__get_mergeinfo): Add svn_mergeinfo_inheritance_t argument,", 
   "update call to get_mergeinfo().", 
   "(svn_fs_mergeinfo__get_mergeinfo_for_tree): Update call to get_mergeinfo().", 
   "* subversion/libsvn_ra/ra_loader.h (struct svn_ra__vtable_t.get_mergeinfo):", 
   "* subversion/libsvn_ra/ra_loader.c (svn_ra_dav__get_mergeinfo):", 
   "* subversion/libsvn_ra_dav/ra_dav.h (svn_ra_dav__get_mergeinfo):", 
   "* subversion/libsvn_ra_local/ra_plugin.c(svn_ra_local__get_mergeinfo):", 
   "* subversion/libsvn_ra_svn/client.c (ra_svn_get_merge_info):", 
   "* subversion/libsvn_ra_serf/ra_serf.h (svn_ra_serf__get_mergeinfo):", 
   "* subversion/libsvn_repos/fs-wrap.c (svn_repos_fs_get_mergeinfo):", 
   "Replace boolean include_parents arg with svn_mergeinfo_inheritance_t arg.", 
   "* subversion/libsvn_ra_svn/protocol", 
   "(Main Command Set): Update get-merge-info params.", 
   "* subversion/libsvn_subr/kitchensink.c", 
   "(svn_inheritance_to_word, svn_inheritance_from_word): New definitions.", 
   "* subversion/libsvn_ra_serf/mergeinfo.c (svn_ra_serf__get_mergeinfo):", 
   "* subversion/libsvn_ra_dav/mergeinfo.c (svn_ra_dav__get_mergeinfo):", 
   "* subversion/mod_dav_svn/reports/mergeinfo.c (dav_svn__get_mergeinfo_report):", 
   "Replace boolean include_parents arg with svn_mergeinfo_inheritance_t arg for", 
   "the two RA methods. For all three handle new inherit element that maps to", 
   "svn_mergeinfo_inheritance_t.", 
   "* subversion/svnserve/serve.c", 
   "(get_merge_info): Parse svn_mergeinfo_inheritance_t, update call to", 
   "svn_repos_fs_get_mergeinfo().", 
   "* subversion/tests/cmdline/merge_tests.py", 
   "(test_list): Remove XFail from empty_rev_range_mergeinfo.", 
   "* subversion/tests/libsvn_fs/fs-test.c", 
   "(get_mergeinfo): Update calls to svn_fs_get_mergeinfo()."
  ], 
  "revision_id": "865492"
 }, 
 {
  "author": "pburba", 
  "date": "2007-06-15T16:34:37.422713Z", 
  "msg": [
   "Fix parameter mismatches in ra_serf due to svn_depth_t replacing bool args.", 
   "* subversion/libsvn_ra_serf/ra_serf.h", 
   "(svn_ra_serf__do_diff, svn_ra_serf__do_status, svn_ra_serf__do_update,", 
   "svn_ra_serf__do_switch): Change to svn_boolean_t recurse argument to", 
   "correct svn_depth_t arg."
  ], 
  "revision_id": "865491"
 }
]