[
 {
  "author": "coheigea", 
  "date": "2014-01-23T12:36:18.396908Z", 
  "msg": [
   "Adding Apache header"
  ], 
  "revision_id": "1560668"
 }, 
 {
  "author": "chetanm", 
  "date": "2014-01-23T12:35:35.360462Z", 
  "msg": [
   "OAK-891 - Use DirectMemory as Level 2/Offheap cache", 
   "Enabling support for configuring off heap cache via OSGi. Further now various", 
   "properties are also read from framework properties also. So to configure offHeapCache", 
   "size from framework property use `oak.documentstore.offHeapCache`. Similar", 
   "pattern for cache also"
  ], 
  "revision_id": "1560667"
 }, 
 {
  "author": "chetanm", 
  "date": "2014-01-23T12:35:15.759821Z", 
  "msg": [
   "OAK-891 - Use DirectMemory as Level 2/Offheap cache", 
   "Adding OffHeap cache support which uses Kryo and DirectMemory", 
   "-- OffHeapCache interface to remove direct dependency on DM and Kryo classes", 
   "-- Cache invalidation logic takes care of off heap cache content also", 
   "-- Care is taken to not deserialize complete NodeDocument just for cache consistency", 
   "check.", 
   "-- Custom Kryo serializer for compact storage of NodeDocument and Revision classes", 
   "-- Off heap cache is used if off heap cache size is set to non zero value in MongoMK.Builder"
  ], 
  "revision_id": "1560666"
 }, 
 {
  "author": "chetanm", 
  "date": "2014-01-23T12:34:38.516521Z", 
  "msg": [
   "OAK-891 - Use DirectMemory as Level 2/Offheap cache", 
   "-- Introducing a CachedNodeDocument capturing properties required for", 
   "managing cached document", 
   "-- Sealing the NULL NodeDocument", 
   "-- Adding constructor to capture creation time. Required when NodeDocument is", 
   "constructed via deserialization"
  ], 
  "revision_id": "1560665"
 }, 
 {
  "author": "chetanm", 
  "date": "2014-01-23T12:34:16.584721Z", 
  "msg": [
   "OAK-891 - Use DirectMemory as Level 2/Offheap cache", 
   "Adding isSealed to determine if document is sealed or not"
  ], 
  "revision_id": "1560664"
 }
]