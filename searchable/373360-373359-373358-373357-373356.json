[
 {
  "author": "ltheussl", 
  "date": "2006-01-29T21:48:34.427185Z", 
  "msg": [
   "[maven-scm] copy for tag MAVEN_CHANGELOG_1_9"
  ], 
  "revision_id": "373360"
 }, 
 {
  "author": "thorsten", 
  "date": "2006-01-29T21:46:31.335369Z", 
  "msg": [
   "FOR-798 - removing obsolete code. Further switching to generator instead of transformer in jx since there is a performance penalty for jx-transformer. Thx Tim for pointing this out."
  ], 
  "revision_id": "373359"
 }, 
 {
  "author": "antonio", 
  "date": "2006-01-29T21:35:41.900298Z", 
  "msg": [
   "Remove empty dirs."
  ], 
  "revision_id": "373358"
 }, 
 {
  "author": "thorsten", 
  "date": "2006-01-29T21:07:59.344000Z", 
  "msg": [
   "Formating changes"
  ], 
  "revision_id": "373357"
 }, 
 {
  "author": "mikem", 
  "date": "2006-01-29T20:52:34.538029Z", 
  "msg": [
   "DERBY-599", 
   "committing on behalf of: Sunitha Kambhampati", 
   "Problem:", 
   "setBlob(i,blob) does not set the length of the stream in the blob and but instead passes a -1 for stream length.", 
   "During the normalization process, setBlob.normalize(DTD,DVD) calls SQLBlob.setWith.", 
   "The setWidth is called in order to compare the length of the blob value to the maximum width of the column and to throw a truncation error in case the value wont fit into the column.  setWidth() calls SQLBinary.getLength().  If tvalue is a stream, the getLength() method checks for streamLength value and if the streamLength value is set to -1 (ie unknown) , it calls getBytes().length() which calls getValue() and this is where the entire stream is getting materialized.", 
   "This patch fixes DERBY-599 so using setBlob call, will not  materialize the entire blob into memory.", 
   "- changes to setBlob to pass the length of the blob value instead of -1.  The length of the blob value passed into setBlob can be obtained by calling Blob.length() which returns a long.", 
   "- move the -ve length check from setBinaryStream to setBinaryStreamInternal since setBlob will not pass a -1 for length.", 
   "- change setBinaryStreamInternal to take the length parameter as a long instead of int.", 
   "- Currently Derby allows max value of 2G-1 ( Max value of an int) for blobs. Add check to ensure that if a stream with a length > max value of int is passed, an error is thrown. Use an existing error message", 
   "'The resulting value is outside the range for the data type {0}'"
  ], 
  "revision_id": "373356"
 }
]