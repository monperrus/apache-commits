[
 {
  "author": "ivaynberg", 
  "date": "2007-05-09T21:47:04.921624Z", 
  "msg": [
   "WICKET-548"
  ], 
  "revision_id": "536665"
 }, 
 {
  "author": "mturyn", 
  "date": "2007-05-09T21:33:32.677181Z", 
  "msg": [
   "From Rob Gagne"
  ], 
  "revision_id": "536664"
 }, 
 {
  "author": "", 
  "date": "2007-05-09T21:32:41.600232Z", 
  "msg": [
   "This is an empty revision for padding."
  ], 
  "revision_id": "536663"
 }, 
 {
  "author": "mturyn", 
  "date": "2007-05-09T21:31:10.620181Z", 
  "msg": [
   "Notes with James", 
   "Added some TODOs to AbstractTagImpl.js"
  ], 
  "revision_id": "536662"
 }, 
 {
  "author": "mamta", 
  "date": "2007-05-09T21:27:18.998543Z", 
  "msg": [
   "DERBY-2335 This commit adds some basics tests and fixes a bug that I came across while writing the tests. The problem is that", 
   "SQLChar has a method called stringCompare(SQLChar, SQLChar). This method compares the 2 passed parameters. When I", 
   "implemented this method for CollatorSQLxxx classes, I was making the assumption that first parameter SQLChar is same", 
   "as the SQLChar object on which the method is getting called and hence I was ignoring the 1st parameter and comparing", 
   "the object on which stringCompare is called with the 2nd paramter to stringCompare method. But that assumption is not", 
   "correct. I discovered that when I wrote a test like following", 
   "select id, name from customer where 'a'='b'", 
   "The where clause for territory based collated db always returned true because of the bug/wrong assumption.", 
   "This is because stringCompare was getting called with first parameter as SQLChar 'b' and 2nd parameter as SQLChar 'a' and", 
   "stringCompare was getting called off of the object for 'a' and hence, at runtime the comparison was happening between 2 'a's", 
   "rather than 'a' and 'b'. In order to fix this, I am having stringCompare on ColatorSQLxxx methods use both the passed SQLChars", 
   "to do the comparison rather than ignorning the first SQLChar(just like what we do for existing SQLChar classes). This fixes the problem.", 
   "In addition, I have enabled the testing for territory based collated db in CollationTest added by Kathey (Thanks for", 
   "starting this test off, Kathey). There are 3 databases with territory based collation, for Polish, Norway and English.", 
   "And lastly, I have added 2 simple character constant tests for each of the 4 databases (3 territory based collated dbs and", 
   "one default collation db). One of these 2 simple tests will give different results based on the collation used."
  ], 
  "revision_id": "536661"
 }
]