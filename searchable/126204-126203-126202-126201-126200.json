[
 {
  "author": "djencks", 
  "date": "2005-01-23T08:31:17.642231Z", 
  "msg": [
   "so, just where did this missing attribute allegedly come from?"
  ], 
  "revision_id": "126204"
 }, 
 {
  "author": "anil", 
  "date": "2005-01-23T08:30:26.741039Z", 
  "msg": [
   "Latest Scout Implementation.  There is a large scope for refactoring/improvement of the code.  I need to add the testcases also."
  ], 
  "revision_id": "126203"
 }, 
 {
  "author": "crossley", 
  "date": "2005-01-23T07:21:27.228268Z", 
  "msg": [
   "Link to ASF Bylaws.", 
   "Link to two very helpful emails from Greg and Dirk which clarify the PMC and chair."
  ], 
  "revision_id": "126202"
 }, 
 {
  "author": "craigmcc", 
  "date": "2005-01-23T07:08:49.507297Z", 
  "msg": [
   "Examples of two different techniques for remoting support.  Such support", 
   "will typically be used by a rich JSF component that is generating code for", 
   "client side behavior, but it is generally useful outside of JSF as well.", 
   "The two fundamentally different approaches illustrated here are:", 
   "* \"Java Based\" -- these requests use the support provided by the recent", 
   "checkin to the core framework of Shale for mapping the context-relative", 
   "portion of a request URI (servlet path + path info) to a particular", 
   "command (in the Commons Chain sense) in a catalog named (by default)", 
   "\"remote\".", 
   "* \"JSP Based\" -- these requests use the JSF controller infrastructure", 
   "(and the Shale ViewController APIs) to trigger a JSP page (the examples", 
   "are coded in JSP 2.0's XML syntax) that renders an XML response to the", 
   "incoming request.  The corresponding ViewController beans (supported by", 
   "Shale) illustrate where an application using this approach would put its", 
   "logic to acquire the appropriate data, and clean up after itself.", 
   "There is not one \"right\" answer to how remoting support should be implemented.", 
   "These two approaches should trigger some interesting thinking and experiments", 
   "on the most elegant ways to address the required functionality in Java based", 
   "applications."
  ], 
  "revision_id": "126201"
 }, 
 {
  "author": "craigmcc", 
  "date": "2005-01-23T06:55:57.790344Z", 
  "msg": [
   "Add initial, minimal, support for remote requests.  Use of these APIs will", 
   "typically be made by rich JSF components that require back-channel interactions", 
   "with the server (perhaps through something like XmlHttpRequest), but the", 
   "facility is generally useful for REST-style interactions with a server.", 
   "Fundamentally, an application provides a series of commands (as in Commons", 
   "Chain) in a catalog named (by default) \"remote\", and that have a context-", 
   "relative URI that matches one of the defined regular expressions (by default", 
   "this is like a \"*.remote\" extension mapping).  A command whose name matches", 
   "the context relative URI (i.e. servlet path + path info) will be executed", 
   "to produce the corresponding result.  Support classes are provided to make", 
   "it easy to write such a command, particularly:", 
   "* RemoteContext -- a Commons Chain \"Context\" object that encapsulates the", 
   "state of the current request, but isolates the command from Servlet API", 
   "issues (making it *much* easier to build unit tests).", 
   "* ResponseWrapper -- a wrapper class (around a Writer) that makes it very", 
   "easy to compose XML responses, with APIs inspired by the", 
   "javax.faces.context.ResponseWriter API in JSF.  This is by no means the", 
   "only way to create XML output, but it will feel familiar to JSF aware", 
   "developers, among others."
  ], 
  "revision_id": "126200"
 }
]