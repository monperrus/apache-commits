[
 {
  "author": "gstein", 
  "date": "2002-03-07T02:01:33.270542Z", 
  "msg": [
   "Fix the update editor to stop refcounting the dir baton. The editor", 
   "driver is ensuring that they get destroyed (since we allocate them in", 
   "the provided pool). Thus, in a postfix-delta case, the baton is no", 
   "longer around to decref. This was causing segfaults in the xml tests", 
   "which are the only thing to use the postfix delta style for updates.", 
   "However, the revision bumping information still needs to happen in a", 
   "refcount-y way. The key data to perform the bumping was extracted from", 
   "the directory baton and stored into a 'bump_dir_info' structure.", 
   "* libsvn_wc/update_editor", 
   "(struct dir_baton): remove the 'ref_count' field since we refcount", 
   "the bump dir structures instead. add a pointer to our bump info.", 
   "(struct bump_dir_info): new structure for recording bump information.", 
   "(make_dir_baton): change param names from edit_baton/parent_baton to", 
   "eb/pb and get rid of the local variables that simply renamed the", 
   "params. add construction of the bump_dir_info for this directory.", 
   "(decrement_ref_count): removed. no longer used.", 
   "(maybe_bump_dir_revision): renamed from bump_dir_revision. it now", 
   "takes an edit baton and a pool for its operation. it loops its way", 
   "up the tree of bump_dir_info structures, bumping directories as it", 
   "goes, stopping when it hits the top or when a bump_info is still", 
   "referenced by a subdir or file. some of the path stuff was wonked", 
   "to create stringbuf's from the 'const char *path' stored in the", 
   "bump_dir_info structure.", 
   "(struct file_baton): removed the 'dir_baton' member. it isn't", 
   "needed, and it is safest to keep it out of the baton (since it", 
   "could go away \"at any time\"). point straight at the bump info", 
   "structure for this directory.", 
   "(make_file_baton): rename the 'parent_dir_baton' parameter to 'pb'", 
   "and toss the renaming of the param in the function. update the", 
   "construction of the file baton to point to the bump info.", 
   "(window_handler): stop creating a subpool just to remove a", 
   "file. using the file baton pool is fine (this section isn't in a", 
   "loop, so it isn't an unbounded allocation).", 
   "(change_dir_prop): stop creating a subpool for handling the", 
   "hash. just do it in the provided pool. it will be managed", 
   "appropriately. and again: this part isn't in a loop, so it is a", 
   "relatively bounded operation.", 
   "(close_directory): convert some err handling over to use SVN_ERR and", 
   "one case of SVN_ERR_W. call maybe_bump_dir_revision() instead of", 
   "decrement_ref_count().", 
   "(close_file): call maybe_bump_dir_revision() instead of", 
   "decrement_ref_count().", 
   "(make_editor): put the editor into the subpool."
  ], 
  "revision_id": "841520"
 }, 
 {
  "author": "gstein", 
  "date": "2002-03-07T01:49:22.248667Z", 
  "msg": [
   "Pass pools around to assist with the memory behavior.", 
   "* libsvn_ra_dav/commit.c", 
   "(get_version_url): accept a pool for temporary allocations. the", 
   "allocation for 'rsrc->vsn_url' is kept in ras->pool, though.", 
   "updated all callers to pass a pool.", 
   "(add_child): accept a pool for temporary allocs. pass it to", 
   "get_version_url. updated all callers.", 
   "(commit_open_root): pass the dir_pool to get_version_url.", 
   "(commit_add_dir): pass the dir_pool to add_child.", 
   "(commit_open_dir): ditto", 
   "(commit_add_file): pass the file_pool to add_child.", 
   "(commit_open_file): ditto", 
   "(apply_log_message): escape the raw, null-termed value rather than", 
   "creating a stringbuf just to xml-escape the value."
  ], 
  "revision_id": "841519"
 }, 
 {
  "author": "cmpilato", 
  "date": "2002-03-07T01:45:48.438464Z", 
  "msg": [
   "Convert commit-track editor to the new editor interface.", 
   "* subversion/include/svn_delta.h", 
   "(svn_delta_get_commit_track_editor): Convert editor to new editor", 
   "interface.", 
   "* subversion/libsvn_delta/track_editor.c", 
   "(svn_delta_get_commit_track_editor): Convert editor to new editor", 
   "interface.", 
   "(struct item_baton): Renamed from 'struct dir_baton'.", 
   "(struct file_baton): Removed (struct item_baton is pulling double", 
   "duty).", 
   "(make_item_baton): New baton factory.", 
   "(open_root): Add 'pool'.  Use new baton factory function.", 
   "(add_directory): Add 'pool', rename 'name' to 'path' (and make const", 
   "char *), make 'copyfrom_path' a const char *.  Use new baton factory", 
   "function, and don't use APR_HASH_KEY_STRING when we have a length", 
   "already.", 
   "(open_item): Was open_directory.  Add 'pool', rename 'name' to", 
   "'path' (and make const char *).  Use new baton factory function.", 
   "(open_file, change_file_prop, window_handler): Removed.", 
   "(delete_entry): Add 'pool', rename 'name' to 'path' (and make a", 
   "const char *).  Don't use APR_HASH_KEY_STRING when we have a length", 
   "already.", 
   "(change_item_prop): Add 'pool', make 'name' a const char *, make", 
   "'value' a const svn_stringbuf_t *.  Don't use APR_HASH_KEY_STRING", 
   "when we have a length already.", 
   "(apply_textdelta): Return a NULL window handler.  Don't use", 
   "APR_HASH_KEY_STRING when we have a length already.", 
   "* subversion/libsvn_ra_dav/commit.c", 
   "(svn_ra_dav__get_commit_editor): Commit tracking editor new uses the", 
   "new editor interface, so temporarily wrap it for compatibility.", 
   "* subversion/libsvn_ra_local/ra_plugin.c", 
   "(get_commit_editor): Commit tracking editor new uses the new editor", 
   "interface, so temporarily wrap it for compatibility.", 
   "* subversion/libsvn_ra_local/ra_local.h", 
   "(svn_ra_local__get_editor): Constify 'editor'.", 
   "* subversion/libsvn_ra_local/commit_editor.c", 
   "(svn_ra_local__get_editor): Constify 'editor'.", 
   "* subversion/libsvn_client/commit.c", 
   "(send_to_repos): Commit tracking editor new uses the new editor", 
   "interface, so temporarily wrap it for compatibility.", 
   "* notes/editor-conversion.txt", 
   "New file for tracking conversion of editors to the new interface.", 
   "* subversion/include/svn_wc.h", 
   "(svn_wc_process_committed): Update docstring."
  ], 
  "revision_id": "841518"
 }, 
 {
  "author": "gstein", 
  "date": "2002-03-07T01:41:14.689232Z", 
  "msg": [
   "Remove some unused functions.", 
   "* include/svn_path.h (svn_path_is_single_path_component): removed", 
   "(svn_path_is_thisdir): removed", 
   "* libsvn_subr/path.c (svn_path_is_single_path_component): removed", 
   "(svn_path_is_thisdir): folded into svn_path_is_empty", 
   "(svn_path_is_empty): incorporated contents of svn_path_is_thisdir"
  ], 
  "revision_id": "841517"
 }, 
 {
  "author": "sussman", 
  "date": "2002-03-06T23:11:01.694753Z", 
  "msg": [
   "More error friendlifying.", 
   "* tree.c (not_found):  don't print the absolute path to the repository", 
   "in the error message.  It's not very important, and we don't want", 
   "remote clients to know this information... a slight security leak."
  ], 
  "revision_id": "841516"
 }
]