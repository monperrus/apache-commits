[
 {
  "author": "dkhaywood", 
  "date": "2009-02-10T23:05:50.151111Z", 
  "msg": [
   "splitting out embedded into headlessviewer and embedded"
  ], 
  "revision_id": "1019770"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2009-02-10T22:45:03.989386Z", 
  "msg": [
   "removed duplication in PersistenceMechanismInstallerAbstract subclasses (for proxy and objectstore impls); reworked hook methods in PersistenceMechanismInstallerAbstract to have createRuntimeContext then createContainer; enhanced createContainer to pick up implementation from config (but still defaults to DomainObjectContainerDefault); changed some dependency injection to setter-based rather than constructor to simplify bootstrapping a little; further fiddling around with the Embedded libraries; enhanced ServicesInjectorDefault so will now inject the container using same algorithm as services (ie can potentially be injected into multiple methods if hierarchy matches)"
  ], 
  "revision_id": "1019769"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2009-02-10T22:44:32.689596Z", 
  "msg": [
   "removed duplication in PersistenceMechanismInstallerAbstract subclasses (for proxy and objectstore impls); reworked hook methods in PersistenceMechanismInstallerAbstract to have createRuntimeContext then createContainer; enhanced createContainer to pick up implementation from config (but still defaults to DomainObjectContainerDefault); changed some dependency injection to setter-based rather than constructor to simplify bootstrapping a little; further fiddling around with the Embedded libraries; enhanced ServicesInjectorDefault so will now inject the container using same algorithm as services (ie can potentially be injected into multiple methods if hierarchy matches)"
  ], 
  "revision_id": "1019768"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2009-02-10T22:43:55.155550Z", 
  "msg": [
   "removed duplication in PersistenceMechanismInstallerAbstract subclasses (for proxy and objectstore impls); reworked hook methods in PersistenceMechanismInstallerAbstract to have createRuntimeContext then createContainer; enhanced createContainer to pick up implementation from config (but still defaults to DomainObjectContainerDefault); changed some dependency injection to setter-based rather than constructor to simplify bootstrapping a little; further fiddling around with the Embedded libraries; enhanced ServicesInjectorDefault so will now inject the container using same algorithm as services (ie can potentially be injected into multiple methods if hierarchy matches)"
  ], 
  "revision_id": "1019767"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2009-02-10T22:43:07.235849Z", 
  "msg": [
   "removed duplication in PersistenceMechanismInstallerAbstract subclasses (for proxy and objectstore impls); reworked hook methods in PersistenceMechanismInstallerAbstract to have createRuntimeContext then createContainer; enhanced createContainer to pick up implementation from config (but still defaults to DomainObjectContainerDefault); changed some dependency injection to setter-based rather than constructor to simplify bootstrapping a little; further fiddling around with the Embedded libraries; enhanced ServicesInjectorDefault so will now inject the container using same algorithm as services (ie can potentially be injected into multiple methods if hierarchy matches)"
  ], 
  "revision_id": "1019766"
 }
]