[
 {
  "author": "gawor", 
  "date": "2009-05-08T02:52:56.697215Z", 
  "msg": [
   "track of all service registrations (top-level or nested) and let service registration proxies auto register the service during injection"
  ], 
  "revision_id": "772830"
 }, 
 {
  "author": "tcunning", 
  "date": "2009-05-08T02:17:15.769894Z", 
  "msg": [
   "Fix typo with subscription service."
  ], 
  "revision_id": "772829"
 }, 
 {
  "author": "ppoddar", 
  "date": "2009-05-08T01:31:37.505766Z", 
  "msg": [
   "OPENJA-1070:support for composite foreign keys on MySQL Version >= 5"
  ], 
  "revision_id": "772828"
 }, 
 {
  "author": "bentmann", 
  "date": "2009-05-08T01:28:10.109806Z", 
  "msg": [
   "o Re-introduced 2.x like inheritance assembler and profile injector components which mostly delegate to a common model merger class. First of all, the merger only deals with two models at a time, simplifying its logic compared to the current processors, hopefully allowing us to quickly/easily fix the outstanding POM tests. The ultimate goal is to generate the basic ModelMerger automatically with a new Modello plugin which could be programatically customized via a sub class like MavenModelMerger. It will be interesting to find out how much of the merging rules could be generalized via declarative options in the model. This could allow for generated documentation about how inheritance and profile injection alter the model. Last but not least, generating the merger from the MDO would ease addition of new model elements as these would automatically be considered for inheritance and profile injection."
  ], 
  "revision_id": "772827"
 }, 
 {
  "author": "cdouglas", 
  "date": "2009-05-08T01:21:42.807432Z", 
  "msg": [
   "HADOOP-5476. Close the underlying InputStream in SequenceFile::Reader when", 
   "the constructor throws an exception. Contributed by Michael Tamm"
  ], 
  "revision_id": "772826"
 }
]