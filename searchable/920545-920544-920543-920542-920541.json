[
 {
  "author": "jonathan", 
  "date": "2010-03-08T22:20:55.327259Z", 
  "msg": [
   "Changed name of XQilla EBV define to XQ_EXTENDED_BOOLEAN_VALUE_HPP."
  ], 
  "revision_id": "920545"
 }, 
 {
  "author": "joehni", 
  "date": "2010-03-08T22:20:12.804093Z", 
  "msg": [
   "ContextedRuntimeException must extend RuntimeException (LANG-602)."
  ], 
  "revision_id": "920544"
 }, 
 {
  "author": "ggregory", 
  "date": "2010-03-08T22:15:08.134510Z", 
  "msg": [
   "Change StringUtils arguments from String to CharSequence.", 
   "Details: Working with (trunk) StringUtils (SU) I see the following emerge:", 
   "- In SVN already and continuing: Change StringUtils arguments from String to CharSequence (CS).", 
   "- This leads to replacing calls to String.substring(int[,int]) with calls to CharSequence.subSequence(int)", 
   "- This leads to creating a CharSequenceUtils class (in SVN now, more on this new class below) and CharSequenceUtils.subSequence(CharSequence,int) to avoid changing \"str.substring(start)\" over and over to \"str.subSequence(start, str.length())\". For examples, see new versions of capitalize and uncapitalize.", 
   "- We end up using a toString() on CharSequence to return a String from StringUtil when working with a CharSequence.", 
   "So we have StringUtils using CharSequence inputs as much as possible instead of String, which is nice.", 
   "The CharSequence method subSequence returns a CharSequence; though the Javadoc states \"Returns a new CharSequence that is a subsequence of this sequence.\", this does not guaranteed the return value to be the same kind of CharSequence as the receiver). Since we are after all in a class called StringUtil, calling toString() is a must.", 
   "I propose that we create when possible the methods that are now StringUtils CharSequence methods into CharSequenceUtils and let StringUtil call CharSequenceUtils and then do its toString() and other String specific logic. Later we could have other CharSequence type of utils (for CharBuffer, StringBuiler, StringBuffer, etc) that use the 'primitives' from CharSequenceUtils.", 
   "This means that for methods that are based solely on methods that are now in CharSequence, these can be moved to CharSequenceUtils without effort (all is* methods only call CharSequence#length() and charAt() for example and are now typed as CS, still in SU).", 
   "We can leave @deprecateds method in SU as a nicety to avoid too much porting pain: First change the package to lang3 then you can 'optimize' by changing call sites from SU to CSU.", 
   "As a start, I put in SVN a CharSequenceUtils (CSU) implementation for length() and subSequence()."
  ], 
  "revision_id": "920543"
 }, 
 {
  "author": "nick", 
  "date": "2010-03-08T22:12:06.595938Z", 
  "msg": [
   "Tweak the type information, and stub out the information link which will go live later"
  ], 
  "revision_id": "920542"
 }, 
 {
  "author": "niallp", 
  "date": "2010-03-08T22:09:40.288434Z", 
  "msg": [
   "Add digester 1.8.1 to the download page"
  ], 
  "revision_id": "920541"
 }
]