[
 {
  "author": "jboynes", 
  "date": "2007-03-04T17:33:23.701987Z", 
  "msg": [
   "use released javadoc plugin", 
   "configure link to JDK JavaDoc as we reference this from ours"
  ], 
  "revision_id": "514445"
 }, 
 {
  "author": "jkuhnert", 
  "date": "2007-03-04T17:32:53.750117Z", 
  "msg": [
   "Resolves TAPESTRY-633. Omitzero wasn't correctly being checked when determining default values in NumberTranslator."
  ], 
  "revision_id": "514444"
 }, 
 {
  "author": "mturyn", 
  "date": "2007-03-04T17:22:10.583382Z", 
  "msg": [
   "Moved logger creation to the sole place where we would need it in order to avoid a cyclic dependency.", 
   "See http://issues.apache.org/jira/browse/XAP-320 ."
  ], 
  "revision_id": "514443"
 }, 
 {
  "author": "dennisl", 
  "date": "2007-03-04T17:18:59.861349Z", 
  "msg": [
   "[JXR-25] The generated class pages contains invalid xhtml", 
   "o Use class instead of id in css selectors."
  ], 
  "revision_id": "514442"
 }, 
 {
  "author": "mturyn", 
  "date": "2007-03-04T17:18:35.334690Z", 
  "msg": [
   "Changes to avoid infinite recursion when attempting to access superclass methods; see http://issues.apache.org/jira/browse/XAP-80.", 
   "1.) Xap.setupClassAsSubclassOf altered such that:", 
   "a.) The superclass member is place on the constructor.", 
   "b.) The prototype now has a superclass() method that gives us", 
   "the old behaviour when we really want it (viz sub)", 
   "c.) Most calls on (e.g.) ClassX.prototype formerly using \"this.superclass...\"", 
   "now switched to \"ClassX.superclass\".", 
   "d.) xap.bridges.basic.AbstractWidgetBridge.prototype.getAllowedAttributes", 
   "now uses superclass(); this is o.k. and in fact necessary, for which", 
   "see below.", 
   "Where the old way works:", 
   "There will be no problem calling, in effect,", 
   "this.superclass().foo()", 
   "which is the same as", 
   "this.superclass().foo.call(this.superclass())", 
   "but", 
   "this.superclass().foo.call(this)", 
   "can produce the problem if a method with the same name is implemented", 
   "over three levels of inheritance in the same tree.  Any function which can", 
   "usefully be called using", 
   "this.superclass().foo.call( this.superclass() )", 
   "should be fine."
  ], 
  "revision_id": "514441"
 }
]