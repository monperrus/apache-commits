[
 {
  "author": "brett", 
  "date": "2008-10-03T00:34:52.083915Z", 
  "msg": [
   "fix comment"
  ], 
  "revision_id": "701270"
 }, 
 {
  "author": "brett", 
  "date": "2008-10-03T00:34:39.838913Z", 
  "msg": [
   "ignore"
  ], 
  "revision_id": "701269"
 }, 
 {
  "author": "sisbell", 
  "date": "2008-10-03T00:31:19.242366Z", 
  "msg": [
   "Using latest maven test suite for ITs."
  ], 
  "revision_id": "701268"
 }, 
 {
  "author": "johnh", 
  "date": "2008-10-03T00:23:28.291826Z", 
  "msg": [
   "Adding infrastructure for automatic caching by GadgetHtmlParser implementations. This does not yet affect any existing operation, as it's not included in CajaHtmlParser.", 
   "Two classes are provided:", 
   "1. AbstractCachingGadgetHtmlParser. A GadgetHtmlParser implementation simply subclasses this with proper configuration (a cache and a minimum amount of time at which it's worth parsing parsed content) to automatically support caching. Content is cached by MD5 of the String inputs.", 
   "2. ParseTreeSerializer, with Test. PTS handles conversion between byte[] <-> List<ParsedHtmlNode>. It implements custom serialization routines rather than using Java's built-in serialization for several reasons:", 
   "A) Smaller storage requirements. Testing yielded between 10 and 30% space savings compared to Java serialization, with higher savings correlated with more-structured (fewer Strings) input.", 
   "B) Faster execution time. Custom serialization measured between 30-40% faster than Java serialization, while custom deserialization measured 35-50% faster. For a \"typical\" sample gadget of ~30kB of content, serialization averaged 2.1ms and deserialization clocked in at an avg of 1.3ms. These compare quite favorably to the CajaHtmlParser's average parsing time of 25ms.", 
   "C) Cross-platform, cross-parser, and easier cross-version (de)serialization. This rationale is weaker but noted for completeness.", 
   "Usage of these classes, ideally combined with additional rules preventing hangman variable substitution in non-Text content (Text nodes and Attributes), should allow Shindig to obtain and process a gadget as a parse tree relatively cheaply."
  ], 
  "revision_id": "701267"
 }, 
 {
  "author": "allee8285", 
  "date": "2008-10-02T22:50:41.351089Z", 
  "msg": [
   "OPENJPA-732 - Regressed a unit test. Reverting BrokerImpl back to previous level and disabling a test in the new TestMessageListener."
  ], 
  "revision_id": "701266"
 }
]