[
 {
  "author": "marvin", 
  "date": "2006-11-04T19:38:11.351066Z", 
  "msg": [
   "Eliminate non-portable reuse of va_list."
  ], 
  "revision_id": "471250"
 }, 
 {
  "author": "marvin", 
  "date": "2006-11-04T19:28:54.870340Z", 
  "msg": [
   "No structural changes.  Add comments, correct typose, manipulate whitespace."
  ], 
  "revision_id": "471249"
 }, 
 {
  "author": "dims", 
  "date": "2006-11-04T19:14:38.511632Z", 
  "msg": [
   "add instructions for the extra jars that are needed"
  ], 
  "revision_id": "471248"
 }, 
 {
  "author": "henning", 
  "date": "2006-11-04T19:08:45.612241Z", 
  "msg": [
   "Major rewrite of the ResourceManager implementation to use", 
   "Iterators and clear up the init logic. Mostly happened while", 
   "hunting for the template loading race condition found here."
  ], 
  "revision_id": "471247"
 }, 
 {
  "author": "henning", 
  "date": "2006-11-04T19:06:59.391686Z", 
  "msg": [
   "Serialize the resource retrieval per engine to avoid racing", 
   "when parsing the template (one thread parses the template,", 
   "another is reloading it). This showed prominently when running", 
   "a load benchmark on VelocityViewServlet with caching off.", 
   "Turning caching on hides the problem. But only synchronizing", 
   "the getResource method really fixes it. This slows applications", 
   "down visibly that don't run with template caching and and reload", 
   "a number of templates again and again.", 
   "Fixes VELOCITY-24. Should be revisited for Velocity-2.0"
  ], 
  "revision_id": "471246"
 }
]