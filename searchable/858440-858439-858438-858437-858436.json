[
 {
  "author": "malcolm", 
  "date": "2006-02-07T16:26:21.918353Z", 
  "msg": [
   "Followup to r18363.  Correct some confusion and typos in a doc-comment.", 
   "* subversion/libsvn_delta/svndiff.c", 
   "(zlib_encode): Correctly state the boundary conditions for compression,", 
   "correct a typo, and restate the behaviour of this function in the", 
   "event that the input does not compress (based on the assumptions", 
   "documented in zlib_decode())."
  ], 
  "revision_id": "858440"
 }, 
 {
  "author": "malcolm", 
  "date": "2006-02-07T14:52:45.482002Z", 
  "msg": [
   "Remove some unused variables, and fix a bogus 'might be used", 
   "uninitialized' warning that GCC isn't clever enough to figure out", 
   "by itself.", 
   "Followup to r18363.", 
   "* subversion/libsvn_delta/svndiff.c", 
   "(window_handler): Remove unused variables 'lastoffset' and 'bits'.", 
   "(zlib_decode): Remove unused variable 'origlen'.", 
   "(decode_window): Remove essentially unused variables 'saved_inslen'", 
   "and 'saved_newlen'.  Initialise and assign into 'new_data' earlier,", 
   "allowing us to move 'instout' and 'ndout' into the svndiff1-specific", 
   "scope, also avoiding a bogus 'may be used uninitialized' warning."
  ], 
  "revision_id": "858439"
 }, 
 {
  "author": "giorgio_valoti", 
  "date": "2006-02-07T08:24:51.535019Z", 
  "msg": [
   "Updated italian translation.", 
   "* subversion/po/it.po:  - Fixed all fuzzy translations and translated", 
   "remaining messages."
  ], 
  "revision_id": "858438"
 }, 
 {
  "author": "dberlin", 
  "date": "2006-02-07T03:12:56.159158Z", 
  "msg": [
   "Add new svndiff1 diff encoding, along with support in all protocols", 
   "for the new diff encoding, while also allowing the old", 
   "encoding to still function in a way that is backwards compatible", 
   "for all older clients.", 
   "Add the ability to write this new encoding in the on-disk repository", 
   "format , defaulting to on, and add support for creating", 
   "repositories that do not use the new encoding, for people who need it.", 
   "* configure.in:  Require zlib unconditionally", 
   "* notes/svndiff: Add svndiff1 description", 
   "* subversion/libsvn_fs_base/reps-strings.c", 
   "(svn_fs_base__rep_deltify): Use svn_txdelta_to_svndiff2.", 
   "* subversion/libsvn_fs_base/fs.c", 
   "(base_create): Default to newer format version.", 
   "If SVN_FS_CONFIG_FS_NO_SVNDIFF1 is set in the config opts,", 
   "use older format.", 
   "(check_format):  Support both format 1 and 2.", 
   "* subversion/libsvn_fs_base/fs.h", 
   "(SVN_FS_BASE__FORMAT_NUMBER): Bump to 2", 
   "(SVN_FS_BASE__MIN_SVNDIFF1_FORMAT): Set to 2.", 
   "* subversion/libsvn_fs_base/util/fs_skels.c", 
   "(is_valid_rep_delta_chunk_skel): Version 1 is valid.", 
   "* subversion/svnadmin/main.c", 
   "(svnadmin__no_svndiff1): Add option.", 
   "(options): Add \"no-svndiff1\" option.", 
   "(cmd_table): Add svnadmin_no__svndiff1 to create command.", 
   "(struct svnadmin_opt_state): Add no_svndiff1", 
   "(subcommand_create): Set SVN_FS_CONFIG_NO_SVNDIFF1 in the hash if", 
   "approriate.", 
   "(main): Set no_svndiff1 if requested.", 
   "* subversion/include/svn_error_codes.h: Add", 
   "SVN_ERR_SVNDIFF_INVALID_COMPRESSED_DATA", 
   "* subversion/include/svn_fs.h: Add SVN_FS_CONFIG_NO_SVNDIFF1.", 
   "* subversion/include/svn_ra_svn.h: Add SVN_RA_SVN_CAP_SVNDIFF1.", 
   "* subversion/include/svn_delta.h: Add svn_txdelta_to_svndiff2.", 
   "* subversion/mod_dav_svn/dav_svn.h", 
   "(struct dav_resource_private): Add svndiff_version", 
   "* subversion/mod_dav_svn/file_revs.c", 
   "(struct file_rev_baton): Add svndiff_version", 
   "(file_rev_handler): Use svndiff version set in baton.", 
   "(dav_svn__file_revs_report): Get svndiff_version from private info.", 
   "* subversion/mod_dav_svn/update.c", 
   "(update_ctx_t): Add svndiff_version.", 
   "(upd_apply_textdelta): Use svndiff version set in baton.", 
   "(dav_svn__update_report): Get svndiff_version from private info.", 
   "* subversion/mod_dav_svn/repos.c:  Include apr_lib.h", 
   "(accept_rec): New struct.", 
   "(get_entry): New function.", 
   "(do_header_Line): New function.", 
   "(sort_encoding_pref): New function.", 
   "(svn_dav__negotiate_encoding_prefs): New function.", 
   "(dav_svn__get_resource): Negotiate encoding preferences.", 
   "(dav_svn_deliver): Use svndiff1 if possible.", 
   "* subversion/tests/libsvn_delta/svndiff-test.c", 
   "(main): Add optional version argument.", 
   "Use svn_txdelta_to_svndiff2.", 
   "* subversion/testes/libsvn_delta/random-test.c", 
   "(random_test): Use svn_txdelta_to_svndiff2 and version 1 diffs.", 
   "* subversion/libsvn_repos/dump.c", 
   "(store_delta): Ditto.", 
   "* subversion/libsvn_ra_svn/client.c", 
   "(auth_response): Transmit svndiff1 capability.", 
   "(open_session): Ditto.", 
   "* subversion/libsvn_ra_svn/protocol: Document svndiff1 capability.", 
   "* subversion/libsvn_ra_svn/editor.c,", 
   "subversion/libsvn_ra_svn/editorp.c", 
   "(ra_svn_apply_textdelta): Use svn_txdelta_to_svndiff2, and use svndiff1", 
   "if supported.", 
   "* subversion/libsvn_delta/svndiff.c: Include zlib.h", 
   "(MIN_COMPRESS_SIZE): New macro.", 
   "(SVNDIFF1_COMPRESS_LEVEL): New macro.", 
   "(struct encoder_baton): Add version.", 
   "(zlib_encode): New function.", 
   "(window_handler): Add ability to produce svndiff1.", 
   "(svn_txdelta_to_svndiff2): New function.", 
   "(svn_txdelta_to_svndiff): Init version to zero.", 
   "(struct decode_baton): Add version.", 
   "(zlib_decode): New function.", 
   "(decode_window): Handle decoding svndiff1.", 
   "(write_handler): Ditto.", 
   "(read_window_header): Add version argment.", 
   "(svn_txdelta_read_svndiff_window): Pass version to decode_window.", 
   "(svn_txdelta_skip_svndiff_window): Ditto.", 
   "* subversion/libsvn_ra_dav/file_revs.c", 
   "(svn_ra_dav__get_file_revs): Set Accept-Encoding header", 
   "to specify svndiff1 as acceptable.", 
   "* subversion/libsvn_ra_dav/fetch.c", 
   "(reporter_finish_report): Set Accept-Encoding header", 
   "to specify svndiff1 as acceptable.", 
   "* subversion/svnserve/serve.c", 
   "(serve): Write out svndiff1 capability.", 
   "* subversion/libsvn_fs/fs_fs.c", 
   "(check_format): Support both format 1 and 2.", 
   "(rep_write_get_baton): Use svn_txdelta_to_svndiff2, and version 1.", 
   "(svn_fs_fs__create): Default to newer format version.", 
   "If SVN_FS_CONFIG_FS_NO_SVNDIFF1 is set in the config opts,", 
   "use older format.", 
   "* subversion/libsvn_fs_fs/fs.h", 
   "(SVN_FS_FS__FORMAT_NUMBER): Bump to 2.", 
   "(SVN_FS_FS__MIN_SVNDIFF1_FORMAT): Set to 2."
  ], 
  "revision_id": "858437"
 }, 
 {
  "author": "jerenkrantz", 
  "date": "2006-02-07T00:16:35.948971Z", 
  "msg": [
   "ra_serf: First cut at allowing an out-of-date WC to be updated to HEAD.", 
   "(additions and modifications work, but not deletions yet.)", 
   "* subversion/libsvn_ra_serf/serf.c", 
   "(svn_ra_serf__open): Store our WC callbacks.", 
   "* subversion/libsvn_ra_serf/ra_serf.h", 
   "(ra_serf_session_t): Add WC callback fields", 
   "(RA_SERF_WC_NAMESPACE, RA_SERF_WC_ACTIVITY_URL, RA_SERF_WC_CHECKED_IN_URL):", 
   "define some WC props to match ra_dav so we can have WC compatibility.", 
   "* subversion/libsvn_ra_serf/update.c", 
   "(report_state_e): Add OPEN_FILE state.", 
   "(report_context_t): Move the base revision field to...", 
   "(report_info_t): here; as it is for each file/dir.", 
   "(report_fetch_t): Add two parameters to allow us to conditionally handle", 
   "svndiff responses.", 
   "(push_state): Differentiate between the first OPEN_DIR (root) and subsequent", 
   "ones; support OPEN_FILE", 
   "(set_baton_props): Add in the special delta-base prop so we can fetch it", 
   "later if we need to do an update.  (ra_dav already does this.)", 
   "(handle_fetch): Based upon the content-type, parse data to the svndiff", 
   "parser; walk over the properties for our name (usually included in the", 
   "base report)", 
   "(delta_file): New function to tell the server we already have an older", 
   "version of this file.", 
   "(fetch_file): Use create_serf_req helper.", 
   "(start_report): Simplify some of the conditionals; support the second", 
   "invocation of 'open-directory' (when we're not the root); support", 
   "'open-file' response; flop OPEN_DIR/ADD_DIR child with OPEN_FILE/ADD_FILE", 
   "branches (diff won't handle this switch well); abort() if we see an unknown", 
   "tag rather than doing something stupid for now.", 
   "(end_report): Simplify some conditionals; support OPEN_FILE state", 
   "(close_dir): walk over the properties for our name too", 
   "(svn_ra_serf__do_update): Set ->state to be NULL."
  ], 
  "revision_id": "858436"
 }
]