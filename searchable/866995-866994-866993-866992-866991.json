[
 {
  "author": "epg", 
  "date": "2007-10-03T23:45:36.122379Z", 
  "msg": [
   "Follow-up to r26920: update JavaHL.", 
   "* subversion/bindings/javahl/native/ConflictResolverCallback.cpp", 
   "* subversion/bindings/javahl/src/org/tigris/subversion/javahl/ConflictResolverCallback.java", 
   "Update for the rename of repos/user identifiers to their/mine.", 
   "Patch by: dlr"
  ], 
  "revision_id": "866995"
 }, 
 {
  "author": "epg", 
  "date": "2007-10-03T23:44:00.272744Z", 
  "msg": [
   "Resolve issue 2946: --accept does not match conflict handling prompt.", 
   "* subversion/include/svn_client.h", 
   "(svn_client_resolved2): Replace svn_accept_t argument with", 
   "svn_wc_conflict_result_t.", 
   "* subversion/include/svn_types.h", 
   "(svn_accept_t, svn_accept_from_word): Remove.", 
   "* subversion/include/svn_wc.h", 
   "(svn_wc_conflict_description_t): Rename repos_file to their_file and", 
   "user_file to my_file.", 
   "(svn_wc_conflict_result_t): Rename svn_wc_conflict_result_choose_repos to", 
   "svn_wc_conflict_result_choose_theirs and", 
   "svn_wc_conflict_result_choose_user to", 
   "svn_wc_conflict_result_choose_mine.", 
   "(svn_wc_resolved_conflict3): Replace svn_accept_t argument with", 
   "svn_wc_conflict_result_t.", 
   "* subversion/libsvn_client/resolved.c", 
   "(svn_client_resolved, svn_client_resolved2): Adapt.", 
   "* subversion/libsvn_subr/kitchensink.c", 
   "(svn_accept_from_word): Remove.", 
   "* subversion/libsvn_wc/adm_crawler.c", 
   "(restore_file): Adapt to svn_wc_resolved_conflict3 changes.", 
   "* subversion/libsvn_wc/adm_ops.c", 
   "(resolve_conflict_on_entry, struct resolve_callback_baton): Replace", 
   "svn_accept_t argument with svn_wc_conflict_result_t.", 
   "(resolve_found_entry_callback, svn_wc_resolved_conflict2,", 
   "svn_wc_resolved_conflict3): Adapt.", 
   "* subversion/libsvn_wc/merge.c", 
   "(svn_wc__merge_internal): Adapt to svn_wc_conflict_description_t changes.", 
   "* subversion/tests/cmdline/basic_tests.py", 
   "(automatic_conflict_resolution): Adapt.", 
   "* subversion/tests/cmdline/svneditor.py", 
   "(main): Work as the merge tool as well.", 
   "* subversion/tests/cmdline/svntest/main.py", 
   "(use_editor): Also set SVN_MERGE to svneditor_script.", 
   "* subversion/tests/cmdline/update_tests.py", 
   "(update_accept_conflicts): Add test for update --accept options.", 
   "* subversion/svn/cl.h", 
   "(svn_cl__accept_t): New enumerated type, based on old svn_accept_t but", 
   "with values matching the interactive callback prompt.", 
   "(svn_cl__opt_state_t): Change accept_which to svn_cl__accept_t.", 
   "(svn_cl__conflict_baton_t): Add type for svn_cl__conflict_handler baton.", 
   "(svn_cl__conflict_baton_new, svn_cl__accept_from_word): Declare.", 
   "(svn_cl__conflict_handler): Rename from svn_cl__interactive_conflict_handler.", 
   "(svn_cl__merge_file_externally): Rename repos_path and user_path to", 
   "their_path and my_path.", 
   "* subversion/svn/conflict-callbacks.c", 
   "(svn_cl__conflict_baton_new): Add svn_cl__conflict_baton_t constructor.", 
   "(svn_cl__accept_from_word): Adapted from old svn_accept_from_word.", 
   "(print_conflict_description): Adapt to svn_wc_resolved_conflict3 changes.", 
   "(svn_cl__conflict_handler): Rename from svn_cl__interactive_conflict_handler.", 
   "Resolve conflicts based on --accept option if given, else by prompting.", 
   "Use function-scoped svn_error_t *err rather than declaring one in many", 
   "different places.", 
   "* subversion/svn/main.c", 
   "(svn_cl__option): Adapt help text for --accept option.", 
   "(svn_cl__cmd_table): Use specific --accept help text for resolved, which", 
   "does not accept all --accept actions.  Add --accept for checkout, merge,", 
   "and update.", 
   "(main): Initialize opt_state.accept_which to svn_cl__accept_invalid..  Setup", 
   "ctx->conflict_func based on the intersection of the interactive-conflicts", 
   "config option, --accept option, and --non-interactive option.", 
   "* subversion/svn/resolved-cmd.c", 
   "(svn_cl__resolved): Turn some --accept actions into the appropriate", 
   "svn_wc_conflict_result_t value to pass to svn_client_resolved2; return", 
   "an error for the rest.", 
   "* subversion/svn/util.c", 
   "(svn_cl__merge_file_externally): Rename repos_path and user_path to", 
   "their_path and my_path."
  ], 
  "revision_id": "866994"
 }, 
 {
  "author": "dlr", 
  "date": "2007-10-03T23:26:39.141328Z", 
  "msg": [
   "Change a prompt so that all parentheses that get closed get opened.", 
   "This is consistent with the style used in the new conflict resolution UI.", 
   "* subversion/svn/util.c", 
   "(svn_cl__get_log_message): Change the prompt so that the parentheses are", 
   "balanced.", 
   "Patch by: Augie Fackler <durin42@gmail.com>"
  ], 
  "revision_id": "866993"
 }, 
 {
  "author": "kfogel", 
  "date": "2007-10-03T23:21:06.707076Z", 
  "msg": [
   "Follow up to r26916 with a human-readability correction to the test data.", 
   "* subversion/tests/cmdline/log_tests_data/xml-invalid-chars.dump:", 
   "That's 2 good chars, not 3.  D'oh!", 
   "* subversion/tests/cmdline/log_tests.py", 
   "(log_xml_with_bad_data): Adjust accordingly."
  ], 
  "revision_id": "866992"
 }, 
 {
  "author": "dlr", 
  "date": "2007-10-03T23:11:11.647664Z", 
  "msg": [
   "Set output buffering mode early during command-line initialization processing.", 
   "* subversion/include/svn_cmdline.h", 
   "(svn_cmdline_init): Indicate that stdout and ERROR_STREAM will have", 
   "their buffering mode changed to line-based and unbuffered", 
   "(character-based, really), respectively.", 
   "* subversion/libsvn_subr/cmdline.c", 
   "Bump copyright date.  Include stdio.h.", 
   "(svn_cmdline_init): Call setvbuf() on stdout and ERROR_STREAM (which", 
   "is typically stderr).", 
   "Suggested by: epg", 
   "jrepenning", 
   "Reviewed by: epg", 
   "sussman"
  ], 
  "revision_id": "866991"
 }
]