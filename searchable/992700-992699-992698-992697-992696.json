[
 {
  "author": "dblevins", 
  "date": "2010-09-04T23:17:41.081281Z", 
  "msg": [
   "trimming the repo list down a bit"
  ], 
  "revision_id": "992700"
 }, 
 {
  "author": "fdmanana", 
  "date": "2010-09-04T23:17:11.142594Z", 
  "msg": [
   "New replicator: fix generation of OAuth authorization headers."
  ], 
  "revision_id": "992699"
 }, 
 {
  "author": "jukka", 
  "date": "2010-09-04T22:59:46.438472Z", 
  "msg": [
   "TIKA-416: Out-of-process text extraction", 
   "Move the OutOfProcess classes to a separate org.apache.tika.fork package as they'll be needing a bit more supporting code"
  ], 
  "revision_id": "992698"
 }, 
 {
  "author": "luc", 
  "date": "2010-09-04T22:59:21.190790Z", 
  "msg": [
   "added the dfp library", 
   "The Dfp class represent the high precision numbers, it implements our existing Field interface and hence each instance is associated with a DfpField that provides the constants at the required precision as well as factory methods. This allowed to remove the compile-time constraint in the library. Users can even use at the same time a field for 20 decimals digits precision and another field for 100 digits precision. Dfp instances with different precision CANNOT be mixed in the same computation (doing so creates a NaN). A few utility methods have been added, like constructors from integral types, isInfinite and isNaN methods, equal has been renames to equals and its signature changed to match the general Object method (a hashcode method has been added too).", 
   "JIRA: MATH-412"
  ], 
  "revision_id": "992697"
 }, 
 {
  "author": "luc", 
  "date": "2010-09-04T22:57:31.215078Z", 
  "msg": [
   "added the dfp library", 
   "The Dfp class represent the high precision numbers, it implements our existing Field interface and hence each instance is associated with a DfpField that provides the constants at the required precision as well as factory methods. This allowed to remove the compile-time constraint in the library. Users can even use at the same time a field for 20 decimals digits precision and another field for 100 digits precision. Dfp instances with different precision CANNOT be mixed in the same computation (doing so creates a NaN). A few utility methods have been added, like constructors from integral types, isInfinite and isNaN methods, equal has been renames to equals and its signature changed to match the general Object method (a hashcode method has been added too).", 
   "JIRA: MATH-412"
  ], 
  "revision_id": "992696"
 }
]