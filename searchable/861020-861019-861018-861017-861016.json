[
 {
  "author": "maxb", 
  "date": "2006-08-03T12:18:32.967113Z", 
  "msg": [
   "mod_dav_svn: A huge bunch more removal of unnecessary dav_svn_ namespace", 
   "qualifiers and application of double-underscore policy, and related minor", 
   "tweaks.", 
   "* subversion/mod_dav_svn/mod_dav_svn.c", 
   "(struct server_conf_t): New name for struct dav_svn_server_conf.", 
   "(enum conf_flag): New name form enu dav_svn_flag.", 
   "(CONF_FLAG_DEFAULT, CONF_FLAG_ON, CONF_FLAG_OFF): New names for enums", 
   "DAV_SVN_FLAG_DEFAULT, DAV_SVN_FLAG_ON, and DAV_SVN_FLAG_OFF respectively.", 
   "(enum dir_conf_t): New name for enum dav_svn_dir_conf.", 
   "(init): New name for dav_svn_init.", 
   "(create_server_config): New name for dav_svn_create_server_config.", 
   "(merge_server_config): New name for dav_svn_merge_server_config.", 
   "(create_dir_config): New name for dav_svn_create_dir_config.", 
   "(merge_dir_config): New name for dav_svn_merge_dir_config.", 
   "(SVNReposName_cmd): New name for dav_svn_repo_name.", 
   "(SVNIndexXSLT_cmd): New name for dav_svn_xslt_uri.", 
   "(SVNAutoversioning_cmd): New name for dav_svn_autoversioning_cmd.", 
   "(SVNPathAuthz_cmd): New name for dav_svn_pathauthz_cmd.", 
   "(SVNListParentPath_cmd): New name for dav_svn_list_parentpath_cmd.", 
   "(SVNPath_cmd): New name for dav_svn_path_cmd.", 
   "(SVNParentPath_cmd): New name for dav_svn_parent_path_cmd.", 
   "(SVNSpecialURI_cmd): New name for dav_svn_special_uri_cmd.", 
   "(dav_svn__get_fs_path): New name for dav_svn_get_fs_path.", 
   "(dav_svn__get_fs_parent_path): New name for dav_svn_get_fs_parent_path.", 
   "(dav_svn__get_repo_name): New name for dav_svn_get_repo_name.", 
   "(dav_svn__get_xslt_uri): New name for dav_svn_get_xslt_uri.", 
   "(dav_svn__get_special_uri): New name for dav_svn_get_special_uri.", 
   "(dav_svn__get_pathauthz_flag): New name for dav_svn_get_pathauthz_flag.", 
   "(dav_svn__get_autoversioning_flag): New name for", 
   "dav_svn_get_autoversioning_flag.", 
   "(dav_svn__get_list_parentpath_flag): New name for", 
   "dav_svn_get_list_parentpath_flag.", 
   "(cmds): New name for dav_svn_cmds.", 
   "(provider): New name for dav_svn_provider.", 
   "* subversion/mod_dav_svn/deadprops.c", 
   "(db_open): New name for dav_svn_db_open.", 
   "(db_close): New name for dav_svn_db_close.", 
   "(db_define_namespaces): New name for dav_svn_db_define_namespaces.", 
   "(db_output_value): New name for dav_svn_db_output_value.", 
   "(db_map_namespaces): New name for dav_svn_db_map_namespaces.", 
   "(db_store): New name for dav_svn_db_store.", 
   "(db_remove): New name for dav_svn_db_remove.", 
   "(db_exists): New name for dav_svn_db_exists.", 
   "(db_first_name): New name for dav_svn_db_first_name.", 
   "(db_next_name): New name for dav_svn_db_next_name.", 
   "(db_get_rollback): New name for dav_svn_db_get_rollback.", 
   "(db_apply_rollback): New name for dav_svn_db_apply_rollback.", 
   "(dav_svn__hooks_propdb): New name for dav_svn_hooks_propdb.", 
   "* subversion/mod_dav_svn/liveprops.c", 
   "(namespace_uris): New name for dav_svn_namespace_uris.", 
   "(NAMESPACE_URI_DAV, NAMESPACE_URI): New names for enums", 
   "DAV_SVN_NAMESPACE_URI_DAV and DAV_SVN_NAMESPACE_URI, respectively.", 
   "(props): New name for dav_svn_props.", 
   "(get_path_revprop): New name for dav_svn_get_path_revprop.", 
   "(get_last_modified_time): New name for dav_svn_get_last_modified_time.", 
   "(insert_prop): New name for dav_svn_insert_prop.", 
   "(is_writable): New name for dav_svn_is_writable.", 
   "(patch_validate): New name for dav_svn_patch_validate.", 
   "(patch_exec): New name for dav_svn_patch_exec.", 
   "(patch_commit): New name for dav_svn_patch_commit.", 
   "(patch_rollback): New name for dav_svn_patch_rollback.", 
   "(static): New name for static.", 
   "(dav_liveprop_group): New name for dav_liveprop_group.", 
   "(dav_svn__gather_propsets): New name for dav_svn_gather_propsets.", 
   "(dav_svn__find_liveprop): New name for dav_svn_find_liveprop.", 
   "(dav_svn__insert_all_liveprops): New name for dav_svn_insert_all_liveprops.", 
   "* subversion/mod_dav_svn/version.c", 
   "(dav_report_elem): New name for dav_report_elem.", 
   "(dav_svn__attach_auto_revprops): New name for dav_svn_attach_auto_revprops.", 
   "(get_vsn_options): New name for dav_svn_get_vsn_options.", 
   "(get_option): New name for dav_svn_get_option.", 
   "(versionable): New name for dav_svn_versionable.", 
   "(auto_versionable): New name for dav_svn_auto_versionable.", 
   "(vsn_control): New name for dav_svn_vsn_control.", 
   "(dav_svn__checkout): New name for dav_svn_checkout.", 
   "(uncheckout): New name for dav_svn_uncheckout.", 
   "(dav_svn__checkin): New name for dav_svn_checkin.", 
   "(avail_reports): New name for dav_svn_avail_reports.", 
   "(report_label_header_allowed): New name for", 
   "dav_svn_report_label_header_allowed.", 
   "(deliver_report): New name for dav_svn_deliver_report.", 
   "(can_be_activity): New name for dav_svn_can_be_activity.", 
   "(make_activity): New name for dav_svn_make_activity.", 
   "(merge): New name for dav_svn_merge.", 
   "(dav_svn__hooks_vsn): New name for dav_svn_hooks_vsn.", 
   "* subversion/mod_dav_svn/lock.c", 
   "(get_supportedlock): New name for dav_svn_get_supportedlock.", 
   "(parse_locktoken): New name for dav_svn_parse_locktoken.", 
   "(format_locktoken): New name for dav_svn_format_locktoken.", 
   "(compare_locktoken): New name for dav_svn_compare_locktoken.", 
   "(open_lockdb): New name for dav_svn_open_lockdb.", 
   "(close_lockdb): New name for dav_svn_close_lockdb.", 
   "(remove_locknull_state): New name for dav_svn_remove_locknull_state.", 
   "(create_lock): New name for dav_svn_create_lock.", 
   "(get_locks): New name for dav_svn_get_locks.", 
   "(find_lock): New name for dav_svn_find_lock.", 
   "(has_locks): New name for dav_svn_has_locks.", 
   "(append_locks): New name for dav_svn_append_locks.", 
   "(remove_lock): New name for dav_svn_remove_lock.", 
   "(refresh_locks): New name for dav_svn_refresh_locks.", 
   "(dav_svn__hooks_locks): New name for dav_svn_hooks_locks.", 
   "* subversion/mod_dav_svn/dav_svn.h: Adjust declarations for above.", 
   "* subversion/mod_dav_svn/repos.c: Adjust callers for above, and...", 
   "(dav_svn__hooks_repository): New name for dav_svn_hooks_repos.", 
   "* subversion/mod_dav_svn/authz.c: Adjust callers for above."
  ], 
  "revision_id": "861020"
 }, 
 {
  "author": "pburba", 
  "date": "2006-08-03T11:46:34.457020Z", 
  "msg": [
   "Support --force option with svn checkout, update, and switch.", 
   "With the force option, co, sw, and up now tolerate unversioned", 
   "obstructing paths when adding new paths of the same type, rather than", 
   "generating a SVN_ERR_WC_OBSTRUCTED_UPDATE error.", 
   "If the obstructing path is the same type (file or directory) as the", 
   "corresponding path in the repository it will be left 'as-is' in the", 
   "working copy.  For directories this simply means the obstruction is", 
   "tolerated.  For files, any content differences between the obstruction", 
   "and the repository are treated like a local modification to the", 
   "working copy.", 
   "This patch is an expansion of one originally posted by Jonathan Gilbert", 
   "<o2w9gs702@sneakemail.com> against the 1.2.0 tag.  See the various", 
   "\"Takeover\" threads on the dev mailing list.", 
   "* build.conf", 
   "(test-scripts): Add checkout_tests.py.", 
   "* subversion/include/svn_client.h", 
   "(svn_client_checkout3, svn_client_update3,", 
   "svn_client_switch2): New.", 
   "(svn_client_checkout2, svn_client_update2,", 
   "svn_client_switch): Deprecate.", 
   "* subversion/include/svn_wc.h", 
   "(svn_wc_notify_action_t): New 'Exists' action.", 
   "(svn_wc_get_update_editor3, svn_wc_text_modified_p2,", 
   "svn_wc_get_switch_editor3): New.", 
   "(svn_wc_get_update_editor2, svn_wc_text_modified_p,", 
   "svn_wc_get_switch_editor2): Deprecate.", 
   "* subversion/libsvn_client/checkout.c", 
   "(svn_client__checkout_internal): New argument.  Update calls to", 
   "svn_client__update_internal.", 
   "(svn_client_checkout3): New.", 
   "(svn_client_checkout2, svn_client_checkout): Update calls to", 
   "svn_client__checkout_internal.", 
   "* subversion/libsvn_client/client.h", 
   "(svn_client__update_internal, svn_client__checkout_internal,", 
   "svn_client__switch_internal): New bool argument to identify updates,", 
   "checkouts, and switches, respectively, made with --force option.", 
   "* subversion/libsvn_client/copy.c", 
   "(repos_to_wc_copy): Update call to svn_client__checkout_internal.", 
   "* subversion/libsvn_client/externals.c", 
   "(switch_external): Update calls to svn_client__checkout_internal,", 
   "svn_client__update_internal, and svn_client__switch_internal.", 
   "(handle_external_item_change): Update call to", 
   "svn_client__checkout_internal.", 
   "* subversion/libsvn_client/switch.c", 
   "(svn_client__switch_internal): New argument.  Replace call to", 
   "svn_wc_get_switch_editor2 with svn_wc_get_switch_editor3.", 
   "(svn_client_switch2): New.", 
   "(svn_client_switch): Update call to svn_client__switch_internal.", 
   "* subversion/libsvn_client/update.c", 
   "(svn_client__update_internal): New argument. Replace call to", 
   "svn_wc_get_update_editor2 with svn_wc_get_update_editor3.", 
   "(svn_client_update3): New.", 
   "(svn_client_update2): Reimplement as wrapper around", 
   "svn_client_update3.", 
   "(svn_client_update): Update call to svn_client__update_internal.", 
   "* subversion/libsvn_wc/adm_ops.c", 
   "(revert_admin_things): Update call to", 
   "svn_wc__text_modified_internal_p.", 
   "* subversion/libsvn_client/commit_util.c (harvest_committables):", 
   "* subversion/libsvn_wc/diff.c (file_diff, close_file):", 
   "* subversion/libsvn_wc/log.c (svn_wc_cleanup2):", 
   "* subversion/libsvn_wc/status.c (assemble_status):", 
   "Replace calls to svn_wc_text_modified_p with svn_wc_text_modified_p2.", 
   "* subversion/libsvn_wc/props.c", 
   "(svn_wc_prop_set2): Update comment.", 
   "* subversion/libsvn_wc/questions.c", 
   "(svn_wc__text_modified_internal_p): New arg.  Update call to", 
   "svn_wc__text_base_path.", 
   "(svn_wc_text_modified_p2): New.  Update comment.", 
   "(svn_wc_text_modified_p): Reimplement as wrapper around", 
   "svn_wc_text_modified_p2", 
   "* subversion/libsvn_wc/update_editor.c", 
   "(struct edit_baton): New member allow_unver_obstructions.", 
   "(struct file_baton): New member existed.", 
   "(make_file_baton): Initialize new file_baton member.", 
   "(add_directory): Allow obstructing directories if edit baton", 
   "permits them.  Support notification for adding directories which", 
   "already 'E'xist.", 
   "(add_or_open_file): Allow obstructing files if edit baton", 
   "permits them.", 
   "(change_file_prop): Cache the last-changed-date propval for", 
   "obstructing files.", 
   "(merge_file): New argument to identify when obstructions are", 
   "allowed.  Handle the various obstruction scenarios.", 
   "(close_file): Update call to merge_file.  Support notification for", 
   "adding files which already 'E'xist.", 
   "(make_editor): New argument to identify when obstructions are", 
   "allowed.  Initialize new edit baton member.", 
   "(svn_wc_get_update_editor3) New.", 
   "(svn_wc_get_update_editor, svn_wc_get_update_editor2): Reimplement", 
   "as wrappers around svn_wc_get_update_editor3.", 
   "(svn_wc_get_switch_editor3): New.", 
   "(svn_wc_get_switch_editor, svn_wc_get_switch_editor2): Reimplement", 
   "as wrappers around svn_wc_get_switch_editor3.", 
   "* subversion/libsvn_wc/wc.h", 
   "(svn_wc__text_modified_internal_p): New arg to select comparison", 
   "against normal text base or temporary text base.", 
   "* subversion/svn/checkout-cmd.c", 
   "(svn_cl__checkout): Replace call to svn_wc_get_update_editor2 with", 
   "svn_wc_get_update_editor3.", 
   "* subversion/svn/main.c", 
   "(svn_cl__cmd_table): Enable --force option with svn co, up, and sw.", 
   "Add new help text for each.", 
   "* subversion/svn/notify.c", 
   "(notify): Handle new 'Existed' action.", 
   "* subversion/svn/switch-cmd.c", 
   "(svn_cl__switch): Replace call to svn_client_switch with", 
   "svn_client_switch2.", 
   "* subversion/svn/update-cmd.c", 
   "(svn_cl__update): Replace call to svn_client_update2 with", 
   "svn_client_update3.", 
   "* subversion/tests/cmdline/checkout_tests.py: New.", 
   "* subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout", 
   "Update to reflect new svn switch help text.", 
   "* subversion/tests/cmdline/svntest/actions.py", 
   "(run_and_verify_checkout): Support optional arguments.  Don't delete", 
   "WC target during forced checkouts.", 
   "* subversion/tests/cmdline/svntest/main.py", 
   "(run_and_verify_switch): Support optional arguments and regular", 
   "expression error checking.", 
   "* subversion/tests/cmdline/svntest/tree.py", 
   "(build_tree_from_checkout): Enable parsing of 'E' notification.", 
   "* subversion/tests/cmdline/switch_tests.py", 
   "(forced_switch, forced_switch_failures): New test definitions.", 
   "(test_list): Run new tests.", 
   "* subversion/tests/cmdline/update_tests.py", 
   "(forced_update, forced_update_failures): New test definitions.", 
   "(test_list): Run new tests."
  ], 
  "revision_id": "861019"
 }, 
 {
  "author": "jpieper", 
  "date": "2006-08-03T10:10:31.040161Z", 
  "msg": [
   "* COMMITTERS: Update my email address."
  ], 
  "revision_id": "861018"
 }, 
 {
  "author": "nori", 
  "date": "2006-08-03T07:39:50.625782Z", 
  "msg": [
   "* STATUS (r20938, r20939): Vote."
  ], 
  "revision_id": "861017"
 }, 
 {
  "author": "nori", 
  "date": "2006-08-03T06:42:02.559247Z", 
  "msg": [
   "Japanese translation updates.", 
   "* subversion/po/ja.po: Update translation against r20941 by working on", 
   "untranslated/fuzzy entries added at r20928:20941.", 
   "Now ja.po has 1484 translated messages against r20941 (Emacs PO-mode", 
   "status: \"1485t+234o\")."
  ], 
  "revision_id": "861016"
 }
]