[
 {
  "author": "sussman", 
  "date": "2005-03-18T23:13:05.704274Z", 
  "msg": [
   "Locking branch:  finalize our (minimal) support for lock-nulls.", 
   "--> Allow generic DAV clients to LOCK/PROPFIND/UNLOCK nonexistent urls.", 
   "--> Allow 'svn unlock' to remove a lock on a nonexistent url.", 
   "--> Don't allow svn clients to 'svn lock' nonexistent urls, nor", 
   "lock schedule-add paths.", 
   "* subversion/mod_dav_svn/liveprops.c", 
   "(dav_svn_insert_prop):  return the VCC and baseline-relative-path", 
   "props even on lock-null resources, so that svn_ra_get_lock()", 
   "still works on them.  Needed by 'svn unlock lock-null-URL'.", 
   "* subversion/mod_dav_svn/repos.c", 
   "(dav_svn_prep_regular): work around a shortcoming in mod_dav,", 
   "whereby it uses (r->path_info == \"\") to detect lock-null", 
   "resources.  Without this, neither DAV clients nor svn clients can", 
   "do a PROPFIND on a lock-null and see the lock details.  Oy, an", 
   "issue will be filed on this.", 
   "* subversion/include/svn_fs.h:  note that libsvn_fs allows locks on", 
   "non-existent paths, but that we don't expose that feature to svn", 
   "clients.", 
   "* subversion/include/svn_repos.h", 
   "(svn_repos_fs_lock, svn_repos_fs_attach_lock):", 
   "take new 'allow_nonexistent' boolean args.", 
   "* subversion/libsvn_repos/fs-wrap.c", 
   "(svn_repos_fs_lock, svn_repos_fs_attach_lock): possibly check for", 
   "path's existence before locking.", 
   "* subversion/libsvn_ra_local/ra_plugin.c", 
   "(svn_ra_local__lock):  update caller of svn_repos_fs_lock().", 
   "disallow locks on nonexistent urls.", 
   "* subversion/svnserve/serve.c", 
   "(lock):  update caller of svn_repos_fs_lock().", 
   "disallow locks on nonexistent urls.", 
   "* subversion/mod_dav_svn/lock.c", 
   "(dav_svn_append_locks, dav_svn_refresh_locks): update callers of", 
   "svn_repos_fs_attach_lock().  Don't allow svn clients to create", 
   "non-existent locks, but allow other DAV clients to do so.", 
   "* subversion/include/svn_error_codes.h", 
   "(SVN_ERR_CLIENT_LOCK_NOT_ALLOWED):  new errorcode.", 
   "* subversion/libsvn_client/locking_commands.c", 
   "(svn_client_lock):  disallow locking of schedule-add path.", 
   "* subversion/libsvn_repos/hooks.c", 
   "(array_join):  fix compiler warning while we're here."
  ], 
  "revision_id": "853555"
 }, 
 {
  "author": "lundblad", 
  "date": "2005-03-18T22:33:56.536106Z", 
  "msg": [
   "Rework the notification APIs to be more <buzzword>extensible</buzzword>.", 
   "This is part 1, which changes libsvn_wc and the client context.", 
   "The next part will switch libsvn_client and the cmdline client.", 
   "* subversion/include/svn_wc.h (svn_wc_notify_t, svn_wc_notify_func2_t): New", 
   "typedefs.", 
   "(svn_wc_create_notify): New function.", 
   "(svn_wc_notify_func_t): Deprecate.", 
   "(svn_wc_copy, svn_wc_delete, svn_wc_add, svn_wc_crawl_revisions,", 
   "svn_wc_get_update_editor, svn_wc_get_switch_editor, svn_wc_revert):", 
   "Deprecate.", 
   "(svn_wc_copy2, svn_wc_delete2, svn_wc_add2, svn_wc_get_update_editor2,", 
   "svn_wc_crawl_revisions2, svn_wc_get_switch_editor2, svn_wc_revert2):", 
   "New functions.", 
   "(svn_wc_resolved_conflict2): Change notify function to new type.", 
   "(svn_wc_resolved_conflict): Note new difference in docstring.", 
   "* subversion/include/svn_client.h (svn_client_ctx_t): Add notify_func2 and", 
   "notify_baton2 fields, deprecate notify_func and notify_baton.", 
   "* subversion/libsvn_wc/adm_ops.h (svn_wc__do_update_cleanup): Change to new", 
   "notify func type.", 
   "* subversion/libsvn_wc/adm_crawler.c (report_revisions): Change to new notify", 
   "API.", 
   "(svn_wc_crawl_revisions2): Copy from function below, but use new notify API.", 
   "(svn_wc_crawl_revisions): Call new API wrapping the notify function/baton.", 
   "* subversion/libsvn_wc/util.c (svn_wc__compat_call_notify_func,", 
   "svn_wc_create_notify): New functions.", 
   "* subversion/libsvn_wc/wc.h (svn_wc__compat_call_notify_func): New function.", 
   "(svn_wc__compat_notify_baton_t): New struct.", 
   "* subversion/libsvn_wc/adm_ops.c (svn_wc__do_update_cleanup,", 
   "svn_wc_resolved_conflict, svn_wc_resolved_conflict2,", 
   "resolve_conflict_on_entry, mark_tree): Use new notify API.", 
   "(resolve_callback_baton): Change notify_func to new type.", 
   "(svn_wc_add, svn_wc_delete, svn_wc_revert): Wrap the corresponding new", 
   "function.", 
   "(svn_wc_add2, svn_wc_delete2, svn_wc_revert2): New.  Copied from the", 
   "corresponding deprecated function; use new notify API.", 
   "* subversion/libsvn_wc/copy.c (svn_wc_copy): Wrap svn_wc_copy2.", 
   "(svn_wc_copy2): New function, copied from svn_wc_copy; use new notify", 
   "API.", 
   "(copy_file_administratively, copy_dir_administratively): Use new notify API.", 
   "* subversion/libsvn_wc/update_editor.c (svn_wc_get_update_editor,", 
   "svn_wc_get_switch_editor): Wrap the corresponding function below.", 
   "(svn_wc_get_update_editor2, svn_wc_get_switch_editor2): New, copied from", 
   "the corresponding function above.  Use new notify API.", 
   "(struct edit_baton): Change to new notify function type.", 
   "(complete_directory, do_entry_deletion, add_directory, close_directory,", 
   "close_file): Use new notify API.", 
   "* subversion/libsvn_client/resolved.c (svn_client_resolved): Use new notify", 
   "API.", 
   "* subversion/libsvn_client/ctx.c (call_notify_func): New function.", 
   "(svn_client_create_context): Initialize notify_func2 and notify_baton2."
  ], 
  "revision_id": "853554"
 }, 
 {
  "author": "cmpilato", 
  "date": "2005-03-18T22:19:30.768924Z", 
  "msg": [
   "Locking branch:  Code re-org.  No functional changes.", 
   "* subversion/libsvn_fs_fs/lock.c", 
   "Move the public API implementations to the bottom of this file."
  ], 
  "revision_id": "853553"
 }, 
 {
  "author": "cmpilato", 
  "date": "2005-03-18T22:16:54.795061Z", 
  "msg": [
   "Locking branch: Add sanity checks and path canonicalization to the", 
   "public FSFS locking APIs.", 
   "* subversion/libsvn_fs_fs/lock.c", 
   "(svn_fs_fs__lock, svn_fs_fs__unlock, svn_fs_fs__get_lock,", 
   "svn_fs_fs__get_locks, svn_fs_fs__generate_token): Make sure all", 
   "these functions check the fs and a canonicalize any input paths."
  ], 
  "revision_id": "853552"
 }, 
 {
  "author": "cmpilato", 
  "date": "2005-03-18T21:05:15.485874Z", 
  "msg": [
   "Task completed (locknulls-in-propfinds reversion)."
  ], 
  "revision_id": "853551"
 }
]