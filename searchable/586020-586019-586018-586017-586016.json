[
 {
  "author": "evenisse", 
  "date": "2007-10-18T16:04:32.268639Z", 
  "msg": [
   "[MRRESOURCES-24] Add projectsSortedByOrganization in velocity context"
  ], 
  "revision_id": "586020"
 }, 
 {
  "author": "mamta", 
  "date": "2007-10-18T15:57:04.108303Z", 
  "msg": [
   "Migrating changes (revision 585261) from trunk into 10.3 codeline. I had to make some manual changes after merging because CollationTest had few changes in main which were not part of 10.3 codeline. The commit comments for the trunk codeline checkin were as follows", 
   "Commiting the patch (DERBY2967_Oct11_07_diff.txt) attached to DERBY-2967. The implementation of LIKE for UCS_BASIC and territory based character string types do not differ much(based on SQL standard as explained in comments to this Jira entry). I have been able to change the existing code for LIKE (in Like.java) for UCS_BASIC character strings to support territory based character strings. The existing method in Like.java now gets a new parameter and it is RuleBasedCollator. For UCS_BASIC strings, this will be passed as NULL. We check if the RuleBasedCollator is NULL and if so then we do simple one character equality check for non-metacharacters in pattern and correspnding characters in value string. But if RuleBasedCollator is not NULL, then we use it to get collation element(s) for one character at a time for non-metacharacters in patterns and corresponding characters in value string and do the collation element(s) comparison to establish equality.", 
   "In addition to the above mentioned change in Like.java, I have changed the callers of the method in Like.java to pass correct value for the RuleBasedCollator.", 
   "Additionally, I have added a test to CollationTest.java for the code changes. Existing like tests in CollationTest2.java were very useful in the testing of my changes. And lastly, I changed few of the existing tests to use different character string values so that when we run the full collation tests, we do not see some of the test failures which are genuine because of the nature of their data."
  ], 
  "revision_id": "586019"
 }, 
 {
  "author": "doogie", 
  "date": "2007-10-18T15:56:48.300769Z", 
  "msg": [
   "Fix error reported on mailing list; in essence, it appeared that", 
   "conditions weren't being processed.  This was due to a cut-n-waste", 
   "issue; both whereCondition and havingCondition called", 
   "getHavingEntityCondition(doh!)."
  ], 
  "revision_id": "586018"
 }, 
 {
  "author": "sebor", 
  "date": "2007-10-18T15:56:38.243718Z", 
  "msg": [
   "2007-10-18  Martin Sebor  <sebor@roguewave.com>", 
   "Merged rev 586016 from branches/4.2.0 disabling the fix for STDCXX-469", 
   "for Microsoft Visual Studio to maintain binary compatibility with stdcxx", 
   "4.1 (the compiler mangles the access of class members into their names).", 
   "* include/loc/_facet.h [_MSC_VER] (__rw_facet, ~__rw_facet): Made class", 
   "ctor and dtor public again until stdcxx 5.0."
  ], 
  "revision_id": "586017"
 }, 
 {
  "author": "sebor", 
  "date": "2007-10-18T15:53:57.686441Z", 
  "msg": [
   "2007-10-18  Martin Sebor  <sebor@roguewave.com>", 
   "Disabled fix for STDCXX-469 for Microsoft Visual Studio to maintain", 
   "binary compatibility with stdcxx 4.1.x (the compiler mangles the", 
   "access specifier of class members into their names).", 
   "* include/loc/_facet.h [_MSC_VER] (__rw_facet, ~__rw_facet): Made", 
   "class ctor and dtor public again until stdcxx 5.0."
  ], 
  "revision_id": "586016"
 }
]