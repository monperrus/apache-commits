[
 {
  "author": "gstein", 
  "date": "2002-07-17T02:28:42.810427Z", 
  "msg": [
   "Add a \"script\" type to the gen-make system so that we can install", 
   "scripts. In particular, this is going to be used to install", 
   "\"svn-config\" as part of issue #751.", 
   "* build.conf: add [svn-config] target with a \"script\" type", 
   "* build/gen_base.py:", 
   "(_GeneratorBase.__init__): don't add scripts' dirs to the", 
   "target_dirs. we aren't actually building them.", 
   "(MsvcProjectGenerator._extension_map,", 
   "MakefileGenerator._extension_map): add extensions for the", 
   "\"script\" type to the mapping.", 
   "(MakefileGenerator.write): exit the build-target loop if the target", 
   "is a script. don't put scripts into CLEAN_FILES and do not", 
   "generate shortcut targets for them.", 
   "(_Target.__init__): scripts default to a 'bin' install", 
   "(_Target.find_sources): scripts do not have default sources since", 
   "their extensions could be all over the map.", 
   "(_Target.write_dsp): bail if a .dsp is attempted for a script", 
   "(_filter_targets): sort the targets so that we get a bit more", 
   "stability to the build-outputs.mk file during changes. should also", 
   "help people locate build targets."
  ], 
  "revision_id": "842630"
 }, 
 {
  "author": "kfogel", 
  "date": "2002-07-16T23:40:54.676226Z", 
  "msg": [
   "Fixing issue #797 in two stages.", 
   "This is the first half of the fix: store a new \"version-url-rev\"", 
   "wcprop at commit time, to compare with the entry committed rev", 
   "whenever a version-url is retrieved.  Also implement a new ra callback", 
   "function to retrieve the entry committed rev, but no callers yet.", 
   "The next step is to change ra_dav to do the comparison described", 
   "above.  It must validate its version-url wcprops by using the above", 
   "new callback, so they can never be out of sync with the entry again.", 
   "Whenever a version-url is retrieved, if the version-url-rev is present", 
   "but does not match the entry committed rev, then the version-url is", 
   "not valid, so we will erase it from the wcprop cache and return null.", 
   "* subversion/libsvn_ra_dav/ra_dav.h", 
   "(SVN_RA_DAV__LP_VSN_URL_REV): Define new wcprop.", 
   "* subversion/libsvn_ra_dav/merge.c", 
   "(bump_resource): Set mc->rev as the new wcprop.  Document this", 
   "function.", 
   "* subversion/libsvn_wc/props.c", 
   "(svn_wc__wcprop_set): Handle null value correctly.  Remove", 
   "dav-specific comment; if we're going to have it, it would better be", 
   "at the interface documentation.", 
   "(svn_wc__wcprop_get): Likewise remove dav-specific comment.", 
   "* subversion/include/svn_ra.h", 
   "(svn_ra_get_committed_rev_func_t): New function type.  This hurts me", 
   "more than it hurts you.", 
   "(svn_ra_callbacks_t): New callback `get_committed_rev'.", 
   "* subversion/libsvn_client/ra.c", 
   "(set_wc_prop, get_wc_prop): Fix up comments.", 
   "(get_committed_rev): New function.", 
   "(svn_client__open_ra_session): Store get_committed_rev in the", 
   "callbacks table, so ra_dav has a way to ask entry committed rev.", 
   "* subversion/include/svn_error_codes.h", 
   "(SVN_ERR_BAD_REVISION): New error.", 
   "* subversion/include/svn_wc.h", 
   "(svn_wc_set_wc_prop, svn_wc_prop_set, svn_wc_prop_set):", 
   "Documentation fixes.", 
   "* subversion/libsvn_wc/props.h", 
   "(svn_wc__wcprop_set): Documentation fix.", 
   "* subversion/libsvn_client/commit.c", 
   "(get_ra_editor): Fix comment.", 
   "* subversion/libsvn_client/copy.c", 
   "(repos_to_repos_copy): Fix comment."
  ], 
  "revision_id": "842629"
 }, 
 {
  "author": "philip", 
  "date": "2002-07-16T23:11:59.751600Z", 
  "msg": [
   "Continuing issue #749.  Make svn_wc_adm_access_t optionally", 
   "hierarchical.  Lock entire tree before starting a commit.  Revert", 
   "r2504 as it's no longer needed.", 
   "This got more complicated than I would have liked. I am still", 
   "concerned about which directories get locked, and in which order they", 
   "get locked.", 
   "* subversion/include/svn_error_codes.h (SVN_ERR_WC_INVALID_LOCK): New", 
   "error code.", 
   "* subversion/include/svn_wc.h", 
   "(svn_wc_adm_open): Add parent_access and tree_lock parameters.", 
   "(svn_wc_adm_retrieve): New function.", 
   "(svn_wc_adm_close): Document new behavior.", 
   "* subversion/libsvn_wc/adm_ops.c", 
   "(svn_wc_process_committed, svn_wc_remove_from_revision_control):", 
   "Replace svn_wc_adm_open with svn_wc_adm_retrieve and delete", 
   "svn_wc_adm_close.", 
   "(svn_wc_delete, svn_wc_revert): Pass new parameters to svn_wc_adm_open.", 
   "* subversion/libsvn_wc/log.c", 
   "(log_do_delete_entry): Replace svn_wc_adm_open with svn_wc_adm_retrieve.", 
   "(log_do_committed): Replace svn_wc_adm_open with svn_wc_adm_retrieve", 
   "and delete svn_wc_adm_close.", 
   "* subversion/libsvn_wc/props.c (svn_wc_merge_prop_diffs): Pass new", 
   "parameters to svn_wc_adm_open.", 
   "* subversion/libsvn_wc/adm_files.c (init_adm): Pass new parameters to", 
   "svn_wc_adm_open.", 
   "* subversion/libsvn_client/commit.c", 
   "(svn_client_commit): Revert r2504. Return an error if the hash lookup", 
   "for an access baton fails.", 
   "* subversion/libsvn_client/commit_util.c", 
   "(lock_dir): Lookup parent baton. Pass new parameters to svn_wc_adm_open.", 
   "(harvest_committables): New lock_subdirs parameter. Lock all", 
   "sub-directories when locking a directory.", 
   "(svn_client__harvest_committables, svn_client__get_copy_committables): Pass", 
   "new parameter to harvest_committables.", 
   "* subversion/libsvn_wc/update_editor.c", 
   "(delete_entry): Pass new parameters to svn_wc_adm_open to lock", 
   "entire tree.", 
   "(close_directory, svn_wc_install_file): Pass new parameters to", 
   "svn_wc_adm_open.", 
   "* subversion/libsvn_client/externals.c (relegate_external,", 
   "handle_external_item_change): Pass new parameters to svn_wc_adm_open.", 
   "* subversion/libsvn_wc/wc.h", 
   "(enum svn_wc__adm_access_type): Renamed from enum svn_wc_adm_access_type.", 
   "(svn_wc__adm_access_unlocked, svn_wc__adm_access_read_lock,", 
   "svn_wc__adm_access_write_lock): Renamed enum identifiers.", 
   "(svn_wc__adm_access_closed): New enum identifier.", 
   "(struct svn_wc_adm_access_t): Added parent and children members.", 
   "* subversion/libsvn_wc/lock.c", 
   "(svn_wc__adm_access_pool_cleanup, svn_wc__adm_access_pool_cleanup_child,", 
   "svn_wc__adm_access_alloc, svn_wc_adm_retrieve): New functions.", 
   "(svn_wc__adm_steal_write_lock): Use svn_wc__adm_access_alloc.", 
   "(svn_wc_adm_open): Add parent_access and tree_lock parameters and", 
   "processing. Use svn_wc__adm_access_alloc. For read locks check path", 
   "is a directory. Register pool cleanup handler.", 
   "(svn_wc__do_adm_close): Renamed from svn_wc_adm_close and made", 
   "static. New parameter to preserver lock file. Close children. Kill", 
   "pool cleanup handler. Reset state to svn_wc__adm_access_closed.", 
   "(svn_wc_adm_close): Now a simple wrapper that calls svn_wc__do_adm_close.", 
   "(svn_wc_adm_write_check): enum svn_wc__adm_access_type name change.", 
   "* subversion/tests/clients/cmdline/copy_tests.py (copy_modify_commit): New", 
   "test."
  ], 
  "revision_id": "842628"
 }, 
 {
  "author": "gstein", 
  "date": "2002-07-16T23:10:06.569339Z", 
  "msg": [
   "* fs.py (entries): new function that wraps svn_fs_dir_entries() to", 
   "return a little more useful dictionary. rather than returning a", 
   "dictionary of name -> (name, ID) pairs, it returns name -> ID.", 
   "* util.py (Stream): new class to wrap an SVN stream with a \"file-like\"", 
   "Python class. e.g. it implements .read() and .write()"
  ], 
  "revision_id": "842627"
 }, 
 {
  "author": "gstein", 
  "date": "2002-07-16T23:07:28.403409Z", 
  "msg": [
   "Enable svn:executable"
  ], 
  "revision_id": "842626"
 }
]