[
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T17:43:47.035865Z", 
  "msg": [
   "Port Slow Query Log to 90", 
   "Summary: Straight port of D288291. Mostly trivial. HBaseRpcMetrics no longer", 
   "allows on the fly metric creation in 90, so I just left out the slow response", 
   "counter from 89.", 
   "Test Plan: Ran all unit tests. No new failures.", 
   "Reviewers: nspiegelberg, kannan", 
   "Reviewed By: kannan", 
   "CC: hbase@lists, kannan, riley", 
   "Differential Revision: 311869"
  ], 
  "revision_id": "1181950"
 }, 
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T17:43:44.685757Z", 
  "msg": [
   "Improve recovery time of the HBase client when a region server dies.", 
   "Summary:", 
   "When a region server dies, the HBase client waits until the RPC timesout before", 
   "learning that it needs to check META to find the new location of the region.", 
   "And it incurs this *timeout* cost for every region being served by the dead", 
   "region server.", 
   "This diff fixes this by clearing the entries in cache that have the dead region", 
   "server as their values.", 
   "Test Plan:", 
   "I wrote a interative client program that inserts to two rows in two different", 
   "regions served by the same region server. While this client is waiting for user", 
   "input after the insertions, I power off this region server from radium. After", 
   "the regions originally served by the dead server are re-distributed to other", 
   "region servers, I tell the client program to perform gets on the two rows.", 
   "I saw only one RPC timeout rather than two.", 
   "Reviewed By: kannan", 
   "Reviewers: kannan, liyintang", 
   "Commenters: liyintang", 
   "CC: liyintang, kannan, hbase@lists, itapai", 
   "Differential Revision: 305582", 
   "Task ID: 618176"
  ], 
  "revision_id": "1181949"
 }, 
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T17:43:41.743560Z", 
  "msg": [
   "Enhanced, Parseable, and Fingerprinted Slow Query Log", 
   "Summary:", 
   "Starting with the general concept from Kannan's slow query logging, developed", 
   "an interface for fingerprinting and building JSON objects to report crucial", 
   "information about slow queries without flooding the log. Implemented this for", 
   "Puts, Gets, Scans, Deletes, and MultiPuts. Also changed the location of the", 
   "logging from HBaseServer to HBaseRPC for ease of getting region information for", 
   "these queries.", 
   "Sample output:", 
   "2011-08-22 15:58:40,516 WARN org.apache.hadoop.ipc.HBaseServer:", 
   "(operationTooSlow):", 
   "{\"processingtimemillis\":1,\"class\":\"HRegionServer\",\"responsesize\":0,\"starttimemillis\":1314053920513,\"method\":\"put\",\"totalColumns\":2,\"table\":\".META.\",\"queuetimemillis\":0,\"families\":{\"info\":[{\"timestamp\":1314053920513,\"qualifier\":\"server\",\"vlen\":31},{\"timestamp\":1314053920513,\"qualifier\":\"serverstartcode\",\"vlen\":8}]},\"row\":\"peeps,,1313609181577.d7b7001adabe030d66dd59a1746b49c3.\"}", 
   "Test Plan: Built and ran with a 1ms warnResponseTime and ran all types of", 
   "logged queries to see the output.", 
   "Reviewers: nspiegelberg, kannan", 
   "Reviewed By: kannan", 
   "CC: kannan, hbase@lists, nspiegelberg, riley", 
   "Differential Revision: 288291", 
   "Task ID: 630871"
  ], 
  "revision_id": "1181948"
 }, 
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T17:43:34.336651Z", 
  "msg": [
   "Improve RowCounter to count rows in a specific key range.", 
   "Summary:", 
   "Currently RowCounter in MR package is a very simple map only job, and this", 
   "change should let user specify a key range and count the number of rows in this", 
   "range. It's done by specifying as arguments \"--range=foo,bar\" to the program", 
   "loader, which would count between [\"foo\", \"bar\") that has any column.", 
   "Test Plan:", 
   "This change is actually a modification used to test diff D295523. First I", 
   "loaded rows using recovery utility with specified key range (feature added in", 
   "D295523) and let this counter count the same range specified in recovery, and", 
   "check if total num of rows equals to num of rows in range. Then, I tried setting", 
   "rowcounter.start.key to the end key of that specified in the previous recovery,", 
   "and check if there is indeed no row in range.", 
   "Reviewed By: kannan", 
   "Reviewers: aaiyer, kannan", 
   "CC: madhuvaidya, , itapai, kannan", 
   "Differential Revision: 296340", 
   "Task ID: 659765"
  ], 
  "revision_id": "1181947"
 }, 
 {
  "author": "nspiegelberg", 
  "date": "2011-10-11T17:43:31.817668Z", 
  "msg": [
   "Adding Thrift support for the Filter Language in the 89 branch", 
   "Summary:", 
   "This enables the Filter Language to now be used over Thrift in the 89 branch", 
   "Test Plan:", 
   "- TestThriftServer.java", 
   "- TestParseFilter.java", 
   "Ran a sample client program:", 
   "echo \"Testing KeyOnlyFilter\";", 
   "$result = $client->scannerOpenWithFilterString(\"conf\", \"KeyOnlyFilter()\");", 
   "$to_print = $client->scannerGetList($result,1);", 
   "while ($to_print) {", 
   "print_r($to_print);", 
   "$to_print = $client->scannerGetList($result,1);", 
   "}", 
   "$client->scannerClose($result);", 
   "which gave results:", 
   "Testing KeyOnlyFilterArray", 
   "(", 
   "[0] => TRowResult Object", 
   "(", 
   "[row] => realtime", 
   "[columns] => Array", 
   "(", 
   "[conf:blacklist] => TCell Object", 
   "(", 
   "[value] =>", 
   "[timestamp] => 1314048458095", 
   ")", 
   ")", 
   ")", 
   ")", 
   "Reviewed By: liyintang", 
   "Reviewers: dgoode, pkhemani, liyintang", 
   "Commenters: dgoode", 
   "CC: kranganathan, dgoode, liyintang", 
   "Differential Revision: 310417"
  ], 
  "revision_id": "1181946"
 }
]