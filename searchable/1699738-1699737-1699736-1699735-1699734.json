[
 {
  "author": "lgo", 
  "date": "2013-10-14T08:04:25.671098Z", 
  "msg": [
   "In the configuration store, improve pool usage. This should ensure that, when a", 
   "connection is cleaned up, the associated configuration will be cleaned up.", 
   "Also, that the lifecycle of the per-host configuration extends that of the", 
   "initial connection for which this configuration was created.", 
   "* serf_private.h", 
   "(serf_config_t): Keep a conn_pool for storing per-connection values in the", 
   "configuration store and ctx_pool for storing per-host and per-context", 
   "values.", 
   "* serf.h", 
   "(serf_get_config_from_store): Rename pool argument and update comment.", 
   "* config_store.c", 
   "(serf_get_config_from_store): Init conn_pool and ctx_pool in the config", 
   "object. Use them to create per-conn and per-host/per-context", 
   "configuration structures.", 
   "(serf_set_config_string): Use either conn_pool or ctx_pool to duplicate", 
   "configuration values."
  ], 
  "revision_id": "1699738"
 }, 
 {
  "author": "lgo", 
  "date": "2013-10-13T09:41:08.481067Z", 
  "msg": [
   "In the configuration store, switch from category + string keys to one integer", 
   "key containing both.", 
   "* serf.h", 
   "(serf_config_key_t,", 
   "serf_config_key_ptr_t): New type declarations.", 
   "(serf_set_config_string,", 
   "serf_set_config_object,", 
   "serf_get_config_string,", 
   "serf_remove_config_value): Update function signatures to take one", 
   "serf_config_key_ptr_t instead of category + const char *key.", 
   "* config_store.c", 
   "(global): Define the key constants.", 
   "(serf_set_config_string,", 
   "serf_set_config_object,", 
   "serf_get_config_string,", 
   "serf_remove_config_value): Update function signatures. Remove code to", 
   "duplicate keys. Add code to find out category based on left-most byte", 
   "in the key. Add checks to return an error when a key is set/read in a", 
   "scope that's not managed by the config object.", 
   "* outgoing.c", 
   "(serf_connection_create2): Update parameters in the calls to", 
   "serf_set_config_string;", 
   "* test/test_internal.c", 
   "(global): Define some custom test configuration keys.", 
   "(test_config_store_per_context,", 
   "test_config_store_per_connection_different_host,", 
   "test_config_store_per_connection_same_host): Update paramaters in the calls", 
   "to serf_[get|set]_config_string.", 
   "(test_config_store_error_handling): New test.", 
   "(test_internal): Run the new test."
  ], 
  "revision_id": "1699737"
 }, 
 {
  "author": "lgo", 
  "date": "2013-10-12T19:55:49.877604Z", 
  "msg": [
   "Create a per-connection config object and share it will all buckets in the", 
   "incoming and outgoing bucket chains.", 
   "* outgoing.c", 
   "(do_conn_setup): Pass the connection config to the buckets as much upstream", 
   "in the chains as possible, from where they will be passed to all down-", 
   "stream buckets, ensuring that all buckets have access to the shared", 
   "config.", 
   "(read_from_connection): Each time a new response bucket is created by the", 
   "application, share the per connection config with it.", 
   "(serf_connection_create2): Create the per connection config object with some", 
   "(initial) values."
  ], 
  "revision_id": "1699736"
 }, 
 {
  "author": "lgo", 
  "date": "2013-10-12T19:49:40.041415Z", 
  "msg": [
   "Implement the set_config method in all buckets. Current implementations are", 
   "very limited in that the buckets don't use any of the shared configuration yet.", 
   "Implementations now come in two flavours:", 
   "a. buckets that wrap (an)other bucket(s) pas the config object further to these", 
   "wrapped buckets.", 
   "b. terminator buckets that don't use the config object, use the default", 
   "serf_default_ignore_config implementation.", 
   "* serf_bucket_util.h", 
   "(serf_default_ignore_config): New declaration.", 
   "* buckets/buckets.c", 
   "(serf_default_ignore_config): New default implementation.", 
   "* buckets/aggregate_buckets.c", 
   "(aggregate_context_t): Add config variable.", 
   "(create_aggregate): Initialize config.", 
   "(serf_bucket_aggregate_prepend,", 
   "serf_bucket_aggregate_append,", 
   "serf_bucket_aggregate_append_iovec,", 
   "serf_aggregate_set_config): Share config with child bucket(s).", 
   "(serf_bucket_type_aggregate): Add serf_aggregate_set_config.", 
   "* buckets/log_wrapper_buckets.c", 
   "(log_wrapped_context_t): Add config variable.", 
   "(serf_log_wrapped_set_config): New function.", 
   "(serf__bucket_log_wrapper_create): Define the set_config wrapper.", 
   "* buckets/barrier_buckets.c", 
   "* buckets/chunk_buckets.c", 
   "* buckets/copy_buckets.c", 
   "* buckets/dechunk_buckets.c", 
   "* buckets/deflate_buckets.c", 
   "* buckets/response_body_buckets.c", 
   "* buckets/response_buckets.c", 
   "* buckets/limit_buckets.c", 
   "* buckets/ssl_buckets.c", 
   "(serf_*_set_config): New function. Pass config to wrapped bucket.", 
   "(serf_bucket_type_*): Add the new function. Update to v2 API where needed.", 
   "* buckets/file_buckets.c", 
   "* buckets/mmap_buckets.c", 
   "* buckets/simple_buckets.c", 
   "* buckets/socket_buckets.c", 
   "(serf_bucket_type_*): Add serf_default_ignore_config. Upgrade the bucket", 
   "to the v2 API where needed."
  ], 
  "revision_id": "1699735"
 }, 
 {
  "author": "lgo", 
  "date": "2013-10-12T19:34:52.593132Z", 
  "msg": [
   "Implement first part of a configuration store and config objects, with the", 
   "explicit purpose of sharing information from the context with all buckets,", 
   "without creating a direct link between those two entities.", 
   "More info here:", 
   "https://groups.google.com/d/topic/serf-dev/YQAKMfZBUWQ/discussion", 
   "* config_store.c: New file, implements the per context configuration store,", 
   "and the serf_config_t object that act as a per-connection r/w view on the", 
   "configuration store.", 
   "* context.c", 
   "(serf_context_create_ex): Init configuration store.", 
   "* serf.h", 
   "(struct serf_bucket_type_t): Add set_config method, part of the v2 bucket API.", 
   "(serf_bucket_set_config): New macro.", 
   "(serf_config_categories_t,", 
   "serf_config_copy_flags_t): New declarations.", 
   "(serf_set_config_string,", 
   "serf_set_config_object,", 
   "serf_get_config_string,", 
   "serf_remove_config_value): New declarations for functions to read from and", 
   "write to config objects.", 
   "(serf_get_config_from_store): New declaration.", 
   "* serf_private.h", 
   "(serf_config_t,", 
   "serf__config_store_t): New type declarations.", 
   "(serf__init_config_store,", 
   "serf__remove_connection_from_config_store,", 
   "serf__remove_host_from_config_store): New declarations.", 
   "(struct serf_context_t): Add config_store member variable.", 
   "(struct serf_connection_t): Add config member variable.", 
   "* test/test_internal.c: New file, unit tests for serf-internal functions.", 
   "* test/test_all.c", 
   "(struct testlist): Add the internal tests.", 
   "* test/test_serf.h", 
   "(test_internal): New declaration.", 
   "* SConstruct", 
   "(testall_files): add test_internal.c"
  ], 
  "revision_id": "1699734"
 }
]