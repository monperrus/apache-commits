[
 {
  "author": "davsclaus", 
  "date": "2008-12-05T20:46:02.680071Z", 
  "msg": [
   "Merged revisions 723835 via svnmerge from", 
   "https://svn.apache.org/repos/asf/activemq/camel/trunk", 
   "........", 
   "r723835 | davsclaus | 2008-12-05 20:44:08 +0100 (fr, 05 dec 2008) | 1 line", 
   "CAMEL-1148: Added options pre move options to move file before processing", 
   "........"
  ], 
  "revision_id": "723860"
 }, 
 {
  "author": "tabish", 
  "date": "2008-12-05T20:41:25.487219Z", 
  "msg": [
   "https://issues.apache.org/activemq/browse/AMQCPP-169", 
   "Added destination remove method to the ActiveMQConnection class that calls into the connectors to attempt a remove.  Additional methods can be added in the Connection class as needed for other Broker specific managment actions for the time being."
  ], 
  "revision_id": "723859"
 }, 
 {
  "author": "bentmann", 
  "date": "2008-12-05T20:36:17.115237Z", 
  "msg": [
   "[MNG-3139] The skin does not exist: Unable to determine the release version", 
   "o Added IT"
  ], 
  "revision_id": "723858"
 }, 
 {
  "author": "etnu", 
  "date": "2008-12-05T20:34:06.453544Z", 
  "msg": [
   "Changed unicode escaping code to a model based on that found in java.util.Properties on Henning's recommendation. This outperforms the larger lookup table in the original benchmark by about 10-15%, presumably because of better caching behavior with the smaller lookup table (~32 bytes instead of ~64K). This gain held true on both Sun and OpenJDK 6 using several combinations of GC flags. The code is a bit more readable in my opinion as well, so overall it seems to be the current best technique for this particular part of the serializer.", 
   "At this point JsonSerializer doesn't show any obvious shortcomings, though it only holds a small advantage over the json.org implementation on very large data sets, such as 1MB of data where the size of the average entry is much higher than 256 bytes. 256 bytes was arrived as a good default assumption for entry size based on the average size showing up during profiling of a prod setup. I suspect that further tuning of this isn't going to yield much of a net gain though.", 
   "Future patches should probably start swapping out the existing object to JSONObject to string conversions with calls to JsonSerializer.serialize(object)."
  ], 
  "revision_id": "723857"
 }, 
 {
  "author": "mikedd", 
  "date": "2008-12-05T20:32:06.455975Z", 
  "msg": [
   "OPENJPA-817 preserve order of statements with ConstraintUpdateManager merge to 1.3.x"
  ], 
  "revision_id": "723856"
 }
]