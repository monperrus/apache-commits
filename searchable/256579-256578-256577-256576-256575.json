[
 {
  "author": "gdaniels", 
  "date": "2003-08-24T14:56:14.000000Z", 
  "msg": [
   "Unused import."
  ], 
  "revision_id": "256579"
 }, 
 {
  "author": "gdaniels", 
  "date": "2003-08-24T14:55:58.000000Z", 
  "msg": [
   "Exclude sales rank 'n price test since the remote domain seems", 
   "to be gone for now."
  ], 
  "revision_id": "256578"
 }, 
 {
  "author": "gdaniels", 
  "date": "2003-08-24T14:55:08.000000Z", 
  "msg": [
   "Checking to make sure every log.[info|error|etc] call uses Messages.getMessage()", 
   "isn't very friendly to this kind of pattern:", 
   "String foo = Messages.getMessage(\"msg\");", 
   "log.error(foo);", 
   "or even log.error(exception)", 
   "So now we check for explicit strings (log.error(\"foo\")) and fail on that."
  ], 
  "revision_id": "256577"
 }, 
 {
  "author": "toshi", 
  "date": "2003-08-22T05:36:00.000000Z", 
  "msg": [
   "Ugh!  Handling for comments from Jarek Gawor.", 
   "Changed the key (\"noService\") to (\"noService06\"). Thanks.", 
   "--", 
   "Toshi <toshi@apache.org>"
  ], 
  "revision_id": "256576"
 }, 
 {
  "author": "stevel", 
  "date": "2003-08-21T17:28:59.000000Z", 
  "msg": [
   "Until this code is tested, it doesnt exist :)", 
   "This is a reflection based binding to commons-modeler, that being an ease-of-use bridge to JMX. You can register objects with the registrar -if commons-modeler (and a JMX impl) is present then they are registered with JMX, if not, then not.", 
   "This lets us register core axis components with JMX, yet have no dependencies on JMX being present. I do not know what we should register, but this is the first step to making axis manageable."
  ], 
  "revision_id": "256575"
 }
]