[
 {
  "author": "jvanzyl", 
  "date": "2002-06-04T04:40:49.000000Z", 
  "msg": [
   "Adding things that are/will be present in the release tomorrow."
  ], 
  "revision_id": "117729"
 }, 
 {
  "author": "jvanzyl", 
  "date": "2002-06-04T03:39:42.000000Z", 
  "msg": [
   "Added an ant build file to the example so we can see the use of the", 
   "AntBuildTag taglib in action to produce the spectacular zero-length", 
   "'file-touched-by-ant' :-)"
  ], 
  "revision_id": "117728"
 }, 
 {
  "author": "jvanzyl", 
  "date": "2002-06-04T03:38:31.000000Z", 
  "msg": [
   "Added an AntBuildTag that allows you to run an Ant build from within", 
   "a Jelly script. So this could be used to integrate all our existing", 
   "build files and integrate 100% with Ant while allowing us to move toward", 
   "using Jelly entirely for our internal procedures.", 
   "This would allow something like a parameterized compile tag that we could", 
   "use in a consistent way for:", 
   "<sourceDirectory>", 
   "<testSourceDirectory>", 
   "<exampleSourceDirectory>", 
   "It's really limitless what we could do with this. As much as I dislike", 
   "taglibs in the web arena Jelly would sure allow some nifty stuff and", 
   "it would radically simplify internal library. We could get rid of what's", 
   "becoming a rat's nest of ant build files with some clean tag libs. I like", 
   "it so far."
  ], 
  "revision_id": "117727"
 }, 
 {
  "author": "glennm", 
  "date": "2002-06-04T03:20:52.000000Z", 
  "msg": [
   "Glenn McAllister - 2002/06/03", 
   "- Removed the navigation.xml <logo> and <organizationLogo> elements.", 
   "They've been replaced by the <project><logo/> and <organization><logo/>", 
   "elements respectively.  The alt text for the logos are taken from", 
   "<project><name> and <organization><name> respectively."
  ], 
  "revision_id": "117726"
 }, 
 {
  "author": "kaz", 
  "date": "2002-06-04T02:35:02.000000Z", 
  "msg": [
   "The following changes relate to the auto task list generator.  For those", 
   "of you that aren't familiar, this generates a task list from any @task", 
   "tags in your JavaDoc comments in the project's source tree.  The list", 
   "keeps track of tasks on a per/file basis.  A link is automatically added", 
   "to the Project Reports section if a task list exists.", 
   "Changes include:", 
   "- A NodeTokenizer for use with JavaCC nodes.  Basically retrieves Tokens", 
   "from a Node, but you have the option of setting ignored tokens.", 
   "- A JavaDocTagTokenizer which parses an ASTJavaDocTag Node using", 
   "NodeTokenizer to break a JavaDocTag into its components: name,", 
   "param(s), and value.", 
   "- The o.a.m.tasklist package which contains all of the task list related", 
   "classes such as the Task, TaskListEntry, and TaskList itself.  In", 
   "addition, this package contains the TaskListVisitor which accumulates", 
   "the Tasks found in the sources, and finally, there is the", 
   "TaskListExcecutor (the Ant task) that is used to kick all of this off.", 
   "- Unit tests have been provided for the classes.", 
   "- Documentation has been updated."
  ], 
  "revision_id": "117725"
 }
]