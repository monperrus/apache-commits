[
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T14:59:24.834119Z", 
  "msg": [
   "Replacing several calls to getFacet(ParseableFacet.class) != null   with call to convenience isParseable() method."
  ], 
  "revision_id": "1017680"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T14:59:15.689171Z", 
  "msg": [
   "Replacing several calls to getFacet(ParseableFacet.class) != null   with call to convenience isParseable() method."
  ], 
  "revision_id": "1017679"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T14:59:10.312114Z", 
  "msg": [
   "Replacing several calls to getFacet(ParseableFacet.class) != null   with call to convenience isParseable() method."
  ], 
  "revision_id": "1017678"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T14:59:03.382989Z", 
  "msg": [
   "Replacing several calls to getFacet(ParseableFacet.class) != null   with call to convenience isParseable() method."
  ], 
  "revision_id": "1017677"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-02-15T14:43:51.981568Z", 
  "msg": [
   "Added a new @Defaulted annotation with corresponding DefaultsProvider, plugs into @Value in an analogous manner to @Encodeable and @Parser.", 
   "Right now this default if non-null isn't being picked up, but that's cos the getFacet() stuff on OneToOneAssociation etc doesn't search through to the underlying type's facets."
  ], 
  "revision_id": "1017676"
 }
]