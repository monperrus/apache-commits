[
 {
  "author": "lgo", 
  "date": "2013-05-20T11:16:28.577889Z", 
  "msg": [
   "* SConstruct: Add -Wmissing-prototypes compiler option in both release and debug", 
   "builds (just as we already add -Wall to both)."
  ], 
  "revision_id": "1699398"
 }, 
 {
  "author": "lgo", 
  "date": "2013-05-20T11:13:29.967592Z", 
  "msg": [
   "Add two new test cases, for large request bodies. Fix the test framework to", 
   "correctly handle these with both the http and https test servers.", 
   "* test/server/test_server.c", 
   "(replay): Keep looping until all available data is read from the socket.", 
   "* test/server/test_server.h", 
   "(struct serv_ctx_t): Add variable bio_read_status.", 
   "* test/server/test_sslserver.c", 
   "(bio_apr_socket_read): Store the status returned from the stream bucket", 
   "in the context.", 
   "(init_ssl_context): Init bio_read_status.", 
   "(ssl_socket_read): Handle errors. Pass bio_read_status back to the caller for", 
   "the actual status of the socket.", 
   "* test/test_context.c", 
   "(struct handler_baton_t): Add request variable.", 
   "(setup_request): Use the request member of handler_baton_t as the raw", 
   "request message.", 
   "(setup_handler): Initialize request variable.", 
   "(create_large_request_message): New helper function.", 
   "(test_serf_connection_large_request,", 
   "test_serf_ssl_large_request): New tests.", 
   "(test_context): Run the new tests."
  ], 
  "revision_id": "1699397"
 }, 
 {
  "author": "lgo", 
  "date": "2013-05-19T08:51:54.800909Z", 
  "msg": [
   "On the multiple_ssl_impls branch:", 
   "Make reading decrypted data a bit more memory efficient by checking first", 
   "how many data is available to read and allocating the buffer based on that", 
   "info.", 
   "* buckets/sectrans_buckets.c", 
   "(SECURE_TRANSPORT_READ_BUFSIZE): Remove.", 
   "(MAX_READ_BUFSIZE): New definition, max. nr of bytes allocated in one pass.", 
   "(show_select_identity_dialog,", 
   "create_temp_keychain): Comments update.", 
   "(decrypt_more_data): Get the size of available data to read, then allocate", 
   "buffer and read.", 
   "(serf_sectrans_decrypt_read,", 
   "serf_sectrans_decrypt_readline): Remove the now obsolete loop over", 
   "decrypt_more_data, that function will now return all available data."
  ], 
  "revision_id": "1699396"
 }, 
 {
  "author": "lgo", 
  "date": "2013-05-18T12:28:03.635267Z", 
  "msg": [
   "On the multiple_ssl_impls branch:", 
   "Add function to find a preferred indentity in a store (Keychain). With this", 
   "implemented, remove all traces of 'modes'.", 
   "* buckets/bucket_private.h", 
   "(serf_ssl_bucket_type_t): Remove obsolete set_allowed_cert_validation_modes.", 
   "Add find_preferred_identity_in_store.", 
   "* buckets/openssl_buckets.c", 
   "(struct openssl_context_t): Remove modes.", 
   "(serf__openssl_client_cert_password_set,", 
   "serf__openssl_server_cert_callback_set,", 
   "serf__openssl_server_cert_chain_callback_set,", 
   "ssl_init_context): Remove obsolete references to modes.", 
   "(serf__openssl_set_allowed_cert_validation_modes): Remove.", 
   "(serf__openssl_find_preferred_identity_in_store): New public function,", 
   "placeholder, not implemented for OpenSSL.", 
   "(serf_ssl_bucket_type_openssl): Remove set_allowed_cert_validation_modes", 
   "member, fill in find_preferred_identity_in_store member.", 
   "* buckets/sectrans_buckets.c", 
   "(struct sectrans_context_t): Remove modes.", 
   "(client_cert_provider_set,", 
   "identity_provider_set,", 
   "client_cert_password_set,", 
   "server_cert_callback_set,", 
   "server_cert_chain_callback_set,", 
   "sectrans_init_context): Remove obsolete references to modes.", 
   "(set_allowed_cert_validation_modes): Remove.", 
   "(load_identity_from_databuf): Remove unused allocator.", 
   "(validate_server_certificate): Clean up already obsolete code.", 
   "(serf_ssl_bucket_type_securetransport): Remove", 
   "set_allowed_cert_validation_modes member, fill in", 
   "find_preferred_identity_in_store member.", 
   "(provide_client_certificate): Refactor, extract the code to find a preferred", 
   "identity to find_preferred_identity_in_store.", 
   "(find_preferred_identity_in_store): New function.", 
   "* buckets/ssl_buckets.c", 
   "(serf_ssl_set_allowed_cert_validation_modes): Remove.", 
   "(serf_ssl_find_preferred_identity_in_store): New function.", 
   "* serf_bucket_types.h", 
   "(enum serf_ssl_cert_validation_mode_t,", 
   "serf_ssl_set_allowed_cert_validation_modes): Remove.", 
   "(serf_ssl_find_preferred_identity_in_store): New function.", 
   "* test/test_context.c", 
   "(identity_cb): Update the (commented out) example on how to find a preferred", 
   "identity."
  ], 
  "revision_id": "1699395"
 }, 
 {
  "author": "lgo", 
  "date": "2013-05-18T11:10:46.162224Z", 
  "msg": [
   "On the multiple_ssl_impls branch:", 
   "Bring openssl buckets up to date with the changes to the ssl bucket API already", 
   "implemented in sectrans_buckets.", 
   "* buckets/bucket_private.h", 
   "(struct serf_ssl_identity_t): Add two slots, one for the client certificate", 
   "and one for the private key so that we can use this structure in the", 
   "openssl buckets directly.", 
   "(serf__create_identity): Take cert and pkey arguments instead of one", 
   "identity.", 
   "* buckets/openssl_buckets.c", 
   "(struct openssl_context_t): Add identity_callback, cached_identity. Remove", 
   "now obsolete variables to cache client certificate values.", 
   "(ssl_need_client_cert): Refactor, use identity_callback if set. Extract the", 
   "code to load a .p12 file in serf__openssl_load_identity_from_file.", 
   "(callback_for_identity_pw): New helper function.", 
   "(serf__openssl_load_identity_from_file): New public function, loads a .p12", 
   "file in an identity object.", 
   "(serf__openssl_identity_provider_set): New public function.", 
   "(ssl_init_context): Initialize the new variables.", 
   "(serf__openssl_show_select_identity_dialog): New public function, placeholder,", 
   "not implemented.", 
   "(serf_ssl_bucket_type_openssl): Add the three functions to the openssl", 
   "ssl bucket API.", 
   "* buckets/sectrans_buckets.c", 
   "(load_identity_from_databuf,", 
   "callback_for_identity): Update calls to serf__create_identity, store the", 
   "SecIdentityRef object in the impl_cert member of serf_ssl_identity_t.", 
   "* buckets/ssl_buckets.c", 
   "(serf__create_identity): Take cert and pkey arguments instead of one", 
   "identity."
  ], 
  "revision_id": "1699394"
 }
]