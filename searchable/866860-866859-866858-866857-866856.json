[
 {
  "author": "blair", 
  "date": "2007-09-26T15:11:11.005831Z", 
  "msg": [
   "* subversion/include/svn_wc.h:", 
   "Capitalization fix in a comment."
  ], 
  "revision_id": "866860"
 }, 
 {
  "author": "dongsheng", 
  "date": "2007-09-26T03:37:26.238342Z", 
  "msg": [
   "Simplified Chinese translation.", 
   "* subversion/po/zh_CN.po", 
   "Translate new messages of subversion.pot@r26784."
  ], 
  "revision_id": "866859"
 }, 
 {
  "author": "cmpilato", 
  "date": "2007-09-25T20:05:49.776832Z", 
  "msg": [
   "Commit upstream a CollabNet-maintained a patch against libsvn_fs*", 
   "which allows svn_fs_set_uuid() to accept a NULL argument which is", 
   "interpreted as \"generate a new UUID\".  This is useful for", 
   "programmatically disambiguating repositories created as copies of some", 
   "other existing one without resorting to tricks with 'svnadmin load',", 
   "or depending on the undocumented ability of the filesystem layers to", 
   "regenerate their 'uuids' table if deleted.", 
   "* subversion/include/svn_fs.h", 
   "(svn_fs_set_uuid): Update the docstring.", 
   "* subversion/libsvn_fs_fs/fs_fs.h,", 
   "* subversion/libsvn_fs_fs/fs_fs.c", 
   "(svn_fs_fs__set_uuid): If a NULL UUID is passed in, generate a new one.", 
   "* subversion/libsvn_fs_base/uuid.c", 
   "(svn_fs_base__set_uuid): If a NULL UUID is passed in, generate a new one.", 
   "* subversion/bindings/swig/svn_fs.i", 
   "Add 'uuid' to the MAY_BE_NULL list.", 
   "* subversion/tests/libsvn_fs/fs-test.c", 
   "(set_uuid): New test.", 
   "(test_funcs): Add reference to new test."
  ], 
  "revision_id": "866858"
 }, 
 {
  "author": "dlr", 
  "date": "2007-09-25T20:05:01.237886Z", 
  "msg": [
   "Complete JavaHL portion of issue #2820, adding API binding for the", 
   "svn_client_mergeinfo_get_available() API, which allows for retrieval", 
   "of revision ranges available for merge.", 
   "[ in subversion/bindings/javahl/ ]", 
   "* native/SVNClient.h", 
   "* native/SVNClient.cpp", 
   "(getAvailableMerges): Add new client API, which delegates to the new", 
   "svn_client_mergeinfo_get_available() API.", 
   "* native/org_tigris_subversion_javahl_SVNClient.cpp", 
   "(Java_org_tigris_subversion_javahl_SVNClient_getAvailableMerges):", 
   "Add new JNI API.", 
   "* src/org/tigris/subversion/javahl/SVNClient.java", 
   "* src/org/tigris/subversion/javahl/SVNClientInterface.java", 
   "* src/org/tigris/subversion/javahl/SVNClientSynchronized.java", 
   "(getMergeInfo): Improve JavaDoc.", 
   "(getAvailableMerges): Add new client API, which is backed by a JNI", 
   "implementation.", 
   "* tests/org/tigris/subversion/javahl/BasicTests.java", 
   "(acquireMergeInfoAndAssertEquals): Add JavaDoc, and verification of", 
   "available merges using the new SVNClientInterface.getAvailableMerges()", 
   "API.", 
   "(testMergeInfoRetrieval): Update caller."
  ], 
  "revision_id": "866857"
 }, 
 {
  "author": "kameshj", 
  "date": "2007-09-25T16:31:32.682817Z", 
  "msg": [
   "Fix bug:", 
   "Currently our diff editor's open_file hook does not respect per file", 
   "base revision given by the reporter. This is a bug. We never surfaced this", 
   "problem as we never specialize any of the sub paths in our diff with", 
   "different start revisions(base revisions) via 'set_path' calls on a reporter.", 
   "In new way of merging via 2821 we hit this bug. As this change itself", 
   "independent of any style, making a independent commit.", 
   "* subversion/libsvn_client/repos_diff.c", 
   "(get_file_from_ra): Accept revision number from the caller rather than", 
   "assuming it to be 'b->edit_baton->revision'.", 
   "(delete_entry): Call 'get_file_from_ra' with 'eb->revision' as at", 
   "base_revision file itself would have been deleted.", 
   "(open_file): Call 'get_file_from_ra' with 'base_revision'."
  ], 
  "revision_id": "866856"
 }
]