[
 {
  "author": "vitek", 
  "date": "2008-06-13T05:53:51.703379Z", 
  "msg": [
   "2008-06-12  Travis Vitek  <vitek@roguewave.com>", 
   "STDCXX-916", 
   "* include/type_traits: New file defines C++0x type traits.", 
   "* include/rw/_config-gcc.h (_RWSTD_TT_IS_ENUM, _RWSTD_TT_IS_UNION)", 
   "(_RWSTD_TT_IS_CLASS, _RWSTD_TT_IS_POD, _RWSTD_TT_IS_EMPTY)", 
   "(_RWSTD_TT_IS_POLYMORPHIC, _RWSTD_TT_IS_ABSTRACT, _RWSTD_TT_IS_BASE_OF)", 
   "(_RWSTD_TT_HAS_TRIVIAL_CTOR, _RWSTD_TT_HAS_TRIVIAL_COPY)", 
   "(_RWSTD_TT_HAS_TRIVIAL_ASSIGN, _RWSTD_TT_HAS_TRIVIAL_DTOR)", 
   "(_RWSTD_TT_HAS_NOTHROW_CTOR, _RWSTD_TT_HAS_NOTHROW_COPY)", 
   "(_RWSTD_TT_HAS_TRIVIAL_ASSIGN, _RWSTD_TT_HAS_VIRTUAL_DTOR)", 
   "(_RWSTD_TT_ALIGN_OF, _RWSTD_ALIGNED_POD, _RWSTD_MAX_ALIGNMENT): Add", 
   "macros for compiler support.", 
   "* include/rw/_config-msvc.h [_RWSTD_TT_IS_ENUM, _RWSTD_TT_IS_UNION)", 
   "(_RWSTD_TT_IS_CLASS, _RWSTD_TT_IS_POD, _RWSTD_TT_IS_EMPTY)", 
   "(_RWSTD_TT_IS_POLYMORPHIC, _RWSTD_TT_IS_ABSTRACT, _RWSTD_TT_IS_BASE_OF)", 
   "(_RWSTD_TT_IS_CONVERTIBLE, _RWSTD_TT_HAS_VIRTUAL_DTOR)", 
   "(_RWSTD_TT_HAS_TRIVIAL_CTOR, _RWSTD_TT_HAS_TRIVIAL_ASSIGN)", 
   "(_RWSTD_TT_HAS_TRIVIAL_COPY, _RWSTD_TT_HAS_TRIVIAL_DTOR)", 
   "(_RWSTD_TT_HAS_NOTHROW_CTOR, _RWSTD_TT_HAS_NOTHROW_ASSIGN)", 
   "(_RWSTD_TT_HAS_NOTHROW_COPY, _RWSTD_TT_ALIGN_OF, _RWSTD_TT_ALIGNED_POD)", 
   "(_RWSTD_TT_MAX_ALIGNMENT): Ditto.", 
   "* include/rw/_config.h [_RWSTD_EXT_CXX_OX]: Disable C++0x", 
   "extensions unless defined.", 
   "* include/rw/_defs.h (_RWSTD_SWCHAR_INT_T): Add new macro that", 
   "defines a type that has same size and layout a the fictional", 
   "signed wchar_t.", 
   "(_RWSTD_UWCHAR_INT_T): Modify definition to handle case where", 
   "unsigned long is not the same size as unsigned int. Add case for", 
   "unsigned long long.", 
   "* etc/config/src/STATIC_ASSERT.cpp: Add configuration test to", 
   "check for C++0x static_assert.", 
   "* include/rw/_static_assert.h (_RWSTD_STATIC_ASSERT): Add a", 
   "helper macro and fallback implementation for static_assert.", 
   "STDCXX-917", 
   "* include/rw/_meta_help.h: New file includes definitions for", 
   "traits classes.", 
   "* tests/utilities/20.meta.help.cpp: Disable all C++0x code unless", 
   "explicitly enabled. Update copyright and comment.", 
   "STDCXX-918", 
   "* include/rw/_meta_cat.h: New file includes definitions for", 
   "trait classes.", 
   "* tests/utilities/20.meta.unary.cat.cpp: Add test.", 
   "STDCXX-919", 
   "* include/rw/_meta_comp.h: New file includes definitions for", 
   "trait classes.", 
   "* tests/utilities/20.meta.unary.comp.cpp: Add test.", 
   "STDCXX-920", 
   "* include/rw/_meta_prop.h: New file includes definitions for", 
   "trait classes.", 
   "* tests/utilities/20.meta.unary.prop.cpp: Add test.", 
   "STDCXX-921", 
   "* include/rw/_meta_rel.h: New file includes definitions for", 
   "trait classes.", 
   "* tests/utilities/20.meta.rel.cpp: Add test.", 
   "STDCXX-922", 
   "* include/rw/_meta_cv.h: New file includes definitions for", 
   "trait classes.", 
   "* tests/utilities/20.meta.trans.cv.cpp: Add test.", 
   "STDCXX-922", 
   "* include/rw/_meta_cv.h: New file includes definitions for", 
   "trait classes.", 
   "* tests/utilities/20.meta.trans.cv.cpp: Add test.", 
   "STDCXX-923", 
   "* include/rw/_meta_ref.h: New file includes definitions for", 
   "trait types.", 
   "* tests/utilities/20.meta.trans.ref.cpp: Add test.", 
   "STDCXX-924", 
   "* include/rw/_meta_arr.h: New file includes definitions for", 
   "traits classes.", 
   "* tests/utilities/20.meta.trans.arr.cpp: Add test.", 
   "STDCXX-925", 
   "* include/rw/_meta_ptr.h: New file includes definitions for", 
   "traits classes.", 
   "* tests/utilities/20.meta.trans.ptr.cpp: Add test.", 
   "STDCXX-926", 
   "* include/rw/_meta_other.h: New file includes definitions for", 
   "traits classes.", 
   "* tests/utilities/20.meta.trans.other.cpp: Add test.", 
   "STDCXX-947", 
   "* include/rw/_meta_sign.h: New file includes definitions for", 
   "traits classes.", 
   "* tests/utilities/20.meta.trans.sign.cpp: Add test."
  ], 
  "revision_id": "667365"
 }, 
 {
  "author": "stack", 
  "date": "2008-06-13T05:50:00.435566Z", 
  "msg": [
   "HBASE-487 Replace hql w/ a hbase-friendly jirb or jython shell", 
   "M  bin/HBase.rb", 
   "Remove Module-level constants.  Move them instead back into", 
   "HColumnDescriptor, etc. and read them from there.", 
   "(describe): Added.", 
   "M  bin/hirb.rb", 
   "Fixed up comments.  Added TODOs.", 
   "Add here the constants from HColumnDescriptor and HTableDescriptor", 
   "Use HERE doc. for main help."
  ], 
  "revision_id": "667364"
 }, 
 {
  "author": "bommel", 
  "date": "2008-06-13T05:48:35.277687Z", 
  "msg": [
   "(TOBAGO-675) A redisplayed popup blocks the page"
  ], 
  "revision_id": "667363"
 }, 
 {
  "author": "bommel", 
  "date": "2008-06-13T05:45:22.562266Z", 
  "msg": [
   "(TOBAGO-680) Allow relative id of the popup in popupReferenceTag"
  ], 
  "revision_id": "667362"
 }, 
 {
  "author": "gertv", 
  "date": "2008-06-13T05:44:27.460182Z", 
  "msg": [
   "SM-1397: Camel JBI endpoint should honor explicit ?mep being set"
  ], 
  "revision_id": "667361"
 }
]