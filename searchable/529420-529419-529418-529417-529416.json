[
 {
  "author": "elecharny", 
  "date": "2007-04-16T22:22:43.511617Z", 
  "msg": [
   "Removed useless imports"
  ], 
  "revision_id": "529420"
 }, 
 {
  "author": "dkulp", 
  "date": "2007-04-16T22:13:05.602287Z", 
  "msg": [
   "Update the ?wsdl stuff to re-write all the import/includes with new ?wsdl and ?xsd versions.   (this is a start.  It probably breaks with existing absolute includes/imports)"
  ], 
  "revision_id": "529419"
 }, 
 {
  "author": "bago", 
  "date": "2007-04-16T22:06:24.093231Z", 
  "msg": [
   "Refactored the Policy support from Nested (Policy/NestedPolicy/AbstractNestedPolicy) to Policy+PolicyPostFilter and linear iterative pattern (simpler to be approached via events)."
  ], 
  "revision_id": "529418"
 }, 
 {
  "author": "mharwood", 
  "date": "2007-04-16T22:04:07.174154Z", 
  "msg": [
   "Fixed Junit failure due to recent change in QueryParser default behaviour. Needed to explicitly require old style of RangeQuery implementation rather than new default of RangeFilters"
  ], 
  "revision_id": "529417"
 }, 
 {
  "author": "sichen", 
  "date": "2007-04-16T21:57:34.772965Z", 
  "msg": [
   "Adding the getOrderItemValue service, which calculates the value of a given orderItem by totalling the item subtotal, any adjustments for that item, and the item's share of any order-level adjustments. The last is calculated by applying the percentage of the items total that the item represents to the order-level adjustments total - EG if the item subtotal is $10, the total value of all items and item-level adjustments is $50, and the total of order-level adjustments is $5, the service will claim that the orderItem's value is $11."
  ], 
  "revision_id": "529416"
 }
]