[
 {
  "author": "costin", 
  "date": "2001-11-16T22:37:13.000000Z", 
  "msg": [
   "Get the number of mappings in uri_worker_map, quick exit if none.", 
   "( it is possible to configure mod_jk using setHandler, we don't want extra overhead )"
  ], 
  "revision_id": "295974"
 }, 
 {
  "author": "costin", 
  "date": "2001-11-16T22:33:30.000000Z", 
  "msg": [
   "Added a sample on how to use gcj task ( don't try to use it, it'll not work with", 
   "the released gcc ). Gcj support is extremely experimental in jkant - it's just", 
   "an example of a compiler using complex options that can be plugged without too", 
   "much effort into jkant.", 
   "( of course, that's nothing compared with what Henri is trying to do with", 
   "his exotic compilers )"
  ], 
  "revision_id": "295973"
 }, 
 {
  "author": "costin", 
  "date": "2001-11-16T22:26:50.000000Z", 
  "msg": [
   "Important change - allow the compilation of static files ( .properties, .dtd, etc ).", 
   "GCJ can 'compile' those resources to .o files that are linked in the .so, in", 
   "order to have a self-contained executable. ( it's the same with including them in", 
   "a .jar file, for non-native compilation )", 
   "Added an experimental option to build .a file ( not yet completed - I'm still", 
   "not sure how this work )"
  ], 
  "revision_id": "295972"
 }, 
 {
  "author": "costin", 
  "date": "2001-11-16T22:23:22.000000Z", 
  "msg": [
   "Changes in the implementation, reflecting api changes."
  ], 
  "revision_id": "295971"
 }, 
 {
  "author": "costin", 
  "date": "2001-11-16T22:21:53.000000Z", 
  "msg": [
   "Same changes as in CompilerAdapter - use abstract class, base functionality."
  ], 
  "revision_id": "295970"
 }
]