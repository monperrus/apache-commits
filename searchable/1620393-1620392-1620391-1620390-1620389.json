[
 {
  "author": "andy", 
  "date": "2014-08-25T18:01:09.249364Z", 
  "msg": [
   "JENA-763 : Add OpExt.apply(trasnaform,before,after) and call from quad transformation."
  ], 
  "revision_id": "1620393"
 }, 
 {
  "author": "dag", 
  "date": "2014-08-25T17:57:08.138019Z", 
  "msg": [
   "DERBY-6619 After silently swallowing SecurityExceptions, Derby can leak class loaders", 
   "Backported from trunk svn 1620385.", 
   "Patch derby-6619-2-refinement which implements the following", 
   "refinements to the test to avoid changing the context class loader in", 
   "SingletonTimerFactory (suggested by Knut):", 
   "The orginal test tested against the system class loader. This new", 
   "patch will:", 
   "1) Check if the context class loader is the same as the loader of the", 
   "SingletonTimerFactory class (that is, the class loader from which", 
   "Derby classes are loaded). Even if this isn't the same as the system", 
   "class loader, it would be safe to skip the workaround for DERBY-3745,", 
   "since the class loader for the Derby classes would not be eligible for", 
   "garbage collection until the engine is shut down anyway. This would", 
   "prevent some more false positives from being reported in", 
   "derby.log. I'd assume this is a kind of false positive that could", 
   "easily occur in an application server environment where the Derby", 
   "classes are not found on the system class loader.", 
   "2) Check against Thread.class.getClassLoader() instead of", 
   "ClassLoader.getSystemClassLoader(). Normally, those two checks would", 
   "be identical. If however the setup is such that they aren't identical,", 
   "we'd still know that the class loader actually used for system classes", 
   "such as the Thread class would have to stay in memory for as long as", 
   "the timer thread is alive, regardless of the context class loader of", 
   "the thread, so the workaround for DERBY-3745 can be skipped if it's", 
   "the same as the context class loader. The check will be a bit more", 
   "specific this way."
  ], 
  "revision_id": "1620392"
 }, 
 {
  "author": "dag", 
  "date": "2014-08-25T17:53:31.845763Z", 
  "msg": [
   "DERBY-6619 After silently swallowing SecurityExceptions, Derby can leak class loaders", 
   "Backport from trunk svn 1620378.", 
   "Patch derby-6619-2.", 
   "The fix introduced in DERBY-3745 correctly is there in order to", 
   "protect against the case where the thread that starts Derby, has a", 
   "context class loader that is different from the system class", 
   "loader. In such cases, if the timer thread inherits the context class", 
   "loader, the context class loader will stay in memory until the Derby", 
   "engine is shut down, even if all other references to the class loader", 
   "are gone.", 
   "If the context class loader is the same as the system class loader, on", 
   "the other hand, such a \"leak\" would not be a problem, since the system", 
   "class loader will stay in memory until the JVM is shut down anyway.", 
   "We take advantage of this and only attempt to change the context class", 
   "loader if it is different from the system class loader. With this", 
   "patch, no warning is printed to derby.log when starting the server", 
   "from the command line, and there's no warning when starting the server", 
   "using the API with a security manager installed when the context class", 
   "loader hasn't been changed from the default. However, if the server is", 
   "started using the API with a non-default context class loader, we do", 
   "see warnings in derby.log if a security manager is installed and the", 
   "permission to set the class loader is missing.", 
   "Added tests for this behavior. Moved utility methods from", 
   "UpgradeClassLoader to ClassLoaderTestSetup, a new decorator. It seemed", 
   "more logical to put them there to allow reuse."
  ], 
  "revision_id": "1620391"
 }, 
 {
  "author": "andy", 
  "date": "2014-08-25T17:48:30.796095Z", 
  "msg": [
   "JENA-767 ; \\b is a JSON escape"
  ], 
  "revision_id": "1620390"
 }, 
 {
  "author": "dag", 
  "date": "2014-08-25T17:47:18.002033Z", 
  "msg": [
   "DERBY-6680 Other jar files may need to be granted permission to read derby.ui.* properties", 
   "Backported from trunk at svn 1620378.", 
   "derby-6680-2. This patch moves the reading of the two system", 
   "properties up into NetworkServerControlImpl. Other usage of", 
   "LocalizedResource is unaffected and might still try to read those", 
   "system properties, i.e. as called from ij. This side-steps the problem", 
   "so no further permissions need be granted.", 
   "Removes the note about LocalizedResource in the policy template file."
  ], 
  "revision_id": "1620389"
 }
]