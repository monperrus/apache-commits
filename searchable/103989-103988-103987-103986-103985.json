[
 {
  "author": "joes", 
  "date": "2004-06-19T20:03:59.000000Z", 
  "msg": [
   "Fully specify parser's behavior wrt input brigade. Parsers will never destroy it, and sometimes will not even clean it up completely (see comments on rejected buckets in apreq_params.h)."
  ], 
  "revision_id": "103989"
 }, 
 {
  "author": "joes", 
  "date": "2004-06-19T19:43:20.000000Z", 
  "msg": [
   "Note today's back-compat commit for Apache::Cookie->fetch"
  ], 
  "revision_id": "103988"
 }, 
 {
  "author": "joes", 
  "date": "2004-06-19T16:52:02.000000Z", 
  "msg": [
   "Minor changes & comments on new filter logic."
  ], 
  "revision_id": "103987"
 }, 
 {
  "author": "nd", 
  "date": "2004-06-19T16:39:17.000000Z", 
  "msg": [
   "vote && note"
  ], 
  "revision_id": "103986"
 }, 
 {
  "author": "joes", 
  "date": "2004-06-19T15:48:17.000000Z", 
  "msg": [
   "Subsume apreq_filter_init cruft into apreq_filter.  The logic is both simpler and more reliable because filter_init isn't guaranteed to ever be called with apreq.  It's also faster this way because we can now reuse the preparsed data instead of starting over with a new filter.  One example situation is where both an auth handler and the content handler are using apreq. During filter_init, the old code will drop the preparsed data from the auth handler, then the content-handler will install a brand new apreq filter and start all over.  Now they'll share the same filter and parsed data, and internal redirects still work correctly (this was the big stumbling block)."
  ], 
  "revision_id": "103985"
 }
]