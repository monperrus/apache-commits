[
 {
  "author": "butek", 
  "date": "2002-02-21T18:45:27.000000Z", 
  "msg": [
   "SOAPStruct is a bean.  It is translated to WSDL as:", 
   "<complexType name=\"SOAPStruct\">", 
   "<all>", 
   "<element name=\"varFloat\" type=\"xsd:float\"/>", 
   "<element name=\"varInt\" type=\"xsd:int\"/>", 
   "<element name=\"varString\" nillable=\"true\" type=\"xsd:string\"/>", 
   "</all>", 
   "</complexType>", 
   "Note the <all> tag (NOT <sequence>).  <all> means there's no order.  The tests call", 
   "a SOAPStruct constructor that assumes order a certain order.  This order is not", 
   "guaranteed.  In fact, we've run across a situation where it IS different - though we", 
   "haven't bothered to figure out why)."
  ], 
  "revision_id": "246469"
 }, 
 {
  "author": "glyn", 
  "date": "2002-02-21T14:58:41.000000Z", 
  "msg": [
   "Add missing half of map comparison logic."
  ], 
  "revision_id": "246468"
 }, 
 {
  "author": "butek", 
  "date": "2002-02-21T14:33:58.000000Z", 
  "msg": [
   "Fix a bug and be consistent.  Use the class loader everywhere Class.forName is", 
   "used.  Contributed by Greg Truty."
  ], 
  "revision_id": "246467"
 }, 
 {
  "author": "gdaniels", 
  "date": "2002-02-21T04:28:27.000000Z", 
  "msg": [
   "Bulletproof SerializationContextImpl a little more by always using the", 
   "default TypeMapping even if there's no MessageContext at all.", 
   "Add a unit test which exercises toString() on an RPCElement which was", 
   "dynamically created and therefore has no current MessageContext."
  ], 
  "revision_id": "246466"
 }, 
 {
  "author": "gdaniels", 
  "date": "2002-02-21T04:01:48.000000Z", 
  "msg": [
   "In case there isn't a deserialization context available when trying to", 
   "string-ize a MessageElement (for instance, when the MessageElement", 
   "has been dynamically created), just use whatever the current", 
   "MessageContext is to get the TypeMappings which are in scope.", 
   "This fixes a bug discovered by Romin Irani (thanks, Romin!)"
  ], 
  "revision_id": "246465"
 }
]