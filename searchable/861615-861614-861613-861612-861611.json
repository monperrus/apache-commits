[
 {
  "author": "dlr", 
  "date": "2006-09-18T21:33:06.870421Z", 
  "msg": [
   "* www/commercial-support.html: Fix typo.", 
   "Found by: djames"
  ], 
  "revision_id": "861615"
 }, 
 {
  "author": "glasser", 
  "date": "2006-09-18T21:31:25.528012Z", 
  "msg": [
   "Identify unmodified transaction root nodes in FSFS as such, and make", 
   "sure that svn_fs_node_created_rev returns their base revision instead", 
   "of SVN_INVALID_REVNUM, which is compatible with BDB.", 
   "(Resolves issue #2608.)", 
   "* subversion/libsvn_fs_fs/fs.h", 
   "(node_revision_t): Add is_fresh_txn_root field.", 
   "* subversion/libsvn_fs_fs/fs_fs.c", 
   "(HEADER_FRESHTXNRT): Add constant to represent is_fresh_txn_root.", 
   "(svn_fs_fs__get_node_revision): Read is_fresh_txn_root.", 
   "(write_noderev_txn): Write is_fresh_txn_root.", 
   "(svn_fs_fs__put_node_revision): Take a parameter saying whether", 
   "the written node is a fresh root.", 
   "(create_new_txn_noderev_from_rev): Document that this is only called", 
   "for fresh roots, and change call to svn_fs_fs__put_node_revision to", 
   "pass TRUE for new parameter.", 
   "(svn_fs_fs__create_node, svn_fs_fs__set_entry, rep_write_contents_close,", 
   "svn_fs_fs__create_successor, svn_fs_fs__set_proplist, write_final_rev):", 
   "Pass FALSE for new parameter to svn_fs_fs__put_node_revision.", 
   "* subversion/libsvn_fs_fs/fs_fs.h", 
   "(svn_fs_fs__put_node_revision): Take a parameter saying whether", 
   "the written node is a fresh root.", 
   "* subversion/libsvn_fs_fs/tree.c", 
   "(update_ancestry): Pass FALSE for new parameter to", 
   "svn_fs_fs__put_node_revision.", 
   "* subversion/libsvn_fs_fs/dag.c", 
   "(dag_node_t): Add fresh_root_predecessor_id field.", 
   "(svn_fs_fs__dag_get_node): Initialize fresh_root_predecessor_id based", 
   "on noderev's is_fresh_txn_root and predecessor_id.", 
   "(svn_fs_fs__dag_get_revision): Look up revision in", 
   "fresh_root_predecessor_id if available.", 
   "* subversion/tests/cmdline/prop_tests.py", 
   "(test_list): Remove XFail from commit_conflict_dirprops.", 
   "* subversion/tests/libsvn_fs/fs-test.c", 
   "(test_funcs): Remove XFAIL from test_node_created_rev."
  ], 
  "revision_id": "861614"
 }, 
 {
  "author": "dlr", 
  "date": "2006-09-18T21:30:28.903706Z", 
  "msg": [
   "* www/project_status.html: Fix invalid XHTML."
  ], 
  "revision_id": "861613"
 }, 
 {
  "author": "dlr", 
  "date": "2006-09-18T21:25:24.829370Z", 
  "msg": [
   "Update \"Commercial support\" link.", 
   "* www/commercial-support.html", 
   "Add skeletal \"Commericial support\" page for endorsed vendors, rather", 
   "than linking directly to CollabNet's web site.", 
   "* www/project_tools.html", 
   "Change \"Commercial support\" link to reference our new endorsed", 
   "vendors page."
  ], 
  "revision_id": "861612"
 }, 
 {
  "author": "glasser", 
  "date": "2006-09-18T21:20:34.054650Z", 
  "msg": [
   "Add \"make svnserveautocheck\", which runs and cleans up", 
   "an svnserve for you.", 
   "* subversion/tests/cmdline/svnserveautocheck.sh", 
   "New script which runs svnserve, make check, and cleans up.", 
   "* Makefile.in", 
   "(svnserveautocheck): New target, running the new script.", 
   "(check-clean): Clean up stray PID file.", 
   "* subversion/tests: Ignore PID file."
  ], 
  "revision_id": "861611"
 }
]