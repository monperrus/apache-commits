[
 {
  "author": "kfogel", 
  "date": "2003-01-31T22:47:31.142393Z", 
  "msg": [
   "* subversion/libsvn_wc/adm_crawler.c", 
   "(svn_wc_transmit_text_deltas): Remove horrifying `else' condition,", 
   "so that we always open the text base once we've gotten past the", 
   "checksum comparison.  This was part of a series of amazing,", 
   "interrelated coincidences that led to us never transmitting true", 
   "textdeltas for commits.  First, we initialize basefile to null at", 
   "the top of the function.  Second, the aforementioned horrifying", 
   "`else', which meant that basefile almost always remained null.", 
   "Third, it turns out that svn_stream_from_aprfile() has a special", 
   "\"convenience\" case for the null apr file -- it returns the generic", 
   "empty stream.  Yay!  Happy!  So we ended up generating a delta", 
   "against the empty stream, which is just like sending the fulltext,", 
   "only more work.", 
   "Unrelatedly, add a comment about renaming instead of copying."
  ], 
  "revision_id": "844765"
 }, 
 {
  "author": "kfogel", 
  "date": "2003-01-31T22:18:02.007520Z", 
  "msg": [
   "* subversion/bindings/ruby/delta_editor.c", 
   "(ce_apply_textdelta): Expand comment a bit, for whoever ends up", 
   "converting this editor.  (I'm not planning to, as there are Ruby", 
   "bindings experts who can do it, and test it, much more quickly.)"
  ], 
  "revision_id": "844764"
 }, 
 {
  "author": "mbk", 
  "date": "2003-01-31T21:08:41.474688Z", 
  "msg": [
   "Miscellaneous documentation, error-message, and formatting changes", 
   "based on code-review from Karl Fogel.  Thanks, Karl!", 
   "* subversion/include/svn_fs.h:", 
   "(svn_fs_get_uuid, svn_fs_set_uuid): remove redundant documentation", 
   "* subversion/libsvn_fs/bdb/uuids-table.c:", 
   "(svn_fs__bdb_open_uuids_table): mention that creation of the uuids", 
   "table also initializes the repository UUID.", 
   "(svn_fs__bdb_set_uuid): correction of error message.", 
   "* subversion/libsvn_fs/fs.c:", 
   "(svn_fs_open_berkeley): correction of error messages.", 
   "* subversion/libsvn_wc/entries.c:", 
   "(write_entry): formatting change."
  ], 
  "revision_id": "844763"
 }, 
 {
  "author": "mbk", 
  "date": "2003-01-31T16:31:57.315663Z", 
  "msg": [
   "Work on issue #1037 (repository should get GUID/UUID at creation time).", 
   "Various approaches have been discussed at length on the dev mailing-list;", 
   "the current consensus is that", 
   "1.) this is important functionality", 
   "2.) almost any implementation is better than no implementation", 
   "In that light, this change adds a new BDB table to the FS: uuids.", 
   "The table is a RECNO table, with fixed-length records of length", 
   "sizeof(uuid).  The first record in this table is considered the", 
   "repository's own UUID.  This value is preserved across dump/load", 
   "cycles.  If one wants to load without changing the UUID, the option", 
   "\"--ignore-uuid\" can be passed to \"svnadmin load\".", 
   "* subversion/svnadmin/main.c", 
   "(svnadmin__ignore_uuid): new option enum", 
   "(options_table): add entry for --ignore-uuid", 
   "(cmd_table): update entry for \"load\" to include svnadmin__ignore_uuid", 
   "(svnadmin_opt_state): added \"ignore_uuid\" member", 
   "(subcommand_load): pass ignore_uuid state to svn_repos_load_fs", 
   "(main): handle svnadmin__ignore_uuid option.", 
   "* subversion/include/svn_fs.h", 
   "(svn_fs_get_uuid, svn_fs_set_uuid): prototypes for new functions.", 
   "* subversion/include/svn_repos.h", 
   "(SVN_REPOS_DUMPFILE_UUID): Macro for UUID header.", 
   "(svn_repos_parse_fns_t): added \"uuid_record\", a pointer to", 
   "a function that handles UUID records.", 
   "(svn_repos_load_fs, svn_repos_get_fs_build_parser): added", 
   "\"ignore_uuid\" parameter.", 
   "* subversion/include/svn_props.h", 
   "(SVN_REPOS_ENTRY_UUID): Macro for svn:entry:uuid prop.", 
   "* subversion/include/svn_wc.h:", 
   "(svn_wc_entry_t): added \"uuid\".", 
   "* subversion/libsvn_fs/uuid.c, subversion/libsvn_fs/bdb/uuids-table.c,", 
   "subversion/libsvn_fs/bdb/uuids-table.h: New files.", 
   "* subversion/libsvn_fs/fs.c: Added include of \"bdb/uuids-table.h\"", 
   "(cleanup_fs): Cleanup fs->uuids.", 
   "(svn_fs_create_berkeley): Create uuids table.", 
   "(svn_fs_open_berkeley): Open uuids table.", 
   "* subversion/libsvn_fs/fs.h", 
   "(svn_fs_t): Added \"uuids\" DB member.", 
   "* subversion/libsvn_wc/entries.c", 
   "(svn_wc__attrs_to_entry, write_entry): handle SVN_WC__ENTRY_ATTR_UUID", 
   "(fold_entry): handle SVN_WC__ENTRY_MODIFY_UUID", 
   "* subversion/libsvn_wc/entries.h", 
   "(SVN_WC__ENTRY_ATTR_UUID): Macro for uuid xml-entry-attribute.", 
   "(SVN_WC__ENTRY_MODIFY_UUID): Macro for bit to indicate changes", 
   "to the UUID.", 
   "* subversion/libsvn_wc/update_editor.c", 
   "(change_dir_prop): handle SVN_PROP_ENTRY_UUID.", 
   "(svn_wc_install_file): handle SVN_PROP_ENTRY_UUID.", 
   "* subversion/libsvn_repos/dump.c", 
   "(svn_repos_dump_fs): include UUID in new section immediately after", 
   "magic header.", 
   "* subversion/libsvn_repos/checkout.c", 
   "(set_any_props): Simulate the presence of a UUID property on all entries.", 
   "* subversion/libsvn_repos/load.c", 
   "(svn_repos_parse_dumpstream): Handle a UUID section; call uuid_record().", 
   "(uuid_record): New function.", 
   "(svn_repos_get_fs_build_parser): Set parser->uuid_record to point to", 
   "uuid_record when appropriate."
  ], 
  "revision_id": "844762"
 }, 
 {
  "author": "sussman", 
  "date": "2003-01-31T15:35:39.075463Z", 
  "msg": [
   "Continue issue #724 (libsvn_auth):  temporary bugfix.", 
   "* svn_auth.h auth.c (svn_auth_save_credentials): for now, stop", 
   "throwing error if the creds can't be saved.  This stupid behavior", 
   "was causing *any* authenticated command outside a WC to throw error!"
  ], 
  "revision_id": "844761"
 }
]