[
 {
  "author": "almaw", 
  "date": "2007-06-19T16:36:13.451602Z", 
  "msg": [
   "WICKET-501 - Back up to search for whether we're a regexp or not."
  ], 
  "revision_id": "548790"
 }, 
 {
  "author": "markh", 
  "date": "2007-06-19T16:32:57.817896Z", 
  "msg": [
   "[MNG-3039] mvn.bat fails", 
   "Fixing same problem for trunk."
  ], 
  "revision_id": "548789"
 }, 
 {
  "author": "almaw", 
  "date": "2007-06-19T16:23:50.899145Z", 
  "msg": [
   "WICKET-501 - JavaScript comment stripping doesn't handle regexps"
  ], 
  "revision_id": "548788"
 }, 
 {
  "author": "markh", 
  "date": "2007-06-19T16:22:11.484643Z", 
  "msg": [
   "Ensure verifier resets streams if an exception is thrown when obtaining the Maven version, otherwise the error is consumed."
  ], 
  "revision_id": "548787"
 }, 
 {
  "author": "gsim", 
  "date": "2007-06-19T16:21:07.188807Z", 
  "msg": [
   "Blocked revisions 540511 via svnmerge", 
   "........", 
   "r540511 | gsim | 2007-05-22 10:50:45 +0100 (Tue, 22 May 2007) | 11 lines", 
   "Patch submitted to qpid-dev by ksmith@redhat.com. Fixes concurrency issues arising from previous move to use singleton apr pool.", 
   "\"My patch does three things:", 
   "1) Modifies the APRPool class to use alloc/free semantics for APR memory pools. Each time a caller calls APRPool::get() they'll their own pool reference. I've fixed up all the call sites I can find to also call APRPool::free() at the appropriate time.", 
   "2) Caches freed APR memory pools in a STL stack. This cuts down on the number of memory pools created overall.", 
   "3) As a result of doing #1 and #2 I've introduced a guard mutex around APRPool::get() and APRPool::free(). This is to prevent concurrent access to the memory pool cache. If it's too heavyweight, the mutex along with the caching mechanism could be removed entirely.\"", 
   "........"
  ], 
  "revision_id": "548786"
 }
]