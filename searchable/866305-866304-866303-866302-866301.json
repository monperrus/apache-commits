[
 {
  "author": "hwright", 
  "date": "2007-08-21T19:01:02.229530Z", 
  "msg": [
   "Check for the existence of the blame chunks, not just the chain itself", 
   "before normalizing original and merged blame chains.  Followup to r26211.", 
   "* subversion/libsvn_client/blame.c", 
   "(svn_client_blame4): Create blame chunks for the orginal blame chain if", 
   "none exist."
  ], 
  "revision_id": "866305"
 }, 
 {
  "author": "kfogel", 
  "date": "2007-08-21T18:57:46.237712Z", 
  "msg": [
   "* subversion/include/svn_repos.h (svn_repos_begin_report2): Doc string", 
   "corrections, following up to r26222."
  ], 
  "revision_id": "866304"
 }, 
 {
  "author": "pburba", 
  "date": "2007-08-21T17:21:51.599634Z", 
  "msg": [
   "Support non-inheritable mergeinfo revision ranges and fix remaining issues", 
   "with switched paths and mergeinfo.", 
   "Fixes the following two issues:", 
   "Issue #2839 - Support non-inheritable mergeinfo revision ranges.", 
   "Issue #2823 - Account for merge info differences for switched directories.", 
   "* subversion/include/private/svn_mergeinfo_private.h", 
   "(svn_mergeinfo__equals): Add argument indicating how to take revision", 
   "range inheritance into account when determining equality.", 
   "* subversion/include/svn_mergeinfo.h", 
   "(SVN_MERGEINFO_NONINHERITABLE_STR): New definition of the non-inheritable", 
   "flag for svn:mergeinfo, i.e. '*'.", 
   "(svn_mergeinfo_diff, svn_mergeinfo_merge, svn_rangelist_diff,", 
   "svn_rangelist_merge, svn_rangelist_remove): Add argument indicating how to", 
   "take revision range inheritance into account.", 
   "(svn_rangelist_inheritable, svn_mergeinfo_inheritable): New declarations.", 
   "* subversion/include/svn_types.h", 
   "(svn_merge_range_t): Add member indicating if range is inheritable.", 
   "(svn_merge_range_inheritance_t): New enum describing ways to consider", 
   "inheritability when comparing two svn_merge_range_t.", 
   "* subversion/libsvn_client/copy.c", 
   "(get_implied_mergeinfo): Initialize new svn_merge_range_t member.", 
   "(calculate_target_mergeinfo, extend_wc_mergeinfo, wc_to_repos_copy): Update", 
   "calls to svn_mergeinfo_merge().", 
   "* subversion/libsvn_client/diff.c", 
   "(display_mergeinfo_diff): Update call to svn_mergeinfo_diff().", 
   "* subversion/libsvn_client/merge.c", 
   "(merge_cmd_baton): Add two new members to track if merge target has any", 
   "immediate children missing and if the target has pre-existing mergeinfo.", 
   "(get_wc_mergeinfo, ): Remove non-inheritable revision ranges if mergeinfo", 
   "isn't explicit.", 
   "(elide_mergeinfo): Update calls to svn_mergeinfo__equals().", 
   "(merge_path_t): New struct used by discover_and_merge_children() and", 
   "consumers of the children_with_mergeinfo array it populates.", 
   "(elide_children): Tweak docstring and implementation to reflect that", 
   "children_with_mergeinfo array is now an array of merge_path_t * rather than", 
   "const char *.", 
   "(calculate_requested_ranges): Update calls to svn_mergeinfo_diff() and", 
   "svn_rangelist_remove().", 
   "(calculate_merge_ranges): Update calls to svn_rangelist_remove().", 
   "(update_wc_mergeinfo): Update calls to svn_rangelist_remove() and", 
   "svn_rangelist_merge().", 
   "(grok_range_info_from_opt_revisions): Tweak docstring and implementation", 
   "re svn_merge_range_t inheritable member.", 
   "(do_merge): Tweak docstring and implementation to reflect that", 
   "children_with_mergeinfo array is now an array of merge_path_t * rather than", 
   "const char *.  Add argument indicating whether the target_wcpath is missing", 
   "any immediate children.  Add another argument with the index of the", 
   "target_wcpath, if it exists, in children_with_mergeinfo (since the callers", 
   "know this it saves us searching through the array to find it).  Rename", 
   "children_sw_or_with_mergeinfo argument back to children_with_mergeinfo,", 
   "since its contents are now expanded beyond just switched paths and/or paths", 
   "with explicit mergeinfo (i.e. siblings of switched paths, parents of", 
   "switched paths).  And lastly, handle the edge case where a repeat merge", 
   "makes non-inheritable ranges inheritable because the target is no longer", 
   "missing any immediate children.", 
   "(get_sw_mergeinfo_walk_baton, get_sw_mergeinfo_walk_cb,", 
   "get_sw_mergeinfo_error_handler, get_sw_mergeinfo_paths): Renamed to", 
   "remove \"_sw\" - see comment for do_merge above as to why.", 
   "get_mergeinfo_error_handler): New (renames, see above).  Tweak docstrings", 
   "and implmentations as needed to reflect fact that", 
   "wb->children_with_mergeinfo array is now an array of merge_path_t * rather", 
   "than const char *.", 
   "(find_child_or_parent, insert_child_to_merge,", 
   "compare_merge_path_t_as_paths): Helpers for get_mergeinfo_paths().", 
   "(get_mergeinfo_paths): Renamed from get_sw_mergeinfo_paths().  Expand", 
   "implementation to find not only paths with mergeinfo and switched paths,", 
   "but also siblings of switched paths and parents of switched paths.", 
   "(discover_and_merge_children): Again, tweak the docstring and implmentation", 
   "to reflect change in children_with_mergeinfo array.", 
   "(svn_client_merge3, svn_client_merge_peg3): Initialize new members of", 
   "merge_cmd_baton and update calls to do_merge().", 
   "* subversion/libsvn_fs_util/mergeinfo-sqlite-index.c", 
   "(SVN_MTD_CREATE_SQL): Add inheritable field when creating mergeinfo table.", 
   "(index_path_mergeinfo): Insert new field into mergeinfo table.", 
   "(parse_mergeinfo_from_db): Parse new inheritable field.", 
   "(get_mergeinfo_for_path): Remove non-inheritable mergeinfo ranges from", 
   "inherited mergeinfo.", 
   "(get_mergeinfo_for_children): Update call to svn_mergeinfo_merge().", 
   "* subversion/libsvn_repos/log.c", 
   "(calculate_branching_copy_mergeinfo): Initialize new svn_merge_range_t", 
   "member.", 
   "(svn_repos__is_branching_copy, get_combined_mergeinfo,", 
   "combine_mergeinfo_rangelists, get_merged_rev_mergeinfo): Update calls to", 
   "svn_mergeinfo_diff(), svn_mergeinfo_merge(), and svn_rangelist_merge().", 
   "* subversion/libsvn_repos/rev_hunt.c", 
   "(get_merged_path_revisions): Update calls to svn_mergeinfo_diff() and", 
   "svn_mergeinfo_merge().", 
   "* subversion/libsvn_subr/mergeinfo.c", 
   "(svn_path.h): New include.", 
   "(combine_ranges, combine_with_lastrange): Add argument indicating how", 
   "to take revision range inheritance into account, referred to as the", 
   "'consider inheritance arg' hereafter.", 
   "(parse_revlist): Handle new SVN_MERGEINFO_NONINHERITABLE_STR in grammar.", 
   "(svn_rangelist_merge): Add consider inheritance arg.  Update calls to", 
   "combine_with_lastrange().", 
   "(inheritance_equal): New helper for range_intersect() and range_contains().", 
   "(range_intersect, range_contains): Add consider inheritance arg.", 
   "(rangelist_intersect_or_remove): Add consider inheritance arg.  Update", 
   "calls to range_intersect() range_contains(), combine_with_lastrange(), and", 
   "combine_ranges().", 
   "(svn_rangelist_intersect): Update call to rangelist_intersect_or_remove().", 
   "(svn_rangelist_remove): Add consider inheritance arg and update call to", 
   "rangelist_intersect_or_remove().", 
   "(svn_rangelist_diff): Add consider inheritance arg and update calls to", 
   "svn_rangelist_remove().", 
   "(walk_mergeinfo_hash_for_diff): Add consider inheritance arg and update", 
   "call to svn_rangelist_diff().", 
   "(svn_mergeinfo_diff): Add consider inheritance arg and update call to", 
   "walk_mergeinfo_hash_for_diff().", 
   "(svn_mergeinfo__equals): Add consider inheritance arg and update call to", 
   "svn_mergeinfo_diff().", 
   "(svn_mergeinfo_merge): Add consider inheritance arg and update call to", 
   "svn_rangelist_merge().", 
   "(svn_mergeinfo_remove): Update call to walk_mergeinfo_hash_for_diff().", 
   "(svn_range_to_stringbuf): Handle new SVN_MERGEINFO_NONINHERITABLE_STR in", 
   "grammar.", 
   "(svn_mergeinfo_inheritable, svn_rangelist_inheritable): New definitions.", 
   "(svn_merge_range_dup): Initialize svn_merge_range_t's new inheritable", 
   "field.", 
   "* subversion/libsvn_wc/props.c", 
   "(diff_mergeinfo_props): Update call to svn_mergeinfo_diff().", 
   "(combine_mergeinfo_props, combine_forked_mergeinfo_props): Update calls to", 
   "svn_mergeinfo_merge().", 
   "* subversion/tests/cmdline/merge_tests.py", 
   "(merge_to_path_with_switched_children): Remove comment about XFail until", 
   "issues 2823 and 2839 are resolved.", 
   "(test_list): Remove XFail from merge_to_path_with_switched_children.", 
   "* subversion/tests/libsvn_subr/mergeinfo-test.c", 
   "(test_diff_mergeinfo): Update call to svn_mergeinfo_diff().", 
   "(test_rangelist_intersect): Initialize svn_merge_range_t's new inheritable", 
   "field.", 
   "(test_merge_mergeinfo): Update calls to svn_mergeinfo_merge().", 
   "(test_remove_rangelist): Update calls to svn_rangelist_remove()."
  ], 
  "revision_id": "866303"
 }, 
 {
  "author": "sussman", 
  "date": "2007-08-21T15:32:35.583849Z", 
  "msg": [
   "A new unit test for processing copyfrom-args during an update.", 
   "* subversion/tests/cmdline/update_tests.py", 
   "(update_handles_copyfrom):  new simple test for issue 503.", 
   "(test_list):  make it XFail() for now."
  ], 
  "revision_id": "866302"
 }, 
 {
  "author": "kameshj", 
  "date": "2007-08-21T12:21:29.802366Z", 
  "msg": [
   "Add XFail Testcase to demonstrate bug #2876", 
   "* subversion/tests/cmdline/svntest/main.py", 
   "(file_substitute): New function.", 
   "* subversion/tests/cmdline/merge_tests.py", 
   "(merge_fails_if_subtree_is_deleted_on_src): New function.", 
   "(test_list): Add XFail test 'merge_fails_if_subtree_is_deleted_on_src'", 
   "to 'test_list'", 
   "Patch by: Senthil Kumaran <senthil@collab.net>", 
   "Suggested by: me"
  ], 
  "revision_id": "866301"
 }
]