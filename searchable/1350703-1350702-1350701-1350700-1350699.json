[
 {
  "author": "rajith", 
  "date": "2012-06-15T17:21:01.840858Z", 
  "msg": [
   "QPID-4027 Added constants FOREVER, IMMEDIATE, SECOND and MINUTE."
  ], 
  "revision_id": "1350703"
 }, 
 {
  "author": "rajith", 
  "date": "2012-06-15T17:20:48.842582Z", 
  "msg": [
   "QPID-4027 Added extension interfaces for Session, Sender and Receiver.", 
   "Added convinience class that converts java long timeout to the C++", 
   "Duration object.", 
   "Added ReceiverManagementDecorator and SenderManagementDecorator that", 
   "provides state management and error handling via the decorator pattern", 
   "for a Receiver and a Sender respectively."
  ], 
  "revision_id": "1350702"
 }, 
 {
  "author": "rajith", 
  "date": "2012-06-15T17:20:29.247828Z", 
  "msg": [
   "QPID-4027 Cleaned up the exception heirarchy and modified the interfaces", 
   "to throw the required exceptions.", 
   "TODO: Add Java doc to denote type of exceptions that could be thrown."
  ], 
  "revision_id": "1350701"
 }, 
 {
  "author": "rajith", 
  "date": "2012-06-15T17:20:12.535425Z", 
  "msg": [
   "QPID-4027 Continuing to fill in the blanks for the CPP implementation.", 
   "Changed the JNILayerException to extend the MessagingException."
  ], 
  "revision_id": "1350700"
 }, 
 {
  "author": "rajith", 
  "date": "2012-06-15T17:19:57.149608Z", 
  "msg": [
   "QPID-4027 Experimented with adding common functionality via Decorators", 
   "as opposed to inheritence. ConnectionManagementDecorator and", 
   "SessionManagementDecorator adds common session/connection management,", 
   "state management, error handling etc.", 
   "The decorator approach allows us to add/remove functionality easily and", 
   "to isolate logic without assuming/depending on base classes like we do", 
   "with our current client.", 
   "Added some extension interfaces under the \"ext\" package that facilitates", 
   "the implementation of the API. This package is not intended to be", 
   "visible to the users."
  ], 
  "revision_id": "1350699"
 }
]