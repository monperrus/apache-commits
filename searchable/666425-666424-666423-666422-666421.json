[
 {
  "author": "dreiss", 
  "date": "2008-06-11T00:58:55.506863Z", 
  "msg": [
   "adding make dialyzer for fun and profit"
  ], 
  "revision_id": "666425"
 }, 
 {
  "author": "dreiss", 
  "date": "2008-06-11T00:58:48.379805Z", 
  "msg": [
   "allow writing binaries in thrift_binary_protocol", 
   "Summary: they come packed in {string, Bin} so pull them out"
  ], 
  "revision_id": "666424"
 }, 
 {
  "author": "dreiss", 
  "date": "2008-06-11T00:58:41.189224Z", 
  "msg": [
   "Fix warning in generated source for alterl bindings", 
   "Summary:", 
   "- Was previously including both the fall-through to the base service as well as the \"dummy\" fallthrough function clause. This generated a warning like:", 
   "gen-erl/redacted_thrift.erl:134: Warning: this clause cannot match because a previous clause at line 132 always matches", 
   "Now we only include the \"dummy\" function if there is no base class to fall through to.", 
   "Test plan: Generated tutorial.thrift and shared.thrift, compiled without warnings", 
   "Notes: It's probably possible to have a circular inheritance graph, which would cause an infinite loop at runtime. Do we care about this?"
  ], 
  "revision_id": "666423"
 }, 
 {
  "author": "dreiss", 
  "date": "2008-06-11T00:58:33.200494Z", 
  "msg": [
   "Implement inheritance in the alterl generator", 
   "Summary:", 
   "- Simply forwards function_info calls through to the base service", 
   "Test plan: cpiro will test it?"
  ], 
  "revision_id": "666422"
 }, 
 {
  "author": "dreiss", 
  "date": "2008-06-11T00:58:25.052706Z", 
  "msg": [
   "Implement TApplicationException handling in alt_erl client", 
   "Summary:", 
   "Throws a 'TApplicationException' record", 
   "Test plan:", 
   "Changed cpp TestServer so that if testException is called with \"ApplicationException\" as an argument, it throws a TException which is serialized back as an EXCEPTION type message"
  ], 
  "revision_id": "666421"
 }
]