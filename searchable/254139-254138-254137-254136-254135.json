[
 {
  "author": "scheu", 
  "date": "2002-05-15T17:02:53.000000Z", 
  "msg": [
   "When a XMLUtils.newDocument creates an InputSource it should close the", 
   "streams after they are used.", 
   "PR:", 
   "Obtained from:", 
   "Submitted by:", 
   "Reviewed by:"
  ], 
  "revision_id": "254139"
 }, 
 {
  "author": "glyn", 
  "date": "2002-05-15T13:03:56.000000Z", 
  "msg": [
   "Add archaeological findings about event recorders dug out by Greg Truty."
  ], 
  "revision_id": "254138"
 }, 
 {
  "author": "scheu", 
  "date": "2002-05-14T23:46:34.000000Z", 
  "msg": [
   "PR:", 
   "Obtained from:", 
   "Submitted by:", 
   "Reviewed by:", 
   "This change implements the JSR 101 v1.0 mapping for", 
   "Faults <-> Exception, which is defines a special", 
   "\"complexType\" fault mapping.", 
   "A byproduct of this change is an improved structure", 
   "of the JavaBeanWriter.", 
   "Here is a summary of the mappings from my axis-dev note:", 
   "======================================================", 
   "The 1.0 version of JSR 101 describes a significantly different", 
   "XML <-> Java mapping for faults.", 
   "There are two different mappings. One for message parts which", 
   "reference a simple type, and one for message parts which", 
   "reference a complex type.", 
   "Mapping for a Simple Type Message Part", 
   "--------------------------------------", 
   "This mapping is similar to the one currently performed in Axis", 
   "for all faults.", 
   "Given the following wsdl:", 
   "<message name=\"FaultSimple\" >", 
   "<part name=\"info\" type=\"xsd:string\" />  <!-- type is a simple type-->", 
   "</message>", 
   "<portType name=\"myPortType\">", 
   "<operation name=\"myOperation\">", 
   "<input message=\"tns:myOperationInput\"/>", 
   "<output message=\"tns:myOperationOutput\"/>", 
   "<fault name=\"FaultSimple\" message=\"tns:FaultSimple\" />", 
   "</operation>", 
   "</portType>", 
   "A java fault class will be built with the name \"FaultSimple\"", 
   "that extends java.lang.Exception:", 
   "package com.example;", 
   "public class FaultSimple extends java.lang.Exception {", 
   "public FaultSimple(String info) {...}", 
   "public String getInfo() {...}", 
   "}", 
   "Mapping for a ComplexType Message Part", 
   "--------------------------------------", 
   "<complexType name=\"Base\">", 
   "<sequence>", 
   "<element name=\"A\" type=\"xsd:string\" />", 
   "<element name=\"B\" type=\"xsd:string\" />", 
   "</sequence>", 
   "</complexType>", 
   "<complexType name=\"Derived\">", 
   "<complexContent>", 
   "<extension base=\"tns:Base\" />", 
   "<sequence>", 
   "<element name=\"C\" type=\"xsd:string\" />", 
   "<element name=\"D\" type=\"xsd:string\" />", 
   "</sequence>", 
   "</extension>", 
   "</complexContent>", 
   "</complexType>", 
   "<message name=\"FaultComplex\" >", 
   "<part name=\"info\" type=\"tns:Derived\" />  <!-- type is a simple type-->", 
   "</message>", 
   "<portType name=\"myPortType\">", 
   "<operation name=\"myOperation\">", 
   "<input message=\"tns:myOperationInput\"/>", 
   "<output message=\"tns:myOperationOutput\"/>", 
   "<fault name=\"FaultComplex\" message=\"tns:FaultComplex\" />", 
   "</operation>", 
   "</portType>", 
   "You would think that the above should produce a java fault class", 
   "named FaultComplex, but v1.0 indicates that a java fault class", 
   "named Derived should be generated that extends Base.", 
   "package com.example;", 
   "public class Derived extends Base {", 
   "public Derived(String A, String B,", 
   "String C, String D) {super(A,B)...}", 
   "public String getB() {...}", 
   "public String getC() {...}", 
   "}", 
   "package com.example;", 
   "public class Base extends java.lang.Exception {", 
   "public Base(String A, String B) {...}", 
   "public String getA() {...}", 
   "public String getB() {...}", 
   "}", 
   "There are a number of reasons for this mapping:", 
   "1) It establishes an inheritance hierarchy of exceptions.", 
   "2) It allows multiple operations to share the hierarchy.", 
   "There are a number of generation implications of this mapping.", 
   "A) It assumes that the complexTypes can only be explicitly", 
   "referenced in a fault or non-fault context.", 
   "(Aside: I implemented the code such that the complexType fault", 
   "mapping 'wins' in this situation.)", 
   "B) Any complexType that extends a complexType used in a", 
   "fault context will need to be mapped as above (instead of", 
   "being mapped to a bean class).", 
   "C) Any complexType that is the base of a complexType used", 
   "in a fault context will need to be mapped as above (instead of", 
   "being mapped to a bean class).", 
   "D) Need to implement the Java2WSDL reverse mapping.", 
   "E) I'll assume that a complexType that is explicitly or implicitly", 
   "the restriction of a simpleType will be mapped using the", 
   "simple type mapping.", 
   "===================================================================", 
   "Description of Changes", 
   "----------------------", 
   "1) Added more structure to the JavaBeanWriter class to make it easier to extend.", 
   "For example, there are now specific methods to write out the various pieces", 
   "(i.e. writeClassStart(...), writeDefaultConstructor() ...).  There are also", 
   "protected flags that allow derived classes to enable/disable the emission of", 
   "the different methods.", 
   "2) The \"complexType\" fault mapping is very similar to a Bean, and eventually", 
   "the stuff in it will need to be serialized back to the client (see issue 1).", 
   "For this reason, I created a new class JavaBeanFaultWriter which extends", 
   "the JavaBeanWriter.  The emitted exception class automatically gets", 
   "the meta-data/helper information just like a bean.  And it can re-use", 
   "95% of the JavaBeanWriter methods.  (I added a writeFullConstructor() method", 
   "to the JavaBeanWriter so that it can be used by JavaBeanFaultWriter or", 
   "by other extensions.)", 
   "3) A new method setFaultContext was added to JavaGenerationFactory.  This method", 
   "sets the dynamic variable \"ComplexTypeFault\" on each complexType TypeEntry that is", 
   "referenced in a fault message.  The \"ComplexTypeFault\" variable is also set on", 
   "all the base and derived types of the indicated ComplexTypeFault.  This", 
   "flag is used in subsequent processing to invoke the JavaFaultWriter (for the", 
   "simple mapping) or the JavaBeanFaultWriter (for the complexType mapping).", 
   "The dynamic variable \"ComplexTypeFault\" is also set on the MessageEntry", 
   "to simplify processing of fault Messages.  And the dynamic variable \"ExceptionClassName\"", 
   "is set on the MessageEntry to simplify the retrieval of the java class name", 
   "for both the simple and complexType cases.", 
   "(Changes were made to Utils.getFullExceptionClass to use the", 
   "\"ExceptionClassName\" setting to get the class name).", 
   "4) The JavaTypeWriter was changed to automatically call JavaBeanFaultWriter for complexTypes", 
   "that have the \"ComplexTypeFault\" flag set.  Changes were made to JavaDefinitionWriter", 
   "to invoke JavaFaultWriter for only the faults that have the simple mapping.", 
   "5) The reverse Java2WSDL mapping is simplified.  The construction of a FaultDesc (in ServiceDesc)", 
   "is always defined with a single part which locates the complexType of the specified Exception.", 
   "This results in the \"complexType\" fault mapping in all cases, which is preferable.", 
   "This also causes the exception class to pass through BeanSerializer.writeSchema(),", 
   "which is great because any existing meta-data will be queried to properly", 
   "write out the elements and attributes.  A small change was made to writeSchema to", 
   "add java.lang.Exception as a stop-class.", 
   "6) Changed the test.wsdl.FaultService test to include an operation, throwFault, which throws a", 
   "complexType.  Three complexTypes were added: baseFault, derivedFault (which extends baseFault),", 
   "and derivedFault2 (which extends derivedFault).  The new throwFault operation indicates", 
   "that derivedFault is thrown...but the implementation actually throws derivedFault2.", 
   "The FaultServiceTestCase was changed to assert that derivedFault2 is returned to the caller.", 
   "This testcase tests the complexType fault mapping and exception hierarchies.", 
   "The existing Roundtrip test adequately tests the reverse Java2WSDL mapping.", 
   "===================================================================", 
   "Issues:", 
   "1) No one has ever implemented the serialization of the fault contents across the wire!", 
   "This information should be in the <details> section of the fault.", 
   "The complexType mapping should make this a little easier since it is just a modified", 
   "bean.  We may want to consider migrating the \"simple\" fault mapping to be", 
   "like a SimpleType bean to further simplify the processing.", 
   "a) The complexType exception class currently extends org.apache.axis.AxisFault instead", 
   "of Exception.  The emitted class also has a default constructor, which is not", 
   "allowed.  These need to be changed when (1) is addressed.", 
   "2) A complexType that is used in a fault context will be mapped as an", 
   "Exception class.  This mapping 'wins' over the default bean mapping.", 
   "The code currently does not check for conflicts, and I am not sure if it should.", 
   "I think that later JSR 101 specs will improve the exception mapping so that", 
   "it becomes even more bean-like.", 
   "Enjoy!"
  ], 
  "revision_id": "254137"
 }, 
 {
  "author": "rsitze", 
  "date": "2002-05-14T23:24:03.000000Z", 
  "msg": [
   "Added hooks to facilitate use as a derived class."
  ], 
  "revision_id": "254136"
 }, 
 {
  "author": "rsitze", 
  "date": "2002-05-14T23:15:26.000000Z", 
  "msg": [
   "Added hooks to facilitate using as a derived class."
  ], 
  "revision_id": "254135"
 }
]