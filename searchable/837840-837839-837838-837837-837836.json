[
 {
  "author": "jimb", 
  "date": "2000-10-27T21:43:49.000000Z", 
  "msg": [
   "\"I'm glad to see the Ministry's continuing its tradition of recruiting", 
   "the brightest and best, sir.\"", 
   "Use skels directly, instead of building more C-like structures.  This", 
   "gives us less to build up and tear down when accessing mutable nodes.", 
   "The contents of a mutable node cannot be cached, except within a", 
   "Berkeley DB transaction --- we have to read them and throw them out", 
   "every time.", 
   "* libsvn_fs/fs.h (struct svn_fs_node_t, kind_t): Delete definitons.", 
   "Make nodes opaque outside of node.c.", 
   "(struct svn_fs_file_t, struct svn_fs_dir_t): Delete definitions.", 
   "We can't cache any of the node's contents, so there's not much we can", 
   "put in these structures anyway.  The interface still uses them, but", 
   "they're always incomplete types.", 
   "* libsvn_fs/node.c (struct svn_fs_node_t, kind_t): Declare these here.", 
   "Don't cache the node's property list --- on a mutable node, that could", 
   "change at any time.", 
   "(header_values_t, parse_header): New type, new function.", 
   "(svn_fs__init_node): Deleted.", 
   "(svn_fs__open_node_by_id): Don't parse kind-specific data at all; just", 
   "check for kind and mutability.", 
   "(svn_fs__get_node_version, svn_fs__put_node_version,", 
   "svn_fs__reopen_node): New functions.", 
   "* libsvn_fs/node.h (svn_fs__init_node): Delete declaration.", 
   "(svn_fs__get_node_version, svn_fs__put_node_version,", 
   "svn_fs__reopen_node): New declarations.", 
   "* libsvn_fs/dir.c (svn_fs_open_node): Use `svn_fs__reopen_node', instead of", 
   "bumping the open count ourselves.", 
   "(build_entries, compare_dirents, svn_fs__dir_from_skel,", 
   "svn_fs_dir_entries): Deleted.", 
   "(search): New function, to search skels directly.", 
   "(svn_fs_open_node): Tweaked thoroughly.  Use `search'.", 
   "* libsvn_fs/dir.h (svn_fs__dir_from_skel): Delete declaration.", 
   "Begin implementation of filesystem transactions.", 
   "* libsvn_fs/fs.h (struct svn_fs_txn_t): Make this opaque outside of txn.c.", 
   "(Possibly a stupid idea.)", 
   "* libsvn_fs/txn.c (struct svn_fs_txn_t): Declare here.", 
   "(corrupt_txn, dangling_txn_id, no_such_txn, bad_txn_root): New error functions.", 
   "(get_transaction_skel): New function.", 
   "(begin_txn_body): Renamed from create_txn_body.", 
   "(svn_fs_begin_txn, begin_txn_body): Reworked to use svn_fs__retry_txn.", 
   "(struct replace_root_args): New structure.", 
   "(replace_root_body, svn_fs_replace_root, svn_fs__txn_id,", 
   "svn_fs_txn_name): New functions.", 
   "* libsvn_fs/txn.h (svn_fs__txn_id): New declaration.", 
   "(DB_ERR): New macro.", 
   "* libsvn_fs/node.c (get_representation_skel, get_node_version_skel,", 
   "svn_fs__open_node_by_id): Operate as part of a Berkeley DB", 
   "transaction.", 
   "(put_representation_skel): Rearrange args for consistency.", 
   "(new_node_id, svn_fs__create_node, last_key_before, new_successor_id,", 
   "svn_fs__create_successor, svn_fs__stable_node, svn_fs__node_fs,", 
   "svn_fs__node_id, svn_fs_node_is_mutable): New functions.", 
   "* libsvn_fs/node.h (svn_fs__open_node_by_id): Update declaration.", 
   "(svn_fs__create_node, svn_fs__create_successor, svn_fs__node_fs,", 
   "svn_fs__node_id, svn_fs__stable_node): New declarations.", 
   "* libsvn_fs/skel.c: (svn_fs__make_atom, svn_fs__make_empty_list,", 
   "svn_fs__prepend, svn_fs__copy_skel): New functions.", 
   "* libsvn_fs/skel.h: Declare them.", 
   "* libsvn_fs/dir.c (node_not_mutable): New error function.", 
   "(struct delete_args): New local type.", 
   "(svn_fs_delete, delete_body): New functions.", 
   "* libsvn_fs/id.c (svn_fs__is_parent): New function.", 
   "* libsvn_fs/id.h (svn_fs__is_parent): New declaration.", 
   "Wrap up the logic for Berkeley DB transaction retries and aborts in", 
   "a single function:", 
   "* libsvn_fs/err.c (svn_fs__retry_txn): New function.", 
   "* libsvn_fs/err.h (svn_fs__retry_txn): New declaration.", 
   "* libsvn_fs/txn.c (svn_fs_begin_txn, begin_txn_body): Reworked to use", 
   "svn_fs__retry_txn.", 
   "Remove property list objects.  Let the user retrieve single properties", 
   "directly from the node; for more demanding applications, just give", 
   "them a hash table and let them do as they please.", 
   "* include/svn_fs.h (svn_fs_proplist_t, svn_fs_proplist_get,", 
   "svn_fs_proplist_names, svn_fs_proplist_hash_table,", 
   "svn_fs_compare_prop_names): Delete declarations.", 
   "(svn_fs_get_node_prop, svn_fs_get_node_proplist): New declarations.", 
   "* libsvn_fs/fs.h: (struct svn_fs_proplist_t): Delete.", 
   "* libsvn_fs/proplist.[ch]: Deleted.", 
   "* libsvn_fs/Makefile.am (libsvn_fs_la_SOURCES): Remove proplist.c", 
   "* libsvn_fs/dir.c: Don't #include \"proplist.h\".", 
   "* libsvn_fs/node.c (svn_fs_get_node_prop, svn_fs_get_node_proplist):", 
   "New functions.", 
   "Simplify directory entry reading interface.", 
   "* include/svn_fs.h: (svn_fs_dir_entries): Don't return a sorted list,", 
   "shared with our internal data.  Give the user a hash table, allocated", 
   "in their own pool.", 
   "(svn_fs_compare_dirents): Prototype deleted.", 
   "* libsvn_fs/dir.c (svn_fs_dir_entries): Rewritten.", 
   "(svn_fs_compare_dirents): Function deleted.", 
   "Simplify `nodes' table structure.  We can do without `N.head' entries", 
   "in the table by doing other kinds of range queries, so drop them.", 
   "* libsvn_fs/structure: Update.", 
   "* libsvn_fs/id.c (svn_fs__parse_id): Drop `flags' argument.  Never", 
   "recognize `.head' at the end of an ID.", 
   "* libsvn_fs/id.h (svn_fs__key_id): Delete.", 
   "(svn_fs__parse_id): Update declaration.", 
   "* libsvn_fs/node.c (compare_ids): Simplify accordingly.", 
   "* libsvn_fs/version.c (svn_fs__version_root): No need to pass `flags'", 
   "argument.", 
   "Provide simple functions for making DBT's from node ID's, skels, and", 
   "strings, and DBT's that request no data.", 
   "* libsvn_fs/dbt.c: #include \"id.h\" and \"skel.h\".", 
   "(svn_fs__nodata_dbt, svn_fs__id_to_dbt, svn_fs__skel_to_dbt,", 
   "svn_fs__str_to_dbt): New functions.", 
   "* libsvn_fs/dbt.h: New prototypes for above.", 
   "* libsvn_fs/node.c (get_representation_skel, put_representation_skel,", 
   "new_successor_id): Use them.", 
   "* libsvn_fs/txn.c (put_transaction_skel): Same.", 
   "* libsvn_fs/version.c (put_version_skel): Same.", 
   "Make `nodes' key comparison more robust.", 
   "* libsvn_fs/node.c (parse_node_version_dbt): New function.", 
   "(compare_nodes_keys): Use it, to verify that every key is a node", 
   "version ID, not a node ID.", 
   "Change NODE-VERSION structure to insulate kind-specific data from", 
   "changes to the common node structure.", 
   "* libsvn_fs/structure: Document changes.", 
   "* libsvn_fs/nodes.c (make_nodes): Update form of root directory.", 
   "* libsvn_fs/version.c (put_version_skel): Rearrange args for", 
   "consistency.", 
   "* libsvn_fs/dir.c (not_a_directory): Fix SVN error code.", 
   "* libsvn_fs/dir.c (svn_fs_open_root): Just use the filesystem's root,", 
   "not a subpool.  Don't forget to close root_node if it's bogus.", 
   "* libsvn_fs/dir.c (svn_fs_open_root): Check the FS argument.", 
   "* include/svn_fs.h (svn_fs_node_version): Deleted; this isn't well-defined.", 
   "* include/svn_fs.h (svn_fs_open_node, svn_fs_delete): Add a `pool'", 
   "argument, for temporary allocation.", 
   "* include/svn_fs.h (svn_fs_node_is_mutable): Renamed from", 
   "svn_fs_is_mutable.", 
   "* include/svn_fs.h (svn_fs_file_contents): Clarify lifetime of", 
   "CONTENTS / CONTENTS_BATON.", 
   "* libsvn_fs/Makefile.am (delta.c, file.c): Set aside for now."
  ], 
  "revision_id": "837840"
 }, 
 {
  "author": "sussman", 
  "date": "2000-10-27T19:59:37.000000Z", 
  "msg": [
   "First-stage rewrite of `svn status';  instead of returning a single", 
   "status structure, return a hash full of them.  (Next step:", 
   "recursion.)", 
   "* libsvn_wc/status.c (svn_wc_get_status): return a hash of status", 
   "structs, not just one struct.  A big rewrite here.", 
   "(add_status_structure): new helper to convert entry structs to", 
   "status structs.", 
   "* svn_wc.h (svn_wc_get_status):  change declaration appropriately", 
   "* libsvn_client/status.c (svn_client_status):  allocate and return a", 
   "hash now.", 
   "* svn_client.h (svn_client_status) change declaration appropriately", 
   "* main.c (main):  change args to svn_client_status() call", 
   "* client/status.c (svn_cl__print_status):  print each structure in", 
   "hash.", 
   "* cl.h (svn_cl__print_status): change declaration appropriately"
  ], 
  "revision_id": "837839"
 }, 
 {
  "author": "sussman", 
  "date": "2000-10-27T18:26:23.000000Z", 
  "msg": [
   "(svn_wc__status_t):  add svn_wc_status_conflicted enum"
  ], 
  "revision_id": "837838"
 }, 
 {
  "author": "sussman", 
  "date": "2000-10-27T16:12:48.000000Z", 
  "msg": [
   "(change_file_prop): fix bug in property patching;  property deletes work now."
  ], 
  "revision_id": "837837"
 }, 
 {
  "author": "sussman", 
  "date": "2000-10-27T15:48:47.000000Z", 
  "msg": [
   "Add SVN_WC__ENTRY_CONFLICT flag in entries structure."
  ], 
  "revision_id": "837836"
 }
]