[
 {
  "author": "arminw", 
  "date": "2004-02-07T10:59:34.000000Z", 
  "msg": [
   "add maxDB entry"
  ], 
  "revision_id": "363419"
 }, 
 {
  "author": "arminw", 
  "date": "2004-02-07T10:56:30.000000Z", 
  "msg": [
   "change MAX_KEY field, now BIGINT instead INTEGER to support", 
   "Long fields"
  ], 
  "revision_id": "363418"
 }, 
 {
  "author": "brj", 
  "date": "2004-02-06T20:49:21.000000Z", 
  "msg": [
   "do not use distinct queries because of ORA-22901"
  ], 
  "revision_id": "363417"
 }, 
 {
  "author": "brj", 
  "date": "2004-02-06T17:29:27.000000Z", 
  "msg": [
   "check if braceEnd > braceBegin (by Andrew Geery)"
  ], 
  "revision_id": "363416"
 }, 
 {
  "author": "arminw", 
  "date": "2004-02-06T13:01:53.000000Z", 
  "msg": [
   "- introduce workaround for concurrency object materialization problem", 
   "showed in ...broker.MultithreadedReadTest (thanks Sven Efftinge).", 
   "When an object was materialzed we put it in an temporary storage (local map)", 
   "till the object was full materialized. Then push it to the real ObjectCache", 
   "(workaround, should be solved by two-level cache in 1.1)", 
   "- introduce a new check in PB.store (thanks Guillaume Nodet). Check for PK fields represent", 
   "a 'null' value, if true we know given object is new and needs insert", 
   "(no other checks necessary in this case).", 
   "- in PB.store method replace dbAccess.materializeObject(cld, oid) method call", 
   "by !SqlHelper.doesExist(this, cld, oid). First method does materialize the full object", 
   "if found in DB, latter avoids materialization of object and only requests first found PK", 
   "column on select statement (instead of all object columns).", 
   "(better solution in 1.1, we have to integrate this in JdbcAccess)", 
   "- move method 'buildMessageString(Object obj, Object value, Field field)' form", 
   "BrokerHelper to AbstractPersistentField"
  ], 
  "revision_id": "363415"
 }
]