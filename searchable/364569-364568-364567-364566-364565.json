[
 {
  "author": "arminw", 
  "date": "2005-03-04T18:07:23.000000Z", 
  "msg": [
   "- improve PB#retrieveAllReferences/retrieveReference methods to work proper with circular references", 
   "- add new methods to LocalCache to allow add/remove cached objects from LocalCache", 
   "- rename LocalCache method"
  ], 
  "revision_id": "364569"
 }, 
 {
  "author": "arminw", 
  "date": "2005-03-04T18:02:48.000000Z", 
  "msg": [
   "update javadoc, remove serialVersionId from interface"
  ], 
  "revision_id": "364568"
 }, 
 {
  "author": "arminw", 
  "date": "2005-03-04T18:02:07.000000Z", 
  "msg": [
   "minor improvement, use currentTimeMillis instead of creating new Date object"
  ], 
  "revision_id": "364567"
 }, 
 {
  "author": "brianm", 
  "date": "2005-03-04T13:31:06.000000Z", 
  "msg": [
   "Two patches from Ilkka Priha:", 
   "Currently, OJB loads the OJB.properties file by getting an input stream from the corresponding URL. However, if the properties file is embedded in a jar archive, this method locks the corresponding jar and prevents it from being removed during undeployment of a web application (at least in Sun jdk under Windows). Some web containers (e.g. Tomcat) have non-standard configuration options to handle jar resources in a specific way to prevent locking, but a more general solution is to disable caching in the URL connection before opening the input stream.", 
   "The locked jar problem with OJB.properties can also be caused by repository descriptors embedded in jar archives. The problem is caused by RepositoryPersistor passing a URL path to InputSource without disabling caching in the corresponding URL connection.", 
   "Submitted by:   Ilkka Priha"
  ], 
  "revision_id": "364566"
 }, 
 {
  "author": "brianm", 
  "date": "2005-03-04T13:30:06.000000Z", 
  "msg": [
   "Two patches from Ilkka Priha:", 
   "Currently, OJB loads the OJB.properties file by getting an input stream from the corresponding URL. However, if the properties file is embedded in a jar archive, this method locks the corresponding jar and prevents it from being removed during undeployment of a web application (at least in Sun jdk under Windows). Some web containers (e.g. Tomcat) have non-standard configuration options to handle jar resources in a specific way to prevent locking, but a more general solution is to disable caching in the URL connection before opening the input stream.", 
   "The locked jar problem with OJB.properties can also be caused by repository descriptors embedded in jar archives. The problem is caused by RepositoryPersistor passing a URL path to InputSource without disabling caching in the corresponding URL connection.", 
   "Submitted by:\tIlkka Priha"
  ], 
  "revision_id": "364565"
 }
]