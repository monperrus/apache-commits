[
 {
  "author": "dims", 
  "date": "2004-08-17T08:33:52.000000Z", 
  "msg": [
   "Fix for (WSFX-28) need for a new constructor in ReferencePropertiesType", 
   "from Jayachadra Sekhara Rao Sunkara (mailto:sunja07@ca.com)"
  ], 
  "revision_id": "240534"
 }, 
 {
  "author": "dims", 
  "date": "2004-08-12T12:52:43.000000Z", 
  "msg": [
   "Patch for - [PATCH] [Addressing] Added tests for init(HandlerInfo) and getHeaders()", 
   "from Springer, Ian P. <ian.springer@hp.com>"
  ], 
  "revision_id": "240533"
 }, 
 {
  "author": "dims", 
  "date": "2004-08-12T05:00:30.000000Z", 
  "msg": [
   "Patch from Springer, Ian P. <ian.springer@hp.com>", 
   "=====================================================================", 
   "This makes it optional for the Axis handlers to be configured as", 
   "JAXRPCHandlers in the wsdd.", 
   "====================================================================="
  ], 
  "revision_id": "240532"
 }, 
 {
  "author": "dims", 
  "date": "2004-08-09T16:38:24.000000Z", 
  "msg": [
   "Fix test cases."
  ], 
  "revision_id": "240531"
 }, 
 {
  "author": "dims", 
  "date": "2004-08-09T16:36:19.000000Z", 
  "msg": [
   "Contribution from Ian Springer <ian.springer@hp.com>", 
   "===================================================", 
   "The attached classes are intended to replace the existing class", 
   "AddressingHandler. They are in the following class hierarchies, which", 
   "are designed to facilitate easy porting to any JAX-RPC container:", 
   "AxisClientSideAddressingHandler extends ClientSideAddressingHandler", 
   "extends AbstractAddressingHandler", 
   "AxisServerSideAddressingHandler extends ServerSideAddressingHandler", 
   "extends AbstractAddressingHandler", 
   "AbstractAddressingHandler is an abstract base class containing", 
   "functionality shared by server-side and client-side handlers.", 
   "ClientSideAddressingHandler and ServerSideAddressingHandler are", 
   "client-side and server-side JAX-RPC handlers, respectively, that should", 
   "work within any JAX-RPC container. They contain a few methods that can", 
   "be overridden by platform-specific subclasses to provide more robust", 
   "functionality. AxisClientSideAddressingHandler and", 
   "AxisServerSideAddressingHandler are subclasses of the platform-neutral", 
   "handlers that implement the Axis Handler interface and that leverage", 
   "some Axis-specific APIs in overridden methods.", 
   "All platform-neutral classes are below the org.apache.ws.addressing", 
   "package, and all Axis-specific classes are below", 
   "org.apache.axis.message.addressing.handler.", 
   "I've written unit tests that test the key methods - handleRequest() and", 
   "handleResponse() - in the platform-neutral handlers.", 
   "Additionally, I've written an interface and factory that allow one to", 
   "easily plug in different UUID-generation impls. The platform-neutral", 
   "handlers utilize the opensource JUG library as the UUID generator, but", 
   "use refelction to avoid a compile-time dependency on it. The", 
   "Axis-specific handlers utilize the UUID generator that comes with Axis.", 
   "There are still a number of data structure classes and interfaces in", 
   "Apache Addressing that use Axis-specific classes like MessageElement and", 
   "URI. These could be refactored fairly easily to be platform-neutral.", 
   "Once this is done, Apache Addressing will be a portable WS-Addressing", 
   "implementation that can be deployed and utilized on any JAX-RPC", 
   "container. I think this will broaden the project's user and developer", 
   "base.", 
   "==================================================="
  ], 
  "revision_id": "240530"
 }
]