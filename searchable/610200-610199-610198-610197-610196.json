[
 {
  "author": "dblevins", 
  "date": "2008-01-08T22:26:03.338092Z", 
  "msg": [
   "Deleting illegal non UTF-8 characters"
  ], 
  "revision_id": "610200"
 }, 
 {
  "author": "jukka", 
  "date": "2008-01-08T22:22:40.199730Z", 
  "msg": [
   "JCR-1291: Missing class JNDIDatabaseJournal", 
   "- No SQLException(String, Throwable) in Java 1.4"
  ], 
  "revision_id": "610199"
 }, 
 {
  "author": "olamy", 
  "date": "2008-01-08T22:20:37.280490Z", 
  "msg": [
   "upgrade to last snapshot parent"
  ], 
  "revision_id": "610198"
 }, 
 {
  "author": "twgoetz", 
  "date": "2008-01-08T22:19:15.295017Z", 
  "msg": [
   "Jira UIMA-685: more documentation, samples.", 
   "https://issues.apache.org/jira/browse/UIMA-685"
  ], 
  "revision_id": "610197"
 }, 
 {
  "author": "etnu", 
  "date": "2008-01-08T22:15:54.384270Z", 
  "msg": [
   "Adds support for automatic feature loading. New features which only require javascript on the container and/or gadget to be functional can now be used by simply dropping a directory with the appropriate files and a feature.xml file into the features/ directory. Implementations can consume these features by parsing the feature.xml document and implementing according to the following spec:", 
   "<feature>", 
   "<name>Name of feature (required)</name>", 
   "<dependency>name of any features that this depends upon, regardless of whether they're loaded this way or created programmatically (optional, repeated</dependency>", 
   "<gadget> <-- optional; all gadget-related dependencies go here.", 
   "<script src=\"nameOfFeature.js\">Can also be inline scripts, urls, or references to \"resources\" (language-dependent bundling) using the res:// syntax (optional, repeated)</script>", 
   "</gadget>", 
   "<container> <-- optional; same structure as <gadget>", 
   "</container>", 
   "</feature>", 
   "I would like to create a schema for this and publish it along with other gadget-related specs, but it is by no means a part of the \"gadget spec\".", 
   "Additionally, this change greatly simplifies the feature creation model for the java code base and improves testability by introducing a new interface, GadgetFeatureFactory, that can be used to provide features. GadgetFeatureRegistry's static methods have been removed in favor of making it an injectable object. Most of the existing java-based feature registration mechanisms have been removed.", 
   "I have not moved any javascript in this change because currently other language implementations are still dependent on the stand alone javascript files. When that situation is resolved, we can remove the features currently in javascript/gadgets/ (leaving only non-feature code there).", 
   "Additionally, this change pulls in the gadget black list code. This should probably be a separate commit, but there were enough merge conflicts between the two patches that it's easier for me to do it. Plus, the author of the black list code does not have commit access."
  ], 
  "revision_id": "610196"
 }
]