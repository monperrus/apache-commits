[
 {
  "author": "kwright", 
  "date": "2011-05-17T08:51:53.266593Z", 
  "msg": [
   "Update web site"
  ], 
  "revision_id": "1104060"
 }, 
 {
  "author": "spamassassin_role", 
  "date": "2011-05-17T08:51:17.593641Z", 
  "msg": [
   "promotions validated"
  ], 
  "revision_id": "1104059"
 }, 
 {
  "author": "spamassassin_role", 
  "date": "2011-05-17T08:50:01.958917Z", 
  "msg": [
   "promotions validated"
  ], 
  "revision_id": "1104058"
 }, 
 {
  "author": "ivan", 
  "date": "2011-05-17T08:49:11.773895Z", 
  "msg": [
   "* subversion/libsvn_ra_neon/fetch.c", 
   "(svn_ra_neon__rev_proplist): Simplify the code by using", 
   "svn_ra_neon__get_vcc() function instead of overloaded and complex", 
   "svn_ra_neon__get_baseline_props()."
  ], 
  "revision_id": "1104057"
 }, 
 {
  "author": "rhuijben", 
  "date": "2011-05-17T08:47:00.940351Z", 
  "msg": [
   "Update the heaviest delete queries with the recent knowledge about how", 
   "like is used. Also add op_depth checks where we know the op_depth, to", 
   "remove subqueries.", 
   "* subversion/libsvn_wc/wc-queries.sql", 
   "(STMT_DELETE_NODES_RECURSIVE): Construct optimal query, fixing up for when", 
   "the query is used from revert.", 
   "(STMT_INSERT_DELETE_FROM_NODE_RECURSIVE): Construct path selection and apply", 
   "the known depth of the layer we are deleting instead of using a subquery", 
   "to determine that for every node.", 
   "(STMT_INSERT_DELETE_LIST): Construct path selection; limit the depth to the", 
   "valid range and only then use the subquery.", 
   "* subversion/libsvn_wc/wc_db.c", 
   "(op_revert_recursive_txn): Update caller.", 
   "(remove_node_txn): Update caller.", 
   "(op_delete_txn): Update caller. Determine the depth of what we are deleting."
  ], 
  "revision_id": "1104056"
 }
]