[
 {
  "author": "trawick", 
  "date": "2000-10-19T10:51:43.000000Z", 
  "msg": [
   "pipe_read() and socket_read(): set the buffer pointer to", 
   "NULL if we're an error occurred", 
   "pipe_read(): go ahead and close the pipe (the read side) if", 
   "we've reached the end"
  ], 
  "revision_id": "57909"
 }, 
 {
  "author": "rbb", 
  "date": "2000-10-19T00:04:54.000000Z", 
  "msg": [
   "Namespace protect the rest of the macros defined by ap_config.h"
  ], 
  "revision_id": "57908"
 }, 
 {
  "author": "rbb", 
  "date": "2000-10-17T22:48:23.000000Z", 
  "msg": [
   "It helps to assign the bucket field in the pool_bucket.  This lets the", 
   "pool bucket's cleanup work correctly."
  ], 
  "revision_id": "57907"
 }, 
 {
  "author": "rbb", 
  "date": "2000-10-17T21:53:42.000000Z", 
  "msg": [
   "Add pool buckets to the bucket list.  These buckets are not currently", 
   "used although I have begun to test them on my machine.  The idea behind", 
   "these buckets is that data allocated out of a pool and put into a bucket", 
   "has to survive the death of the pool until the bucket is destroyed.  To", 
   "accomplish this, we register a cleanup when we create the bucket.  If the", 
   "pool is cleared, the cleanup converts the bucket to a heap bucket and", 
   "everything is good.  If the pool isn't cleared, then we kill the cleanup", 
   "when the bucket is destroyed.", 
   "With this bucket type, all of the core buckets that were listed have been", 
   "implemented."
  ], 
  "revision_id": "57906"
 }, 
 {
  "author": "trawick", 
  "date": "2000-10-17T17:41:21.000000Z", 
  "msg": [
   "Fix the name of the brigade structure in a comment."
  ], 
  "revision_id": "57905"
 }
]