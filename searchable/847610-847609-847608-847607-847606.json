[
 {
  "author": "cmpilato", 
  "date": "2003-10-27T17:19:48.865640Z", 
  "msg": [
   "* subversion/clients/cmdline/checkout-cmd.c", 
   "(svn_cl__checkout): Return an argument parsing error if the user", 
   "called 'svn checkout' with only a WC-PATH argument (no URL)."
  ], 
  "revision_id": "847610"
 }, 
 {
  "author": "cmpilato", 
  "date": "2003-10-27T17:07:16.537271Z", 
  "msg": [
   "* subversion/libsvn_client/blame.c", 
   "(log_message_receiver): Re-work this function to soothe the", 
   "concerned spirit of Greg Stein.  Also, take this opportunity to", 
   "document what's going on a little better."
  ], 
  "revision_id": "847609"
 }, 
 {
  "author": "ghudson", 
  "date": "2003-10-27T16:49:12.252327Z", 
  "msg": [
   "Distinguish between file and dir tokens when consuming edits.", 
   "* libsvn_ra_svn/editorp.c", 
   "(store_token, lookup_token): Add an is_file argument to ensure that", 
   "the driver doesn't mix up file and dir tokens.  Call sites changed."
  ], 
  "revision_id": "847608"
 }, 
 {
  "author": "cmpilato", 
  "date": "2003-10-27T16:31:27.812883Z", 
  "msg": [
   "* subversion/bindings/swig/python/svn/fs.py", 
   "(FileDiff._dump_contents): Greg Stein notes that we should wrap the", 
   "stream reads in \"try/finally\" and close the stream in the \"finally\"."
  ], 
  "revision_id": "847607"
 }, 
 {
  "author": "ghudson", 
  "date": "2003-10-27T16:30:19.403347Z", 
  "msg": [
   "Pipeline the ra_svn editor implementation for better performance.", 
   "This is keyed off the \"edit-pipeline\" capability.  We can remove", 
   "support for non-pipelined edits at the same time we remove support for", 
   "v1 of the ra_svn protocol, which will bring us back to one editor", 
   "implementation.", 
   "* include/svn_delta.h", 
   "(svn_delta_editor_t): Document new restrictions on handling errors", 
   "resulting from editing functions.  (All current code obeys these", 
   "restrictions.)", 
   "* libsvn_ra_svn/protocol", 
   "Section 2.1 (new): Document edit-pipeline capability.", 
   "Section 3.1.2: Document pipelined edits", 
   "(apply-textdelta): Split up into several commands so that edit", 
   "operations are composed entirely of command tuples.", 
   "* include/svn_ra_svn.h, libsvn_ra_svn/ra_svn.h, libsvn_ra_svn/marshal.c", 
   "(SVN_RA_SVN_CAP_EDIT_PIPELINE): Constant for new capability value.", 
   "(svn_ra_svn_set_capabilities, svn_ra_svn_has_capability): New", 
   "functions for storing and testing for connection capabilities.", 
   "(ra_svn_block_handler_t, svn_ra_svn__set_block_handler): New", 
   "functions to support a callback to be called when writing blocks.", 
   "(svn_ra_svn__input_waiting): New function to test whether there is", 
   "data waiting on the input side of a connection.", 
   "(svn_ra_svn_conn_st): Add block_handler and block_baton fields for", 
   "the block handler, a capabilities hash to track capabilities, and", 
   "a pool field for use when we add stuff to the capabilities hash.", 
   "(writebuf_output): Support block handler; requires adding a pool arg.", 
   "(writebuf_flush): Reset write_pos first in case block handler reads.", 
   "Add pool argument.", 
   "(readbuf_input): For a socket, make sure to do a blocking read.", 
   "(writebuf_write, readbuf_fill, readbuf_getchar,", 
   "readbuf_getchar_skip_whitespace, readbuf_read): Propagate pool", 
   "argument up the call chain from writebuf_outpu.  All call sites", 
   "changed.", 
   "* libsvn_ra_svn/ra_svn.h, libsvn_ra_svn/editorp.c (derived from editor.c)", 
   "(ra_svn_edit_baton_t): Add got_status member to check whether the", 
   "edit has already been aborted from our perspective.", 
   "(ra_svn_driver_state_t): Add done member to track whether we have", 
   "read a complete set of edit operations.", 
   "(ra_svn_token_entry_t): Add dstream member so that apply_textdelta", 
   "can be split into three parts.  Punt the deferred error field.", 
   "(check_for_error): New function to check for and return an early", 
   "error report from the consumer.", 
   "(ra_svn_target_rev, ra_svn_open_root, ra_svn_delete_entry,", 
   "ra_svn_add_dir, ra_svn_open_dir, ra_svn_change_dir_prop,", 
   "ra_svn_close_dir, ra_svn_add_file, ra_svn_open_file,", 
   "ra_svn_apply_textdelta, ra_svn_change_file_prop,", 
   "ra_svn_close_file): Check for errors at beginning, but don't read", 
   "responses if we were doing so.", 
   "(ra_svn_svndiff_handler, ra_svn_close_handler): Use new command", 
   "syntax for svndiff chunks.  Check for errors at beginning.", 
   "(ra_svn_close_edit): Make sure to abort the edit if we get an error", 
   "from close-edit.", 
   "(ra_svn_abort_edit): Do nothing if we previously returned an error,", 
   "since we sent the abort-edit operation at that time.  (This ensures", 
   "that the protocol gets back into sync after an error even if the", 
   "caller doesn't give us an abort_edit.)", 
   "(svn_ra_svn__get_editorp): Get a pipelined version of the editor.", 
   "(clear_token_err): No longer needed.", 
   "(store_token): Initialize dstream field instead of err field.", 
   "(lookup_token): The pool argument was unused.  Call sites changed.", 
   "(ra_svn_handle_target_rev, ra_svn_handle_open_root,", 
   "ra_svn_handle_delete_entry, ra_svn_handle_add_dir,", 
   "ra_svn_handle_open_dir, ra_svn_handle_change_dir_prop,", 
   "ra_svn_handle_close_dir, ra_svn_handle_add_file,", 
   "ra_svn_handle_open_file, ra_svn_handle_change_file_prop,", 
   "ra_svn_handle_close_file): New command loop passes driver state", 
   "directly, instead of through a void *baton.  Freely use", 
   "SVN_CMD_ERR, but do not write successful status messages.", 
   "(ra_svn_handle_apply_textdelta, ra_svn_handle_textdelta_chunk,", 
   "ra_svn_handle_textdelta_end): Split into three parts, so that each", 
   "chunk of the text delta is its own command.", 
   "(ra_svn_handle_close_edit, ra_svn_handle_abort_edit): Adjust for", 
   "modified command loop.  Expect an abort-edit after a failed", 
   "close-edit.", 
   "(ra_svn_edit_cmds): Use our own structure.  Declare handlers which", 
   "pass the driver state directly.", 
   "(svn_ra_svn__drive_editorp): Do a pipelined editor drive.  Use our", 
   "own command loop instead of the standard one, so that we can have", 
   "more control over when the edit is done, can use non-blocking", 
   "writes when writing the error status, and can read and discard edit", 
   "operations after writing an error.", 
   "* libsvn_ra_svn/editor.c", 
   "(svn_ra_svn_get_editor, svn_ra_svn_drive_editor): If the connection", 
   "has the edit-pipeline capability, defer to the pipelined", 
   "implementation.", 
   "* libsvn_ra_svn/client.c", 
   "(auth_response): Send edit-pipeline capability when doing a v1 auth", 
   "response.", 
   "(ra_svn_open): Initialize connection capabilities.  Send", 
   "edit-pipeline capability.", 
   "* svnserve/serve.c", 
   "(serve): Initialize connection capabilities."
  ], 
  "revision_id": "847606"
 }
]