[
 {
  "author": "wrowe", 
  "date": "2001-07-13T17:44:41.000000Z", 
  "msg": [
   "The C namespace block must occur _outside_ of the conditionals.", 
   "Hiroyuki Hanai <hanai@imgsrc.co.jp>"
  ], 
  "revision_id": "61934"
 }, 
 {
  "author": "stoddard", 
  "date": "2001-07-13T13:37:24.000000Z", 
  "msg": [
   "Win32: Do not set the detached attribute for os_levels less than NT."
  ], 
  "revision_id": "61933"
 }, 
 {
  "author": "jerenkrantz", 
  "date": "2001-07-13T06:19:01.000000Z", 
  "msg": [
   "Implement POSIX pthread cross process locks that are \"robust\" - when the", 
   "process which owns the mutex dies, another process attempting to acquire", 
   "that lock will now receive EOWNERDIED instead of deadlocking.  It is", 
   "then the responsibility of that holder of the mutex to restore it to a", 
   "consistent state.", 
   "This is lightly tested on Solaris 8/Intel 4/01.  The mutex is recovered", 
   "(i.e. no deadlock), but this probably needs to be tested further.  AFAIK,", 
   "Solaris 8 is the only platform which implements this.", 
   "Because the possiblity of the process dying while holding the lock is", 
   "too great, upgrade the conditions for using a pthread mutex for an", 
   "interprocess lock to require robust locks.  This probably means that", 
   "Solaris (and maybe only Solaris 8) will use pthread_mutex_t for", 
   "cross-process locks.  Too bad.", 
   "This completely avoids the question of why my httpd is segfaulting in the", 
   "first place, but now it doesn't deadlock when it does (to be fair, this is", 
   "with mod_mbox).  BTW, the threaded MPM isn't starting up enough child", 
   "processes (only 1).  StartServers is 3 - is the count of 3 supposed to", 
   "include the parent and the unixd child?  If so, that's lame.  If not,", 
   "we've got a bug somewhere in threaded MPM on Solaris 8.  I'll have to", 
   "stare at my two whiteboards full of the diagrams of threaded MPM more."
  ], 
  "revision_id": "61932"
 }, 
 {
  "author": "wrowe", 
  "date": "2001-07-12T23:35:56.000000Z", 
  "msg": [
   "You can't map more bytes than a size_t ... eliminate an abused apr_off_t"
  ], 
  "revision_id": "61931"
 }, 
 {
  "author": "wrowe", 
  "date": "2001-07-12T23:27:50.000000Z", 
  "msg": [
   "we are definately ok with these values, so cast off the converison err."
  ], 
  "revision_id": "61930"
 }
]