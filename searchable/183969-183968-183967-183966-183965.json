[
 {
  "author": "morciuch", 
  "date": "2003-04-11T18:08:48.000000Z", 
  "msg": [
   "Bug # 18510 - Applied patch for localized key string from JetspeedL10NTag class, by Fabio Latrofa", 
   "Bug # 17715 - Applied patch for JetspeedLocalizationService only looking at first resource bundle, by Jon Evans"
  ], 
  "revision_id": "183969"
 }, 
 {
  "author": "weaver", 
  "date": "2003-04-11T16:01:57.000000Z", 
  "msg": [
   "Fixed issues certain methods in JetspeedSecurity and JetspeedPortalToolkitService", 
   "causing nullpointerexeptions when the basic JUnit tests are run."
  ], 
  "revision_id": "183968"
 }, 
 {
  "author": "weaver", 
  "date": "2003-04-11T15:30:40.000000Z", 
  "msg": [
   "This is in reference to bug #18885 where the issue is that the default", 
   "security assigned to portlets when added through the customizer may", 
   "lessen the intended security of that portlet.", 
   "Additional changes:", 
   "Localized indicator messages for security source.", 
   "JetspeedTool: added the getEntryFromRequest() method which, based on js_peid, will", 
   "return the associated portlet profile entry.", 
   "RegistryEntryListBox: changed so that the default security entry is blank", 
   "instead of the system default.", 
   "customizer-portlet.vm: added indicator messages for security source.", 
   "multicolumn-customizer.vm: switched to using localized security source indicator messages."
  ], 
  "revision_id": "183967"
 }, 
 {
  "author": "weaver", 
  "date": "2003-04-11T13:20:51.000000Z", 
  "msg": [
   "This is in reference to bug #18885 where the issue is that the default", 
   "security assigned to portlets when added through the customizer may", 
   "lessen the intended security of that portlet.", 
   "Here is what has changed and how it will work.", 
   "CustomizeSetAction no longer physically sets the profile entry security to the", 
   "default or otherwise.  This allows changes to security of individual portlet", 
   "registry entries trickle down to the profile level as should be expected.", 
   "JetspeedSecurity now has 2 new methods for working with profile entry security:", 
   "SecurityReference getSecurityReference(Entry entry,  JetspeedRunData rundata)", 
   "This is the order in which a SecurityReference is located", 
   "1.  Check the entry iteself.", 
   "2.  Check the entry's parent portlet.", 
   "3.  Use the system-supplied default.", 
   "int getSecuritySource(Entry entry,  JetspeedRunData rundata)", 
   "indicates exactly how we came upon the security for an entry.  It follows the", 
   "same \"order of operation\" as above returning 0, 1 or 2 respectively.", 
   "JetspeedTool now wraps these methods indentically save for the RunData argument", 
   "as it is available with in the tool itself.  I also took out the misleading", 
   "javdoc comments saying that JetspeedTool is not really a pull tool and does not", 
   "inherit from the ApplicationTool interface, all of these are false.", 
   "JetspeedPortletFactoryService now uses the JetspeedSecurity.getSecurityReference", 
   "() to populate the PortletConfigs security for each portlet generated at", 
   "request time.", 
   "There are also additions to the factory service which corrected issues of", 
   "\"ref\" portlets only having access to information of the immediate parent as opposed", 
   "to the entire inheritance chain.", 
   "multicolumn-customize.vm reflects the changes above with the added bonus of", 
   "indicating that a portlet is inheriting it's security from the parent portlet", 
   "set."
  ], 
  "revision_id": "183966"
 }, 
 {
  "author": "taylor", 
  "date": "2003-04-11T07:09:56.000000Z", 
  "msg": [
   "Forward Tool implemented", 
   "PR:", 
   "Obtained from:", 
   "Submitted by:", 
   "Reviewed by:"
  ], 
  "revision_id": "183965"
 }
]