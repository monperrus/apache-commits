[
 {
  "author": "nacho", 
  "date": "2000-06-11T16:25:23.000000Z", 
  "msg": [
   "Fixed a typo"
  ], 
  "revision_id": "281994"
 }, 
 {
  "author": "nacho", 
  "date": "2000-06-11T16:22:03.000000Z", 
  "msg": [
   "no message"
  ], 
  "revision_id": "281993"
 }, 
 {
  "author": "nacho", 
  "date": "2000-06-11T16:20:07.000000Z", 
  "msg": [
   "Add comment for JDBC Realm interceptor configuration"
  ], 
  "revision_id": "281992"
 }, 
 {
  "author": "costin", 
  "date": "2000-06-10T21:57:54.000000Z", 
  "msg": [
   "Missed one file."
  ], 
  "revision_id": "281991"
 }, 
 {
  "author": "costin", 
  "date": "2000-06-10T21:55:31.000000Z", 
  "msg": [
   "Simplified and improved session manager integration. All that's needed is a simple", 
   "interceptor that will act as adapter between the storage system and tomcat.", 
   "This is consistent with the rest of tomcat architecture - the core provides callbacks", 
   "where various functionality can be hooked ( like in Apache, IIS or NES !), and", 
   "the modules provide the bridge to various (orthogonal) services.", 
   "The current session store is implemented in StandardManager/StandardSession/SessionSerializer.", 
   "None of those classes should have any dependency to tomcat - and any other session", 
   "store can be pluged in as long as it can work standalone ( doesn't have too", 
   "much overhead ). For example catalina sessions need a cleanup and removal of", 
   "all internal interfaces.", 
   "The benefit is that the same code can be reused in other servlet containers - NES and JRun", 
   "provide plugeable session management code too.", 
   "All you have to do in order to connect a session manager into tomcat is to implement the", 
   "adatper - a normal RequestInterceptor that will handle the relevant events.", 
   "SessionInterceptor does the \"standard\" stuff - extract requestedSessionId, etc.", 
   "The required functionality is:", 
   "- storage for attributes ( in fact a session manager is a sort of obj. database with 4 columns,", 
   "context, sessionId,  name, value )", 
   "- support for reloading ( optional )", 
   "- support for \"expire\"", 
   "Also: reloading notification is now part of requestInterceptor, and can be used", 
   "by other components that want to deal with that ( in particular we can reload context", 
   "attributes - same as in session code )."
  ], 
  "revision_id": "281990"
 }
]