[
 {
  "author": "dkhaywood", 
  "date": "2009-02-10T22:42:44.713515Z", 
  "msg": [
   "removed duplication in PersistenceMechanismInstallerAbstract subclasses (for proxy and objectstore impls); reworked hook methods in PersistenceMechanismInstallerAbstract to have createRuntimeContext then createContainer; enhanced createContainer to pick up implementation from config (but still defaults to DomainObjectContainerDefault); changed some dependency injection to setter-based rather than constructor to simplify bootstrapping a little; further fiddling around with the Embedded libraries; enhanced ServicesInjectorDefault so will now inject the container using same algorithm as services (ie can potentially be injected into multiple methods if hierarchy matches)"
  ], 
  "revision_id": "1019765"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2009-02-10T22:40:56.531743Z", 
  "msg": [
   "removed duplication in PersistenceMechanismInstallerAbstract subclasses (for proxy and objectstore impls); reworked hook methods in PersistenceMechanismInstallerAbstract to have createRuntimeContext then createContainer; enhanced createContainer to pick up implementation from config (but still defaults to DomainObjectContainerDefault); changed some dependency injection to setter-based rather than constructor to simplify bootstrapping a little; further fiddling around with the Embedded libraries; enhanced ServicesInjectorDefault so will now inject the container using same algorithm as services (ie can potentially be injected into multiple methods if hierarchy matches)"
  ], 
  "revision_id": "1019764"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2009-02-10T22:39:13.417926Z", 
  "msg": [
   "removed duplication in PersistenceMechanismInstallerAbstract subclasses (for proxy and objectstore impls); reworked hook methods in PersistenceMechanismInstallerAbstract to have createRuntimeContext then createContainer; enhanced createContainer to pick up implementation from config (but still defaults to DomainObjectContainerDefault); changed some dependency injection to setter-based rather than constructor to simplify bootstrapping a little; further fiddling around with the Embedded libraries; enhanced ServicesInjectorDefault so will now inject the container using same algorithm as services (ie can potentially be injected into multiple methods if hierarchy matches)"
  ], 
  "revision_id": "1019763"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2009-02-10T22:38:53.843906Z", 
  "msg": [
   "removed duplication in PersistenceMechanismInstallerAbstract subclasses (for proxy and objectstore impls); reworked hook methods in PersistenceMechanismInstallerAbstract to have createRuntimeContext then createContainer; enhanced createContainer to pick up implementation from config (but still defaults to DomainObjectContainerDefault); changed some dependency injection to setter-based rather than constructor to simplify bootstrapping a little; further fiddling around with the Embedded libraries; enhanced ServicesInjectorDefault so will now inject the container using same algorithm as services (ie can potentially be injected into multiple methods if hierarchy matches)"
  ], 
  "revision_id": "1019762"
 }, 
 {
  "author": "rcmatthews", 
  "date": "2009-02-10T20:09:23.813366Z", 
  "msg": [
   "Fixed build failure - used 1.6 method"
  ], 
  "revision_id": "1019761"
 }
]