[
 {
  "author": "solomax", 
  "date": "2014-04-28T18:07:06.564604Z", 
  "msg": [
   "Additional logging is added."
  ], 
  "revision_id": "1590728"
 }, 
 {
  "author": "dreedy", 
  "date": "2014-04-28T18:00:18.514944Z", 
  "msg": [
   "Adding initial commit for the modularization of River. This approach uses a script to load existing River jars, iterate through the contents of each jar, and copy sources to a multi-module maven project. The multi-module maven project is a start, it does not contain all the requisite River modules. It includes river-platform, river-start, river-dl, river-lib, outrigger-dl, outrigger-service, outrigger-snaplogstore, reggie-dl, reggie-service, mahalo-dl, mahalo-service, mercury-dl, mercury-service, norm-dl and norm-service"
  ], 
  "revision_id": "1590727"
 }, 
 {
  "author": "dreedy", 
  "date": "2014-04-28T17:52:40.562568Z", 
  "msg": [
   "Moved com.sun.jini.landlord.LeasedResource into jsk-dl.jar. This was done to accomodate outrigger-dl.jar's reliance on com.sun.jini.landlord.LeasedResource from com.sun.jini.outrigger.StorableResource. In the ant based build, LeasedResource was included using classdepandjar. Using a Maven build, outrigger-dl depends on river-dl (new name for jsk-dl). Adding LeasedResource to river-dl made sense. The approach taken to populate the source tree in the maven-zed structure is to load exiting jars, and for each entry in the loaded jar, copy the source files into each respective module's src directory, taking care not to duplicate any classes between modules. Making he change to jsk-dl.jar's build allows the river-dl module to be created correctly."
  ], 
  "revision_id": "1590726"
 }, 
 {
  "author": "everett", 
  "date": "2014-04-28T17:41:19.143640Z", 
  "msg": [
   "deploy jclouds site content"
  ], 
  "revision_id": "1590725"
 }, 
 {
  "author": "lehmi", 
  "date": "2014-04-28T17:36:16.945865Z", 
  "msg": [
   "[maven-release-plugin] prepare for next development iteration"
  ], 
  "revision_id": "1590724"
 }
]