[
 {
  "author": "cdouglas", 
  "date": "2009-12-09T10:08:25.737856Z", 
  "msg": [
   "MAPREDUCE-952. Remove inadvertently reintroduced Task.Counter enum. Contributed by Jothi Padmanabhan"
  ], 
  "revision_id": "888755"
 }, 
 {
  "author": "kahatlen", 
  "date": "2009-12-09T10:07:47.070530Z", 
  "msg": [
   "DERBY-4465: Typo in error message from SQLChar"
  ], 
  "revision_id": "888754"
 }, 
 {
  "author": "rhuijben", 
  "date": "2009-12-09T09:57:51.329800Z", 
  "msg": [
   "Add a few license blocks to project template files.", 
   "* generator/svn_locale.vcxproj.ezt", 
   "* generator/svn_config.vcxproj.ezt", 
   "* generator/serf.vcxproj.ezt", 
   "* generator/neon.vcxproj.ezt", 
   "* generator/zlib.vcxproj.ezt", 
   "Add license block in define block.", 
   "Found by: hwright"
  ], 
  "revision_id": "888753"
 }, 
 {
  "author": "jessewilson", 
  "date": "2009-12-09T09:52:37.446432Z", 
  "msg": [
   "Give much needed attention to our EnumSet implementations.", 
   "Fix HugeEnumSet iterator.remove() bug", 
   "Our iterator used a single index variable to track both the most recently returned element and the next element. When these disagreed, remove was broken. Added a test case for this.", 
   "Fix HugeEnumSet concurrency bug", 
   "The old code used of fields to track the intermediate values bitsIndex, elementIndex, and oldIndex. This meant that concurrent reads were not thread safe, even if the EnumSet was never modified after construction.", 
   "Fix retainAll bug", 
   "Calling retainAll() on an empty enum set would return true when the passed in argument was also an enum set.", 
   "Replace \"collection.size() == 0\" with \"collection.isEmpty()\"", 
   "This is inefficient for ConcurrentHashMap, which must do a full iteration.", 
   "Remove no-op arrays.fill() in HugeEnumSet constructor", 
   "Newly allocated arrays are initialized with 0s, this was a no-op.", 
   "Throw on clone failure", 
   "Previously we swept an impossible clone failure under the rug by returning null. This can't happen; we should throw AssertionErrors if it does.", 
   "Improve type safety", 
   "Remove use of raw types. Move warning suppressions to single lines and document why the suppressions are safe.", 
   "Increase internal implementation consistency", 
   "The new structure of add/addAll, remove/removeAll, retainAll is consistent across all: for each method, calculate the newBits. Compare old and new bits and if they disagree, update size and return true.", 
   "Improve readability", 
   "Flip \"if (null == foo)\" to \"if (foo == null)\" etc.", 
   "Investigate performance benefits of mod+divide vs. mask+shift", 
   "On both DRLVM and the RI's VM, mod & divide by a constant factor performed no worse than mask & shift. I'll investigate how Dalvik behaves on a device; I may later change this code to use mask+shift."
  ], 
  "revision_id": "888752"
 }, 
 {
  "author": "pamarcelot", 
  "date": "2009-12-09T09:50:37.696397Z", 
  "msg": [
   "Added a full house test for the Apache DS plugin:", 
   "- create server", 
   "- start server", 
   "- stop server", 
   "- delete server"
  ], 
  "revision_id": "888751"
 }
]