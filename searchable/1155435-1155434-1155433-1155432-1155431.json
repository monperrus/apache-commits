[
 {
  "author": "jukka", 
  "date": "2011-08-09T16:57:53.031329Z", 
  "msg": [
   "2.2: Merged revisions 1143396 and 1155431 (JCR-3013)"
  ], 
  "revision_id": "1155435"
 }, 
 {
  "author": "rmuir", 
  "date": "2011-08-09T16:57:05.154623Z", 
  "msg": [
   "LUCENE-3220: fix integer math division bug in I(ne) model"
  ], 
  "revision_id": "1155434"
 }, 
 {
  "author": "hlship", 
  "date": "2011-08-09T16:48:19.445832Z", 
  "msg": [
   "Ensure that ProxyFactory.getConstructorLocation() can not return null"
  ], 
  "revision_id": "1155433"
 }, 
 {
  "author": "bodewig", 
  "date": "2011-08-09T16:43:59.101738Z", 
  "msg": [
   "whitespace changes and @Ignore-ing the whole test"
  ], 
  "revision_id": "1155432"
 }, 
 {
  "author": "jukka", 
  "date": "2011-08-09T16:43:19.695343Z", 
  "msg": [
   "JCR-3013: ArrayIndexOutOfBoundsException: ConcurrentCache", 
   "The previous fix had a potential concurrency issue where another thread could still access an overflown access count through getAccessCount() right before the accessCount.set(0) call was made.", 
   "I prevented that problem by switching to a long counter which should make overflows highly unlikely (you'd need to have multiple processors just repeatedly accessing the cache for at least decades to get an overflow), and by using Math.abs() in the ConcurrentCache.shrinkIfNeeded() where the actual problem would then occur."
  ], 
  "revision_id": "1155431"
 }
]