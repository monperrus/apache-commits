[
 {
  "author": "dleslie", 
  "date": "2000-11-01T19:45:52.000000Z", 
  "msg": [
   "Fixed references to distribution directory (dist.dir)."
  ], 
  "revision_id": "333664"
 }, 
 {
  "author": "dleslie", 
  "date": "2000-11-01T16:53:02.000000Z", 
  "msg": [
   "Completed update to work with ant 1.2."
  ], 
  "revision_id": "333663"
 }, 
 {
  "author": "sboag", 
  "date": "2000-11-01T16:49:02.000000Z", 
  "msg": [
   "Implement DOMSerializer."
  ], 
  "revision_id": "333662"
 }, 
 {
  "author": "sboag", 
  "date": "2000-11-01T16:47:45.000000Z", 
  "msg": [
   "Only declare a serialize(Node node) method."
  ], 
  "revision_id": "333661"
 }, 
 {
  "author": "sboag", 
  "date": "2000-11-01T16:37:44.000000Z", 
  "msg": [
   "James Davidson, Rajiv Mordani, and myself got together last week at ApacheCon London to work on the TrAX proposal.  You can find the results of this work at http://xml.apache.org/trax/trax_10_30_00.zip (sorry about the apache address, it's all I have outside our firewall).", 
   "The highlights of the changes are:", 
   "1) Processor has been renamed to TransformerFactory, in order to match the javax.xml.parsers pattern.", 
   "2) Input and Result are defined with abstract interfaces (Source and Result) that are empty.  You must use a concrete implementation of these interfaces.", 
   "3) Three subpackages are defined: sax, dom, and stream. These implement the specifics for the given Source and Result types.  In addition, the sax package has a SAXTransformerFactory, SerializerHandler, and TransformerHandler.", 
   "4) The serializer package is gone (sorry, Assaf).  Instead, TransformerFactory now implements a newTransformer method that takes no arguments.  This method is defined to return a Transformer that does an identity copy from Source to Result.  With this, you can do everything the serializer interface did, and more.", 
   "5) The one thing I don't like much, is that TransformerFactory.newInstance no longer takes a string as an argument (which signified the type of TransformerFactory you want).  James used the same argument about this as he used about the DOM builder.  But, there are complicating factors, and it's better to be more simple now, and add this in later, if it is really needed.", 
   "6) The Features class contains URLs for all the supported types of features, i.e. DOM, SAX, etc.", 
   "7) Namespaced names (or Universal Names) are specified to be passed as {url}local-name.  While this is ugly, it's the only way to cleanly use existing Java classes like Properties that use the String class, and is easy enough to parse.  These are used both for output properties, and for variables.", 
   "I am pretty happy with this API at this point, though I'm sure it needs some polishing on details.  It lines up cleanly with the existing JSR63 transform stuff (a lot of the wording won't have to be changed), allows anybody to define a transformation from any object to any object (for instance, it will be easy to define a JDOM transformer),  supports different transformer models, is very powerful, yet is relatively simple for the job to be done.  I *think* Mike Kay will be pleased also, but he'll have to speak for himself.", 
   "A good place to start is the examples file.", 
   "Work to be done:", 
   "1) Documentation, both JavaDoc and the JSR doc (which James will do).", 
   "2) Rajiv needs to do some work on the TransformerFactory to bring it fully into line with javax.xml.parsers.", 
   "3) Respond to comments and requests for revisions."
  ], 
  "revision_id": "333660"
 }
]