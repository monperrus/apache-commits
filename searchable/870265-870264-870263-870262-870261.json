[
 {
  "author": "xsteve", 
  "date": "2008-04-02T20:11:26.235483Z", 
  "msg": [
   "Update the color dot in the modeline in svn-revert-some-buffers", 
   "* trunk/contrib/client-side/emacs/psvn.el:", 
   "(svn-revert-some-buffers): call svn-status-update-modeline when", 
   "svn-status-fancy-file-state-in-modeline is enabled"
  ], 
  "revision_id": "870265"
 }, 
 {
  "author": "glasser", 
  "date": "2008-04-02T17:33:15.933498Z", 
  "msg": [
   "On the in-memory-cache branch:", 
   "Make explicit the fact that the *transaction* node cache can't use", 
   "memcache.", 
   "* subversion/libsvn_fs_fs/tree.c", 
   "(dag_node_cache_invalidate): Explicitly state that the given root", 
   "must be immutable (which is already checked via an assertion).", 
   "(make_txn_root): Point out that memcache is not appropriate here."
  ], 
  "revision_id": "870264"
 }, 
 {
  "author": "stsp", 
  "date": "2008-04-02T17:27:17.051880Z", 
  "msg": [
   "* notes/tree/conflicts/detection.txt: Be more explicit about what the tree", 
   "conflict victim of an obstruction is."
  ], 
  "revision_id": "870263"
 }, 
 {
  "author": "glasser", 
  "date": "2008-04-02T17:17:31.505333Z", 
  "msg": [
   "On the in-memory-cache branch:", 
   "Partially revert r29919, which made svn_fs_t objects for the same", 
   "repository share some caches.", 
   "r29919 had a few downsides.  The shared caches lived in a global pool", 
   "and were never destroyed, so a long-lived single-process (threaded,", 
   "say) server which served many repositories could use an unbounded", 
   "amount of memory storing (fixed-size) caches for each repository.", 
   "Additionally, there was the subtle possibility for problems if two", 
   "distinct repositories with the same path and UUID existed (or, for", 
   "example, if a repository was rolled back without restarting the", 
   "server).", 
   "The advantage of r29919 is that the caches could be longer-lived.", 
   "However, now that the infrastructure for memcached-based svn_cache_t's", 
   "exists, users who really need the longer-lived caches can use", 
   "memcached support instead (well, once I make FSFS actually use it);", 
   "other users won't have to worry about either of the issues discussed", 
   "above.  (Note that the use of memcached solves the \"unbounded memory", 
   "usage\" problem but not the \"possible use of wrong cache\" problem;", 
   "however, the documentation for the memcached feature can emphasize the", 
   "issues involved.)", 
   "I'm only rolling back the part of r29919 that actually moves the", 
   "caches into the new shared structure; I'm keeping the code that resets", 
   "the FS field of DAG nodes (which will be necessary for memcached-based", 
   "caches and doesn't hurt for inprocess caches) as well as the test", 
   "suite changes to keep autogenerated UUIDs.", 
   "(Also, I'm taking r30163 into account by making sure to still call", 
   "\"svn_cache_create_inprocess\".)", 
   "* subversion/libsvn_fs_fs/fs.c", 
   "(SVN_FSFS_SHARED_USERDATA_PREFIX): Revert to pre-r29919 value.", 
   "(SVN_FSFS_SHARED_CACHES_USERDATA_PREFIX): Remove.", 
   "(dup_ids, dup_dir_listing): Move declarations back down.", 
   "(fs_serialized_init): Don't initialize shared caches.", 
   "(initialize_fs_struct): Initialize unshared caches.", 
   "* subversion/libsvn_fs_fs/fs.h", 
   "(struct fs_fs_shared_caches_t): Remove.", 
   "(struct fs_fs_data_t): Replace shared_cache member with three", 
   "caches.", 
   "* subversion/libsvn_fs_fs/fs_fs.c", 
   "(svn_fs_fs__rev_get_root, svn_fs_fs__rep_contents_dir): Look for", 
   "caches in fs_fs_data_t itself.", 
   "* subversion/libsvn_fs_fs/tree.c", 
   "(locate_cache): Look for cache in fs_fs_data_t itself."
  ], 
  "revision_id": "870262"
 }, 
 {
  "author": "ehu", 
  "date": "2008-04-02T15:50:54.697716Z", 
  "msg": [
   "Bring branch up to date with trunk."
  ], 
  "revision_id": "870261"
 }
]