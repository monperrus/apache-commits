[
 {
  "author": "sf", 
  "date": "2011-10-19T22:40:06.278891Z", 
  "msg": [
   "Comment out some incomplete code that does nothing but produce a compiler", 
   "warning"
  ], 
  "revision_id": "1186545"
 }, 
 {
  "author": "acmurthy", 
  "date": "2011-10-19T22:38:53.072835Z", 
  "msg": [
   "Merge -c 1186542 from trunk to branch-0.23 to complete fix for MAPREDUCE-3208."
  ], 
  "revision_id": "1186544"
 }, 
 {
  "author": "sf", 
  "date": "2011-10-19T22:38:18.312652Z", 
  "msg": [
   "Don't return a pointer to a stack variable", 
   "Found by cppcheck"
  ], 
  "revision_id": "1186543"
 }, 
 {
  "author": "acmurthy", 
  "date": "2011-10-19T22:38:17.672468Z", 
  "msg": [
   "MAPREDUCE-3208. Fix NPE task/container log appenders. Contributed by liangzhwa."
  ], 
  "revision_id": "1186542"
 }, 
 {
  "author": "jmsnell", 
  "date": "2011-10-19T22:33:04.673730Z", 
  "msg": [
   "Ok.. time for the next major installment of the Abdera2 rework.", 
   "This batch of changes introduces two major new dependencies and a whole slew of related changes. Primarily, the two new dependencies are the Google Guava Library (com.google.common.*) and the Joda-Time library (org.joda.time.*). Joda-Time replaces the old DateTime class that was there. This is a major change that affects the backwards compatibility of the FOM APIs. The reason this was done is simple: Joda-Time is a whole hell of a lot better than the implementation that was there and offers significant functionality beyond anything we could have implemented. When Abdera first emerged, there were no first-rate ISO 8601 DateTime implementations available in open source, now there are.", 
   "The other new dependency (Guava) provides for significantly more powerful applications than what we had. I'll go into detail on this in a separate email. Expect the tight integration with Guava to continue.", 
   "Further, there is a significant amount of attention given to integrating Guava and Joda-Time in very interesting ways. Again, I'll go into this in a separate email.", 
   "Another significant change that has been made is an emphasis on the use of Builder classes to generate Immutable Thread-safe instances of commonly used objects. Many existing objects that previously were Mutable (e.g. the extension geo.* objects) have been refactored into immutable objects constructed with a Builder pattern. The point behind this change is to make the code much more reliable, readable, and... well... just better overall."
  ], 
  "revision_id": "1186541"
 }
]