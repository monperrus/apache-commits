[
 {
  "author": "tomdz", 
  "date": "2004-06-22T19:10:49.000000Z", 
  "msg": [
   "Fixed issue with ojb-blank and Hsqldb", 
   "ojb-blank now works out-of-the-box with the tutorial1 classes and Hsqldb"
  ], 
  "revision_id": "363854"
 }, 
 {
  "author": "arminw", 
  "date": "2004-06-22T18:16:24.000000Z", 
  "msg": [
   "reorganize odmg test cases", 
   "update tests"
  ], 
  "revision_id": "363853"
 }, 
 {
  "author": "arminw", 
  "date": "2004-06-22T13:02:13.000000Z", 
  "msg": [
   "fix xdoclet links"
  ], 
  "revision_id": "363852"
 }, 
 {
  "author": "tomdz", 
  "date": "2004-06-21T21:53:24.000000Z", 
  "msg": [
   "Added normal and xdoclet javadoc comments to the sources for tutorial 1", 
   "Some tweaking of the ojb-blank", 
   "Additional info for running the ojb-blank project"
  ], 
  "revision_id": "363851"
 }, 
 {
  "author": "arminw", 
  "date": "2004-06-21T21:16:26.000000Z", 
  "msg": [
   "apply path for optimistic locking problem by Martin Kal\ufffdn:", 
   "Looking at ClassDescriptor.java, lines 949 and 950 in method updateLockingValues,", 
   "one sees that the locking timestamp is created using \"new java.sql.Timestamp(long)\".", 
   "If doing this is seems that at least for Oracle JDBC thin driver, the naonsecond", 
   "part of the Timestamp can be initialized to values != 0.", 
   "Since Oracle TIMESTAMP does not have nanosecond precision, the value for comparision", 
   "when reading back from the DB will _always_ have Timestamp.getNanos() == 0.", 
   "Hence; the timestamp in memory and the comparision value read from the db will differ", 
   "and OptimisticLockingException thrown were it should not."
  ], 
  "revision_id": "363850"
 }
]