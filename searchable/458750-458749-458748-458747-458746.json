[
 {
  "author": "ehillenius", 
  "date": "2006-01-18T17:30:37.000000Z", 
  "msg": [
   "redirect fixes"
  ], 
  "revision_id": "458750"
 }, 
 {
  "author": "jdonnerstag", 
  "date": "2006-01-18T17:25:46.000000Z", 
  "msg": [
   "removed Component.markupStreamPosition and related source code"
  ], 
  "revision_id": "458749"
 }, 
 {
  "author": "cvs2svn", 
  "date": "2006-01-18T08:55:05.000000Z", 
  "msg": [
   "This commit was manufactured by cvs2svn to create tag", 
   "'V_1_2_PRE_MARKUPSTREAMPOSITION'."
  ], 
  "revision_id": "458748"
 }, 
 {
  "author": "jonl", 
  "date": "2006-01-18T08:55:05.000000Z", 
  "msg": [
   "Added redirectToInterceptPage() to Session (which is a little tricky because the PageMap must be determined since the redirection continuation url is a member of PageMap).  Used this to implement a default handling strategy for unauthorized page instantiation exceptions which invokes Session.onUnauthorizedPageAccess().  The default implementation of that method gets a sign in page class from IApplicationSettings, instantiates that page and calls redirectToInterceptPage on the created sign in page.  The upshot of all this is that all you have to do now in order to handle an unauthorized page access with a sign in authentication page is to simply set the sign in page with getApplicationSettings().setSignInPage(MySignInPage.class).  The issue of HTTP BASIC authentication will be separate, but perhaps can be handled in onUnauthorizedPageAccess as well."
  ], 
  "revision_id": "458747"
 }, 
 {
  "author": "jonl", 
  "date": "2006-01-17T23:54:24.000000Z", 
  "msg": [
   "More details on FIXME"
  ], 
  "revision_id": "458746"
 }
]