[
 {
  "author": "trawick", 
  "date": "2001-06-29T17:53:35.000000Z", 
  "msg": [
   "slight cleanups to the Unix lock implementation...", 
   "1) apr_unix_lock_mech_t has a new flags field to indicate whether", 
   "or not the particular mechanism is global (i.e., whether or not", 
   "we need to add an additional intraprocess mutex to block out", 
   "other threads in our process)", 
   "this will help fixing our knowledge of whether or not a particular", 
   "mechanism is global on a particular platform", 
   "a proc_pthread lock is always global, so this change brings a slight", 
   "performance improvement as we realize we don't need the intraprocess", 
   "mutex too", 
   "2) apr_unix_lock_mech_t has new acquire_read and acquire_write fields;", 
   "for now, this cleans up apr_lock_acquire_rw() and also makes it easy", 
   "to add interprocess rw lock...  ones based on flock() should take", 
   "just a few lines of code to implement (but watch the complications", 
   "for the lock create path since we need to sometimes use an", 
   "intraprocess rw lock too :( )"
  ], 
  "revision_id": "61829"
 }, 
 {
  "author": "dreid", 
  "date": "2001-06-29T16:07:32.000000Z", 
  "msg": [
   "Fix a bug in the cleanup code.", 
   "Check for the APR_ALL_CLEANUPS instead of 0."
  ], 
  "revision_id": "61828"
 }, 
 {
  "author": "trawick", 
  "date": "2001-06-29T12:17:40.000000Z", 
  "msg": [
   "fix some compile breakage (on HP-UX, at least)... testtime is happy on", 
   "HP-UX so hopefully the libc routines are called correctly"
  ], 
  "revision_id": "61827"
 }, 
 {
  "author": "dreid", 
  "date": "2001-06-29T09:01:41.000000Z", 
  "msg": [
   "struct apr_pool_t == apr_pool_t so change these parameters to reflect this..."
  ], 
  "revision_id": "61826"
 }, 
 {
  "author": "dreid", 
  "date": "2001-06-29T08:51:30.000000Z", 
  "msg": [
   "Include the pools header."
  ], 
  "revision_id": "61825"
 }
]