[
 {
  "author": "orw", 
  "date": "2014-06-16T08:40:28.052731Z", 
  "msg": [
   "125055: follow-up of fix for issue 124338 - adjust condition to trigger sort of bookmarks in order to avoid serious performance decrease", 
   "Kudos to Ariel for his analysis"
  ], 
  "revision_id": "1602823"
 }, 
 {
  "author": "brane", 
  "date": "2014-06-16T08:29:20.148740Z", 
  "msg": [
   "Change the JavaHL class cache to load (most) classes on demand instead of", 
   "loading all of them when the library is loaded.", 
   "[in subversion/bindings/javahl/native]", 
   "* jniwrapper/jni_object.hpp", 
   "(Java::Object): Change the class to use the Pimpl pattern. All derived", 
   "classes will define a (private) implementation class derivec from", 
   "Java::Object::ClassImpl.", 
   "(Java::Object::set_this): New; allows derived classes to set the", 
   "JNI \"this\" object reference in constructors after the Java::Object", 
   "has been iniitalized and the pimpl is valid.", 
   "(Java::ClassCache): Use the Pimpl pattern so that Object-derived", 
   "implementation classes can remain private.", 
   "(Java::Class): Do not derive from Java::Object.", 
   "* jniwrapper/jni_string.hpp", 
   "(Java::String): Do not derive from Java::Object.", 
   "* jniwrapper/jni_exception.hpp", 
   "(Java::Exception): Do not derive from Java::Object.", 
   "* jniwrapper/jni_class_cache.cpp: Include apr_atomic.h.", 
   "(ClassImplPtr): Uniqoe-ownership smart pointer for", 
   "Java::Object::ClassImpl that implements atomic access", 
   "to the underlying native pointer.", 
   "(Java::ClassCacheImpl): The implementation class for", 
   "Java::ClassCache. Stores lazily-initialized pointers", 
   "to the various Object-derived implementation classes,", 
   "except: Java::Object, Java::Class, Java::Exception and", 
   "Java::String, which are initialized when the library", 
   "is loaded.", 
   "(Java::ClassCache): Reimplement the whole shebang;", 
   "objects of this type are no longer created, instead,", 
   "it creates a Java::ClassCacheImpl on library load and", 
   "destroys it when the library is unloaded.", 
   "* AuthnCallback.hpp, AuthnCallback.cpp,", 
   "EditorCallbacks.hpp, EditorCallbacks.cpp,", 
   "ExternalItem.hpp, ExternalItem.cpp,", 
   "Prompter.cpp, SubversionException.hpp,", 
   "jniwrapper/jni_base.cpp,", 
   "jniwrapper/jni_channel.hpp, jniwrapper/jni_channel.cpp,", 
   "jniwrapper/jni_io_stream.hpp, jniwrapper/jni_io_stream.cpp,", 
   "jniwrapper/jni_list.hpp, jniwrapper/jni_list.cpp,", 
   "jniwrapper/jni_string_map.hpp, jniwrapper/jni_string_map.cpp:", 
   "Reimplement Object-derived classes to the Pimpl pattern", 
   "and update all uses."
  ], 
  "revision_id": "1602822"
 }, 
 {
  "author": "jsc", 
  "date": "2014-06-16T08:22:43.672826Z", 
  "msg": [
   "#124442# adapt patch to make it buildable"
  ], 
  "revision_id": "1602821"
 }, 
 {
  "author": "pmoravec", 
  "date": "2014-06-16T08:09:42.152678Z", 
  "msg": [
   "QPID-5823: Python client should create a node with name starting '\\#'"
  ], 
  "revision_id": "1602820"
 }, 
 {
  "author": "tillw", 
  "date": "2014-06-16T07:53:31.492643Z", 
  "msg": [
   "VXQuery updates:", 
   "- update project description", 
   "- update 'news' section", 
   "- change version control from svn to git", 
   "- fix mentors/committers", 
   "- add more links to incubation status reports", 
   "- mark the open items in 'Verify distribution rights'", 
   "as done using the date of the closing of LEGAL-182"
  ], 
  "revision_id": "1602819"
 }
]