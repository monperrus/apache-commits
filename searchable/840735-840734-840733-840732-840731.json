[
 {
  "author": "cmpilato", 
  "date": "2001-12-18T02:51:39.958561Z", 
  "msg": [
   "Major migration of repository creation/opening code into libsvn_repos", 
   "from libsvn_fs (Issue #428).  For consistency, the rest of the public", 
   "libsvn_repos functions now take svn_repos_t structures instead of", 
   "svn_fs_t structures.  You use the repos layer, you talk about", 
   "repository objects, capiche?", 
   "* subversion/libsvn_repos/repos.h", 
   "New.  Contains the portions of libsvn_fs/fs.h that got cored out in", 
   "the fs->repos code migration.", 
   "* subversion/libsvn_fs/fs.h", 
   "(SVN_FS__REPOS_README, SVN_FS__REPOS_DB_DIR, SVN_FS__REPOS_DAV_DIR,", 
   "SVN_FS__REPOS_LOCK_DIR, SVN_FS__REPOS_HOOK_DIR,", 
   "SVN_FS__REPOS_CONF_DIR, SVN_FS__REPOS_DB_LOCKFILE,", 
   "SVN_FS__REPOS_HOOK_START_COMMIT, SVN_FS__REPOS_HOOK_PRE_COMMIT,", 
   "SVN_FS__REPOS_HOOK_POST_COMMIT, SVN_FS__REPOS_HOOK_READ_SENTINEL,", 
   "SVN_FS__REPOS_HOOK_WRITE_SENTINEL, SVN_FS__REPOS_HOOK_DESC_EXT):", 
   "#defines moved to libsvn_repos/repos.h", 
   "(svn_fs_t): Removed dav_path, conf_path, hook_path, lock_path,", 
   "env_path; path is now what env_path was.", 
   "* subversion/include/svn_repos.h", 
   "(svn_repos_path, svn_repos_delete, svn_repos_fs, svn_repos_create): New.", 
   "(svn_repos_db_env, svn_repos_conf_dir, svn_repos_lock_dir,", 
   "svn_repos_db_lockfile, svn_repos_hook_dir,", 
   "svn_repos_start_commit_hook, svn_repos_pre_commit_hook,", 
   "svn_repos_post_commit_hook, svn_repos_read_sentinel_hook,", 
   "svn_repos_write_sentinel_hook): Moved from include/svn_fs.h:svn_fs_...", 
   "(svn_repos_begin_report, svn_repos_dated_revision,", 
   "svn_repos_get_logs, svn_repos_node_editor): Take repos argument", 
   "instead of fs.", 
   "* subversion/include/svn_fs.h", 
   "(svn_fs_berkeley_path): Renamed from svn_fs_repository.", 
   "(svn_fs_db_env, svn_fs_conf_dir, svn_fs_lock_dir,", 
   "svn_fs_db_lockfile, svn_fs_hook_dir, svn_fs_start_commit_hook,", 
   "svn_fs_pre_commit_hook, svn_fs_post_commit_hook,", 
   "svn_fs_read_sentinel_hook, svn_fs_write_sentinel_hook): Moved to", 
   "include/svn_repos.h, and renamed to svn_repos_...)", 
   "* subversion/libsvn_repos/repos.c", 
   "(svn_repos_path, svn_repos_delete, svn_repos_fs, svn_repos_create): New.", 
   "(svn_repos_db_env, svn_repos_conf_dir, svn_repos_lock_dir,", 
   "svn_repos_db_lockfile, svn_repos_hook_dir,", 
   "svn_repos_start_commit_hook, svn_repos_pre_commit_hook,", 
   "svn_repos_post_commit_hook, svn_repos_read_sentinel_hook,", 
   "svn_repos_write_sentinel_hook): Migrated from libsvn_fs/fs.c:svn_fs_...", 
   "(create_locks, create_hooks): Migrated from libsvn_fs/fs.c. Now take", 
   "repos arguments instead of fs.", 
   "(svn_repos_create): New (most of the guts came from", 
   "svn_fs_create_berkeley.", 
   "(svn_repos_open): Operate on svn_repos_t structures, not svn_fs_t.", 
   "* subversion/libsvn_fs/fs.c", 
   "(svn_fs_create_berkeley, svn_fs_open_berkeley): Moved all but the", 
   "Berkeley environment creation code to svn_repos_create and", 
   "svn_repos_open, respectively.  Use fs->path for environment path now.", 
   "(svn_fs_berkeley_recover, svn_fs_delete_berkeley): Path argument now", 
   "refers to the actual Berkeley environment.", 
   "* subversion/libsvn_subr/io.c", 
   "* subversion/include/svn_io.h", 
   "(apr_check_dir_empty): Moved from libsvn_fs/fs.c:dir_empty.", 
   "* subversion/libsvn_repos/hooks.c", 
   "(run_start_commit_hook, run_pre_commit_hook, run_post_commit_hook,", 
   "svn_repos_fs_begin_txn_for_commit, svn_repos_fs_begin_txn_for_update):", 
   "Works on repos now, not fs.", 
   "(svn_repos_fs_commit_txn): Added repos argument.", 
   "* subversion/libsvn_repos/reporter.c", 
   "(svn_repos_report_baton_t): Removed fs field, added repos.", 
   "(svn_repos_begin_report): Take repos argument instead of fs.", 
   "(svn_repos_set_path, svn_repos_finish_report):", 
   "* subversion/libsvn_repos/rev_hunt.c", 
   "(svn_repos_dated_revision): Take repos argument instead of fs.", 
   "* subversion/libsvn_repos/log.c", 
   "(svn_repos_get_logs): Take repos argument instead of fs.", 
   "* subversion/libsvn_repos/node_tree.c", 
   "(svn_repos_node_editor): Take repos argument instead of fs.", 
   "* subversion/libsvn_fs/rev-table.c", 
   "(svn_fs__youngest_rev): Use fs->path in error string.", 
   "* subversion/libsvn_fs/tree.c", 
   "(not_found, already_exists): Use fs->path in error string.", 
   "* subversion/libsvn_fs/nodes-table.c", 
   "(svn_fs__new_node_id): Use fs->path in error string.", 
   "* subversion/libsvn_fs/dag.c", 
   "(txn_body_dag_init_fs): Use fs->path in error string.", 
   "* subversion/libsvn_fs/err.c", 
   "(svn_fs__wrap_db, corrupt_id, corrupt_rev,", 
   "svn_fs__err_corrupt_clone, svn_fs__err_dangling_id,", 
   "svn_fs__err_corrupt_nodes_key, svn_fs__err_corrupt_next_txn_id,", 
   "svn_fs__err_corrupt_txn, svn_fs__err_not_mutable,", 
   "svn_fs__err_path_syntax, svn_fs__err_no_such_txn,", 
   "svn_fs__err_not_directory): Use fs->path in error string.", 
   "* subversion/libsvn_ra_local/commit_editor.c", 
   "(struct edit_baton): Added repos field.", 
   "(open_root): Updated call to svn_repos_fs_begin_txn_for_commit.", 
   "(close_edit): Updated call to svn_repos_fs_commit_txn.", 
   "(svn_ra_local__get_editor): Populate repos and fs edit_baton fields", 
   "a little differently.", 
   "* subversion/libsvn_ra_local/ra_local.h", 
   "(svn_ra_local__session_baton_t): Store repos object.", 
   "* subversion/libsvn_ra_local/ra_plugin.c", 
   "(open): Updated call to svn_repos_open, and cache the filesystem object.", 
   "(close): Use svn_repos_close() now, and NULL the cached fs object.", 
   "(get_dated_revision): Updated call to svn_repos_dated_revision.", 
   "(do_update, do_status): Updated call to svn_repos_begin_report.", 
   "(get_log): Updated call to svn_repos_get_logs.", 
   "* subversion/libsvn_ra_local/split_url.c", 
   "(svn_ra_local__split_URL): Use the repos API instead of the FS api", 
   "for opening repositories.", 
   "* subversion/mod_dav_svn/dav_svn.h", 
   "(dav_svn_repos): Add repos field.", 
   "* subversion/mod_dav_svn/activity.c", 
   "(dav_svn_create_activity): Updated call to svn_repos_fs_begin_txn_for_commit.", 
   "* subversion/mod_dav_svn/repos.c", 
   "(dav_svn_get_resource): Updated call to svn_repos_open.  Also, cache FS.", 
   "* subversion/mod_dav_svn/version.c", 
   "(dav_svn_merge): Updated call to svn_repos_fs_commit_txn.", 
   "* subversion/mod_dav_svn/update.c", 
   "(dav_svn__update_report): Updated call to svn_repos_begin_report.", 
   "* subversion/mod_dav_svn/log.c", 
   "(dav_svn__log_report): Updated call to svn_repos_get_logs.", 
   "* subversion/svnadmin/main.c", 
   "(main): Migrated to libsvn_repos API.  NOTE: had to comment out the", 
   "\"recover\" subcommand until I figure out what to do about the", 
   "problems remaining there.", 
   "* subversion/tests/fs-helpers.h", 
   "(svn_test__create_fs): Renamed from svn_test__create_fs_and_repos.", 
   "(svn_test__create_repos): New.", 
   "* subversion/tests/fs-helpers.c", 
   "(svn_test__create_fs): Renamed from svn_test__create_fs_and_repos.", 
   "(svn_test__create_repos): New.", 
   "* subversion/tests/libsvn_fs/fs-test.c", 
   "* subversion/tests/libsvn_fs/strings-reps-test.c", 
   "Replaced all callers of the renamed svn_test__create_fs_and_repos function.", 
   "* subversion/tests/libsvn_repos/repos-test.c", 
   "(dir_deltas): Use libsvn_repos API for opening/closing repositories.", 
   "* subversion/svnlook/main.c", 
   "(svnlook_ctxt_t): Added repos field.", 
   "(generate_delta_tree): Take repos argument instead of fs.  All", 
   "callers changed.", 
   "(main): Use libsvn_repos API for opening/closing repositories.", 
   "* build.conf", 
   "(libsvn_test_fs): Links with libsvn_fs and libsvn_repos.", 
   "* subversion/tests/clients/cmdline/copy_tests.py", 
   "(sandbox) Use \"copy_tests\", not \"commit_tests\"."
  ], 
  "revision_id": "840735"
 }, 
 {
  "author": "philip", 
  "date": "2001-12-17T23:10:57.659859Z", 
  "msg": [
   "Provides 'svn diff -r REV' functionality to compare the working copy", 
   "against a given revision in the repository. The existing 'svn diff'", 
   "behaviour is unchanged.", 
   "* subversion/include/svn_wc.h", 
   "(svn_wc_diff_cmd_t, svn_wc_get_diff_editor): New typedef and function.", 
   "* subversion/libsvn_wc/diff.c", 
   "New file providing the repository diff editor.", 
   "This code uses an svn_delta_edit_fns_t editor driven by", 
   "svn_wc_crawl_revisions (like the update command) to retrieve the", 
   "differences between the working copy and the requested repository", 
   "version. Rather than updating the working copy, this new editor creates", 
   "temporary files that contain the pristine repository versions. When the", 
   "crawler closes the files the editor calls back to a client layer", 
   "function to compare the working copy and the temporary file. There is", 
   "only ever one temporary file in existence at any time.", 
   "When the crawler closes a directory, the editor then calls back to the", 
   "client layer to compare any remaining files that may have been modified", 
   "locally. Added directories do not have corresponding temporary", 
   "directories created, as they are not needed.", 
   "* subversion/libsvn_wc/wc.h", 
   "(svn_wc__empty_file_path, svn_wc__open_empty_file, svn_wc__close_empty_file):", 
   "New functions.", 
   "* subversion/libsvn_wc/adm_files.c", 
   "(svn_wc__empty_file_path, svn_wc__open_empty_file, svn_wc__close_empty_file):", 
   "New functions to provide a permanent empty file in the admin area.", 
   "(init_adm): Create the empty file.", 
   "* subversion/include/svn_client.h", 
   "(svn_client_diff): New function.", 
   "* subversion/libsvn_client/diff.c", 
   "(svn_client_diff): New function, the client interface to the new diff code.", 
   "(svn_client__diff_cmd): New function, the callback to compare two files,", 
   "current invokes external diff program.", 
   "* subversion/clients/cmdline/diff-cmd.c", 
   "(wc_repository_diff): New function to handle the new repository diff.", 
   "(svn_cl__diff): Call the new function when the -r option is given.", 
   "* subversion/clients/cmdline/main.c", 
   "(svn_cl__cmd_table): Modify the diff usage string to reflect the new", 
   "functionality.", 
   "* subversion/tests/clients/cmdline/diff_tests.py", 
   "New file providing tests of the new diff code.", 
   "* build.conf", 
   "Add the new file diff_tests.py."
  ], 
  "revision_id": "840734"
 }, 
 {
  "author": "kfogel", 
  "date": "2001-12-17T22:55:28.906596Z", 
  "msg": [
   "Fix for issue #566.  This patch fixes a problem that keeps svn", 
   "\"import\" from working Win32.", 
   "Patch by: Barry Pederson <barryp@yahoo.com>", 
   "When apr_read_dir() is called with APR_FINFO_NORM under Win32, it", 
   "returns APR_INCOMPLETE instead of APR_SUCCESS, because the", 
   "APR_FINFO_NORM bitmask includes bits indicating you want dev and inode", 
   "info, and those aren't available on the Win32 platform.", 
   "With this patch, we ask only for name and type info, which is all we", 
   "require.  That works for all platforms, and is consistent with how we", 
   "already call apr_read_dir() in libsvn_subr/io.c.", 
   "* subversion/libsvn_client/add.c (add_dir_recursive): Request only the", 
   "needed information in calls to apr_dir_read().", 
   "* subversion/libsvn_client/commit.c (import_dir): Same."
  ], 
  "revision_id": "840733"
 }, 
 {
  "author": "kfogel", 
  "date": "2001-12-17T20:15:53.900996Z", 
  "msg": [
   "* HACKING: Talk about issue numbers in proper context, other fixups."
  ], 
  "revision_id": "840732"
 }, 
 {
  "author": "kfogel", 
  "date": "2001-12-17T20:15:08.599072Z", 
  "msg": [
   "* subversion/client/cmdline/main.c (main): Handle errors to stderr,", 
   "not stdout.  Why weren't we doing this before?"
  ], 
  "revision_id": "840731"
 }
]