[
 {
  "author": "cmpilato", 
  "date": "2002-07-10T16:00:50.469502Z", 
  "msg": [
   "Some work on issue #690 that fixes the client log changed-path output.", 
   "* subversion/clients/cmdline/log-cmd.c", 
   "(log_message_receiver): Print \"replaces\" in the changed paths for", 
   "what they are."
  ], 
  "revision_id": "842530"
 }, 
 {
  "author": "cmpilato", 
  "date": "2002-07-10T15:37:39.121113Z", 
  "msg": [
   "Port to my branch (and continue into new code regions) the fix for", 
   "Issue #778 committed to trunk in revision 2453.", 
   "* subversion/libsvn_fs/fs.h", 
   "(svn_fs__canonicalize_abspath): New.", 
   "* subversion/libsvn_fs/bdb/changes-table.h", 
   "(svn_fs__changes_add): Update docstring (expect canonicalized paths).", 
   "* subversion/libsvn_fs/bdb/copies-table.h", 
   "(svn_fs__create_copy): Update docstring (expect canonicalized paths).", 
   "* subversion/libsvn_fs/fs.c", 
   "(svn_fs__canonicalize_abspath): New.", 
   "* subversion/libsvn_fs/tree.c", 
   "(add_change): Canonicalize change paths since they are stored as", 
   "path strings in the underlying database.", 
   "* subversion/libsvn_fs/bdb/changes-table.c", 
   "(merge_change): No longer remove leading '/' characters.", 
   "* subversion/libsvn_fs/dag.c", 
   "(svn_fs__dag_copy): Canonicalize change paths since they are stored", 
   "as path strings in the underlying database.", 
   "* subversion/tests/libsvn_fs/fs-test.c", 
   "(copy_test): Make tests expect canonicalized form of path.", 
   "(canonicalize_abspath): New test.", 
   "(test_funcs): Add reference to new canonicalize_abspath test.", 
   "* subversion/tests/libsvn_fs/changes-test.c", 
   "(standard_changes, get_ideal_changes): Use canonicalized paths."
  ], 
  "revision_id": "842529"
 }, 
 {
  "author": "kfogel", 
  "date": "2002-07-10T15:36:37.061803Z", 
  "msg": [
   "Following up to revision 2449:", 
   "* subversion/libsvn_wc/diff.c", 
   "(file_diff): Take a pool argument.", 
   "(directory_elements_diff): Use a true iteration pool, passing it", 
   "directly to file_diff, instead of shadowing the dir_baton's pool."
  ], 
  "revision_id": "842528"
 }, 
 {
  "author": "cmpilato", 
  "date": "2002-07-10T15:06:34.937990Z", 
  "msg": [
   "Transform Issue #778 from fantasy to reality.", 
   "* subversion/libsvn_fs/fs.h", 
   "(svn_fs__canonicalize_abspath): New.", 
   "* subversion/libsvn_fs/bdb/copies-table.h", 
   "(svn_fs__create_copy): Update docstring (expect canonicalized paths).", 
   "* subversion/libsvn_fs/fs.c", 
   "(svn_fs__canonicalize_abspath): New.", 
   "* subversion/libsvn_fs/dag.c", 
   "(svn_fs__dag_copy): Canonicalize change paths since they are stored", 
   "as path strings in the underlying database.", 
   "* subversion/tests/libsvn_fs/fs-test.c", 
   "(copy_test): Make tests expect canonicalized form of path.", 
   "(canonicalize_abspath): New test.", 
   "(test_funcs): Add reference to new canonicalize_abspath test."
  ], 
  "revision_id": "842527"
 }, 
 {
  "author": "philip", 
  "date": "2002-07-10T12:05:13.253579Z", 
  "msg": [
   "First step for issue 749.  Introduce an access baton and open/close", 
   "functions.  Replace lock/unlock calls with open/close calls and start", 
   "passing an access baton around.  Check for a write lock when creating", 
   "adm things.", 
   "* subversion/include/svn_error_codes.h", 
   "(SVN_ERR_WC_NOT_LOCKED): New error.", 
   "* subversion/include/svn_wc.h", 
   "(struct svn_wc_adm_access_t, enum svn_wc_adm_access_type,", 
   "svn_wc_adm_open, svn_wc_adm_close, svn_wc_adm_write_check): Added.", 
   "(svn_wc_lock): Renamed to svn_wc__lock and removed from this file.", 
   "(svn_wc_unlock): Renamed to svn_wc__unlock and removed from this file.", 
   "(svn_wc_cleanup): Document the locking behaviour.", 
   "* subversion/libsvn_wc/wc.h (svn_wc__adm_steal_lock): Added.", 
   "* subversion/libsvn_wc/adm_files.h", 
   "(svn_wc__make_adm_thing, svn_wc__adm_cleanup_tmp_area): Change argument", 
   "from path to access baton.", 
   "* subversion/libsvn_wc/adm_files.c", 
   "(svn_wc__make_adm_thing): Change argument from path to access baton.", 
   "Require a write lock.", 
   "(init_adm_tmp_area): Change argument from path to access baton.", 
   "(svn_wc__adm_cleanup_tmp_area): Change argument from path to access", 
   "baton.  Require a write lock.  Remove conditional svn_wc_lock and", 
   "svn_wc_unlock.", 
   "(init_adm): Change svn_wc_lock to svn_wc_adm_open. Change svn_wc_unlock", 
   "to svn_wc_adm_close.", 
   "* subversion/libsvn_wc/lock.c", 
   "(svn_wc__lock): Renamed from svn_wc_lock and made static.  Change", 
   "parameter from path to access baton.  Return an error if an unexpected", 
   "failure occurs while creating lock file.", 
   "(svn_wc__unlock): Renamed from svn_wc_unlock and made static. Change", 
   "parameter from path to access baton.", 
   "(svn_wc_adm_open, svn_wc_adm_close, svn_wc_adm_write_check,", 
   "svn_wc__adm_steal_lock): Added.", 
   "(svn_wc_locked): Use TRUE/FALSE instead of 1/0.", 
   "* subversion/libsvn_wc/log.c", 
   "(svn_wc_cleanup): Use svn_wc__adm_steal_lock instead of the two", 
   "step check/get lock. Change parameter to svn_wc__adm_cleanup_tmp_area.", 
   "Change svn_wc_unlock to svn_wc_adm_close.", 
   "(log_do_committed): Get access baton to create KILLME file, this is", 
   "temporary code.", 
   "* subversion/libsvn_wc/props.c (svn_wc_merge_prop_diffs): Change", 
   "svn_wc_lock to svn_wc_adm_open. Change svn_wc_unlock to svn_wc_adm_close.", 
   "* subversion/libsvn_wc/update_editor.c", 
   "(delete_entry, close_directory, svn_wc_install_file):  Change svn_wc_lock", 
   "to svn_wc_adm_open.  Change svn_wc_unlock to svn_wc_adm_close.", 
   "* subversion/libsvn_client/commit.c (unlock_dirs): Extract access", 
   "baton from hash and call svn_wc_adm_close.", 
   "* subversion/libsvn_client/copy.c (unlock_dirs): Extract access", 
   "baton from hash and call svn_wc_adm_close.", 
   "* subversion/libsvn_client/commit_util.c (lock_dir): Change svn_wc_lock", 
   "to svn_wc_adm_open and put access baton in hash."
  ], 
  "revision_id": "842526"
 }
]