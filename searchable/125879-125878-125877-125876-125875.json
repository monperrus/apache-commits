[
 {
  "author": "gregor", 
  "date": "2005-01-21T03:44:55.092533Z", 
  "msg": [
   "Fixed wrong pipeline call that broke IP range group administration."
  ], 
  "revision_id": "125879"
 }, 
 {
  "author": "gregor", 
  "date": "2005-01-21T03:44:46.814015Z", 
  "msg": [
   "Fixed wrong pipeline call that broke IP range group administration."
  ], 
  "revision_id": "125878"
 }, 
 {
  "author": "jm", 
  "date": "2005-01-21T03:29:20.652716Z", 
  "msg": [
   "fix desc_wrap.t to deal with different Text::Wrap behaviour on older perls"
  ], 
  "revision_id": "125877"
 }, 
 {
  "author": "jm", 
  "date": "2005-01-21T03:22:17.955937Z", 
  "msg": [
   "more tweaks to output format"
  ], 
  "revision_id": "125876"
 }, 
 {
  "author": "rich", 
  "date": "2005-01-21T03:15:45.923580Z", 
  "msg": [
   "Support for nested page flows in popup windows.", 
   "To use the feature in its simplest form, do the following:", 
   "- Add a 'popup' attribute to the netui:anchor that will launch the nested page flow.", 
   "<netui:anchor action=\"goNested\" popup=\"true\">launch nested page flow</netui:anchor>", 
   "- In the original page flow, in the action that handles the nested page flow's return-action, forward to a special global Forward named \"_auto\".  This will cause a script page to get rendered -- it will close the popup window (and more, in the advanced cases below).", 
   "@Jpf.Action()", 
   "public Forward nestedPageFlowDone()", 
   "{", 
   "return new Forward(\"_auto\");", 
   "}", 
   "That's all.  The nested page flow will run in the popup window, and when it's done, the popup window will close.", 
   "There are more interesting things you can do here.  First, to configure the popup window (location, size, whether it has a toolbar, whether it's resizable, etc.), you include a netui:configurePopup tag inside the anchor:", 
   "<netui:anchor action=\"lookupZipCode\" popup=\"true\">", 
   "launch a nested page flow to look up a zip code", 
   "<netui:configurePopup resizable=\"false\" width=\"400\" height=\"200\"/>", 
   "</netui:anchor>", 
   "Next, you want to retrieve values that were submitted to the nested page flow, and map them into the original page dynamically.  To do this, add one or more netui:retrievePopupOutput tags inside the configurePopup tag:", 
   "zip code: <netui:textBox tagId=\"zipCodeField\"/><br/>", 
   "another value: <netui:textBox tagId=\"anotherField\"/><br/>", 
   "<netui:anchor action=\"lookupZipCode\" popup=\"true\">", 
   "launch a nested page flow to look up a zip code", 
   "<netui:configurePopup resizable=\"false\" width=\"400\" height=\"200\">", 
   "<netui:retrievePopupOutput dataSource=\"outputFormBean.zipCode\" tagIdRef=\"zipCodeField\"/>", 
   "<netui:retrievePopupOutput dataSource=\"request.anotherValue\" tagIdRef=\"anotherField\"/>", 
   "</netui:configurePopup>", 
   "</netui:anchor>", 
   "The dataSource is simply an expression to get evaluated when the popup window closes, and tagIdRef is the tagId of the field to update.  Note that 'outputFormBean' is a special binding context that applies in this situation.  It is the \"return value\" of the nested page flow: it receives the value generated by the 'outputFormBean' (or 'outputFormBeanType') in the returnAction forward from the nested page flow.  In this case, the nested page flow had the following as its return action:", 
   "@Jpf.Action(", 
   "forwards={", 
   "@Jpf.Forward(name=\"success\", returnAction=\"nestedPageFlowGotZip\", outputFormBeanType=ZipForm.class)", 
   "}", 
   ")", 
   "public Forward done()", 
   "{", 
   "getRequest().setAttribute(\"anotherValue\", \"hi there\");  // just for the purposes of the example above", 
   "ZipForm returnForm = new ZipCodeForm();", 
   "returnForm.setZipCode(\"12345\");     // pretend we got this through user input", 
   "return new Forward(\"success\", new ZipForm( \"12345\" ));", 
   "}", 
   "The original page flow has this:", 
   "@Jpf.Action()", 
   "public Forward nestedPageFlowGotZip(ZipForm zipForm)", 
   "{", 
   "return new Forward(\"_auto\");", 
   "}", 
   "So, 'outputFormBean.zipCode' evaluates to \"12345\", which is the value mapped into the 'zipCodeField' field.", 
   "Finally, you may want to run custom JavaScript to open the popup window, or to run when the popup window closes.  Both can be configured in the configurePopup tag:", 
   "<netui:configurePopup popupFunc=\"myOpenPopupFunc\" onPopupDone=\"myOnPopupDone\"/>", 
   "The 'popupFunc' simply does whatever you want to open the popup window.  The 'onPopupDone' func can do whatever it wants, but it also receives a Map of tagIdRef->value as its argument.  In the example above, the following method would bring up two alerts: \"anotherField: hi there\" and \"zipCodeField: 12345\".", 
   "function myOnPopupDone(map)", 
   "{", 
   "for (var i in map)", 
   "{", 
   "alert(i + \": \" + map[i]);", 
   "}", 
   "}", 
   "An example of this feature can be found at netui/test/webapps/drt/coreWeb/miniTests/updateFormFromNestedPopup.", 
   "DRT/BVT: netui (WinXP)", 
   "BB: self (linux)"
  ], 
  "revision_id": "125875"
 }
]