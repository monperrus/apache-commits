[
 {
  "author": "", 
  "date": "2012-03-28T18:40:21.547034Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 9149", 
   "Author:   jrueppel@adobe.com", 
   "Date:     2009-08-06T21:23:25.103734Z", 
   "Log Message:", 
   "-----------", 
   "Checking in a fix for SDK-22227", 
   "Changing language code trigger for Norwegian from \"NB\" to \"NO\" java language code trigger query will return \"NO\" for Norwegian system lang so \"NB\" doesn't work.", 
   "ant clean main build successful.", 
   "Modified Paths:", 
   "--------------", 
   "/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/Context.java"
  ], 
  "revision_id": "1313688"
 }, 
 {
  "author": "", 
  "date": "2012-03-28T18:40:19.635205Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 8737", 
   "Author:   preilly@adobe.com", 
   "Date:     2009-07-22T18:24:29.904332Z", 
   "Log Message:", 
   "-----------", 
   "* Fixed localization issue.", 
   "tests Passed: checkintests", 
   "Needs QA: YES", 
   "Needs DOC: NO", 
   "Bug fixes: SDK-22174", 
   "API Change: NO", 
   "Reviewer: Erik", 
   "Is noteworthy for integration: No", 
   "Code-level description of changes:", 
   "ContextStatics.java", 
   "Added LANG_DA, LANG_FI, and LANG_NB.", 
   "Context.java", 
   "Modified getLanguageID() to handle \"DA\", \"FI\", and \"NB\".", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/Context.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/ContextStatics.java</path>"
  ], 
  "revision_id": "1313687"
 }, 
 {
  "author": "", 
  "date": "2012-03-28T18:40:17.625909Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 8528", 
   "Author:   jodyer@adobe.com", 
   "Date:     2009-07-13T16:45:02.494844Z", 
   "Log Message:", 
   "-----------", 
   "This change adds support for the new API versioning solution (see design note below). There are two signficant changes: 1/ActionBlockEmitter translates version (legacy \"Version\" and new \"API\" named) metadata into version markers on the annotated traits' names; and 2/AbcParser strips traits that are introduced in a larger version than the version of the code being compiled. Some helper support has been added to Context. Information about the current versions is recorded in the Flash Runtime provided APIVersions.java.", 
   "QE: Yes. (Chris Peyer has the test plan)", 
   "Doc: Maybe. Users and tools which want to compile code as though it was an earlier version need to know about the -api flag", 
   "Checkintests: PASS (asc-tests PASS too, except where they were already broken)", 
   "Reviewer: Peter D.", 
   "Bugs: ASC-3771 - ASC needs to support versioning of Flash Runtime APIs", 
   "###", 
   "API Versioning in Argo/Athena", 
   "Jeff Dyer", 
   "09-Jul-2009", 
   "BACKGROUND", 
   "Logically, a version can be thought of as a set of bindings. There is a partial order of versions such that every version is a subset of itself and zero or more other versions. A version is said to be compatible with every other version of which it is a superset including itself.", 
   "In AIR 2.0 (Athena, which includes Argo), the partial order is such", 
   "FP_9_0    <   AIR_1_0", 
   "FP_9_0    <   FP_10_0", 
   "AIR_1_0   <   AIR_1_5", 
   "FP_10_0   <   FP_10_1", 
   "FP_10_0   <   AIR_1_5", 
   "AIR_1_5   <   AIR_1_5_1", 
   "AIR_!_5_1 <   AIR_2_0", 
   "FP_10_1   <   AIR_2_0", 
   "From these relations we can see, for example, that a binding introduced in FP9 will be in every other version; a binding introduced in AIR_1_0 is not in FP_9_0 but is in AIR_1_5; and a bidning introduced in AIR_2_0 is only in AIR_2_0.", 
   "Library code definitions are of the version specified by the version metadata or by default of the smallest version (FP_9_0). Library code references are always of the largest version (in this case AIR_2_0). This means that regardless of the version it was introduced library code references can \u201csee\u201d all bindings.", 
   "Client code is of the version it was built with as determined by the SWF version or some other application specific information.", 
   "Only public names in the Flash runtime built-ins (avmglue and avmcore) may be versioned. Versioning names in a private, protected, internal, interface, or user defined namespace is prohibited. [Note: Private names are not visible outside of the builtin code and so versioning has no effect on them; other names might be visible outside of the builtin code but are not required by targeted use cases to be versioned and therefore doing so unnecessarily complicates the implementation.]", 
   "We further limit the set of names being versioned to those whose namespaces have one of the flash runtime package names or the empty string.", 
   "USAGE", 
   "API Version Metadata", 
   "The metadata syntax for marking a builtin API with a version is this:", 
   "VersionMetaData := \u2018[\u2018 \u2018API\u2019 \u2018(\u2018 VersionList \u2018)\u2019 \u2018]\u2019", 
   "VersionList     := VersionList \u2018,\u2019 Version", 
   "Version         := Integer (between 660 and 666, in Argo/Athena)", 
   "ASC configuration variables are defined to alias these integers:", 
   "FP_9_0   660", 
   "AIR_1_0 661", 
   "FP_10_0 662", 
   "AIR_1_5 663", 
   "AIR_1_5_1       664", 
   "FP_10_1 665", 
   "AIR_2_0 666", 
   "These values are derived from an enum definition in splayer.h", 
   "enum APIVersion {", 
   "APIVersionNotYetKnown = 659,", 
   "FP_9_0,", 
   "AIR_1_0,", 
   "FP_10_0,", 
   "AIR_1_5,", 
   "AIR_1_5_1,", 
   "FP_10_0_32,", 
   "AIR_1_5_2,", 
   "FP_10_1,", 
   "AIR_2_0,", 
   "AIR_ZEPHYR,", 
   "// --------- Add new versions here -------", 
   "APIVersionUnrecognized,", 
   "APIVersionLast", 
   "};", 
   "[NOTE: FP_10_0_32 and AIR_ZEPHYR is not currently used in the FR code base]", 
   "The legacy metadata [Version(\u2026)] metadata has been deprecated and will be dropped before the release of Argo.", 
   "Unlike the old Version metadata, the API metadata allows for multiple arguments to indicate that a definition was introduced in multiple disjoint versions. For example a common pattern is", 
   "[API(AIR_1_0, FP_10_0)] public function \u2026", 
   "This indicates that the method was introduced first in AIR 1 and then migrated to FP 10 (and therefore is not in FP 9).", 
   "It is an error to use an invalid version number.", 
   "Invoking ASC", 
   "When using ASC to compile builtin code with ScriptCompiler, both the \u2018-builtin\u2019 and \u2018-apiversioning\u2019 flags must be used. This causes names in a versioned namespace to be marked either with the specified version or the default version (FP_9_0).", 
   "When using ASC to compile client code as a version smaller than the largest version (AIR_2_0) it is necessary to use the \u2018-api\u2019 flag to specify the version to be used. The specified version is used to exclude names of larger versions during ABC import. Otherwise, ASC does nothing version specific to the generated ABCs of client code. Among other things this means that third party tools that read ABC will continue to work.", 
   "Invoking AVM", 
   "Since client version information is derived from a context larger than an ABC file, the AVM has no way to know what version the code was built as. For this reason there is a flag \u2018-Dapi\u2019 which all allows the api version to be specified. [NOTE: this flag is only interesting for testing since there are currently no versioned APIs in the AVM built-ins or shell code.]", 
   "Invoking Flash", 
   "Flash is invoked as before.", 
   "MECHANICS", 
   "AVM Mechanics", 
   "Namespaces control the visibility of names in AS3. We exploit this fact by modifying the URI of versioned namespaces with a version mark. A version mark is a single Unicode character from the Private Use Area (0xE000 to 0xF8FF). Such a mark is appended to the normal (base) URI. The effect is to make each versioned name visible only to references that also have their versioned namespaces similarly marked. [NOTE: The version of FP9 is 660 and so the version marker for FP9 is 0xE000+660.] URIs of the largest version are unmarked by the VM.", 
   "To cause versioned bindings to be visible to code of larger (and therefore different) versions, we add binding aliases for each of the larger (compatible) versions. [NOTE: this is even true for client code to allow SWFs of a larger version to \u201csee\u201d bindings of SWFs of a smaller version. The important differences between builtin and client code are that: 1/built-ins can contain bindings of different versions, whereas client code bindings within an ABC are always of the same version; and 2/built-ins versions are explicitly encoded in each trait name, whereas client code version is indicated by the host]", 
   "On Player startup, the version compatibility information is passed to AvmCore. This information is compiled into the player from the file \u2018./flash/avmglue/api-versions.cpp\u2019.", 
   "On ABC parsing, the version of the ABC being parsed is given to the parser by the host code. Again, builtin code is by default treated as if of the largest version. The version number is cached in the PoolObject associated with the ABC and versioned namespaces are marked with the appropriate version marker. When traits (and scripts for toplevel bindings) are added to the various mulitiname hash tables an alias is added for each version that is compatible with the initial version(s). [NOTE: builtin traits can be introduced in multiple versions and so the set of compatible versions must be computed as the union of the compatibility sets of each of the initial versions.]", 
   "At runtime dynamically computed names (e.g E4X names) that have a versioned URI must also be versioned. AS3 and E4X namespaces share the same syntax and values in the language. For example, the expression \u2018obj.public::x\u2019 is a valid reference to the an xml element or an ordinary object property. Therefore it is necessary (or at least expedient) to also version E4X names.", 
   "TESTING NOTE: try creating an E4X value with elements with names in a namespace with a versioned URI (e.g. the empty string) and passing that value to code of another version. Are the elements of that value visible to the receiver code? They should be, but is that a problem in practice. At least its something to document. [NOTE: this is not a problem for ordinary object properties, since such properties have no namespace.]", 
   "At runtime, the PoolObject of the executing code must be derived from the dynamic scope of the callee (which is builtin code). The innermost client MethodEnv contains a reference to its PoolObject (through a MethodInfo). This pool contains the curren API version.", 
   "Any code that reflects on the names of a value needs to reflect only those names that are of the same version as the caller (e.g. describeType).", 
   "Any code that formats a name needs to strip off the version marker of that name\u2019s namespace. (For example, E4X methods that return the URI of a qname and namespace, and the Multiname format method)", 
   "ASC Mechanics", 
   "ASC only marks versioned namespaces of traits when both the \u2018-builtin\u2019 and \u2018-apiversioning\u2019 are passed to ScriptCompiler. All other uses of ASC will result in unversioned traits. Builtin traits have names that are constant multinames. Non-builtin names are single qualified name constants (as before) and so there is no need to bump the abc version number.", 
   "ASC marks all builtin trait names with a version. Definitions with no version metadata are marked with the smallest version (FP_9_0=660). All other definitions are marked with the version(s) specified by metadata.", 
   "ASC ABC import (AbcParser.java) ignores traits that are introduced in a larger version than the version of the code being compiled. The version of the current code is specified by the \u2018-api\u2019 flag on the ASC command line. It is an error to use \u2018-api\u2019 and \u2018-apiversioning\u2019 on the same command line. This is because builtin code is always of the largest version and so the \u2018-api\u2019 flag is meaningless.", 
   "It is an error to use an invalid version number with API metadata. Currently valid versions range from 660 to 666.", 
   "PITFALLS", 
   "Semantic Pitfalls", 
   "These are not your grandfather\u2019s namespaces and so there are a few things to think about when handling namespaces in native code:", 
   "\u2022       Creating \u2013 versioned namespaces must be versioned with the version of the owning code", 
   "\u2022       Comparing \u2013 versioned namespaces just be interned to compare correctly to other namespaces; and, the nameless public is no longer necessarily the empty string", 
   "\u2022       Formatting \u2013 namespaces might print funny", 
   "Therefore:", 
   "\u2022       Use ApiUtils helpers to create and access namespaces", 
   "\u2022       Use ApiUtils::isPublicNS(..) to determine of a namespace is nameless public", 
   "\u2022       Use Namespace::getURI(true) to get the uri with version marker stripped off", 
   "\u2022       Use the built-ins format methods to pretty print names and namespaces", 
   "Performance Pitfalls", 
   "Computational overhead is introduced into the player in two ways:", 
   "\u2022       Storing hash table entries for versioned aliases", 
   "\u2022       Computing versioned namespaces dynamically (e.g. getCurrentPublic)", 
   "To minimize this overhead we should:", 
   "\u2022       Cache the public namespace per PoolObject instance", 
   "\u2022       Cache the versioned namespaces by version and uri in AvmCore instance", 
   "\u2022       Add versioned alias only those versions which are available on each platform (e.g. no AIR bindings on Player releases)", 
   "\u2022       Ensure that the pool object of the caller whenever it is available to avoid stack walking", 
   "UTILITIES", 
   "nativegen.py", 
   "nativegen.py reads the builtin ABC files and generates thunks for native methods contained within. This tool ignores duplicates that result from versioning, and it needs to strip off the version marker when generating thunk names.", 
   "api-versions.xml", 
   "The latest version information is specified in the file \u2018api-versions.xml\u2019. This file is used as input to the utility \u2018./utils/apivergen.abc\u2019 to generated equivalent C++ and Java code. Manually execute", 
   "avmshell apivergen.abc \u2013 api-versions.xml", 
   "to generate the files api-versions.xml.cpp and api-versions.xml.java. These files must then be copied to the appropriately named files (api-versions.cpp and APIVersions.java) in their respective locations in the avm/player and ASC workspaces. [NOTE: This process does not need to be automated as it is performed once per release.]", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/Context.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/cmdline/config.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/embedding/Main.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/semantics/FlowAnalyzer.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/cmdline/avmtargetn.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/cmdline/help1.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/cmdline/help2.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/embedding/ScriptCompiler.java</path>", 
   "<path kind=\"file\" action=\"A\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/APIVersions.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/sanity/strict/native.cpp</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/embedding/CompilerPlug.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/Names.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/abc/AbcParser.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/sanity/strict/native.h</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/cmdline/avmtarget.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/embedding/avmplus/ActionBlockEmitter.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/embedding/Compiler.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/semantics/ObjectValue.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/ContextStatics.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/parser/MetaDataEvaluator.java</path>"
  ], 
  "revision_id": "1313686"
 }, 
 {
  "author": "", 
  "date": "2012-03-28T18:40:15.286769Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 8095", 
   "Author:   peted@adobe.com", 
   "Date:     2009-06-23T16:14:26.856798Z", 
   "Log Message:", 
   "-----------", 
   "Ongoing refactoring and simplification of the Asc parser", 
   "Fixed a regression related to xml,regex,divide ambiguities (that I created).", 
   "Several asc tests updated for slight change in error message behavior.", 
   "QE: Gaurav to add new mx tests", 
   "Doc: No", 
   "Checkintests: Pass", 
   "Reviewer: Gaurav", 
   "Bugs:", 
   "ASC-3759", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/Context.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/VarAttrErr17.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/VarAttrErr26.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/e4x/TypeConversion/toXMLStringErr.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/VarAttrErr4.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/ecma3/e7_3_13_Err.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/VarAttrErr8.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/IfAttrErr4.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/parser/Scanner.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/parser/Parser.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Definitions/Function/PrivStatStatNameErr.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/ClassAttrErr4.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/VarAttrErr12.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/VarAttrErr21.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/VarAttrErr30.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/VarAttrErr22.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Directives/Attributes/VarAttrErr13.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Definitions/Function/PubStatStatNameErr.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/sanity/strict/b115412.err</path>"
  ], 
  "revision_id": "1313685"
 }, 
 {
  "author": "", 
  "date": "2012-03-28T18:40:12.574013Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 7540", 
   "Author:   peted@adobe.com", 
   "Date:     2009-06-03T21:45:44.997710Z", 
   "Log Message:", 
   "-----------", 
   "Slight restructuring of the Asc parser/scanner, with the following changes:", 
   "recursive list parses are rewritten as iterators", 
   "A direct operator precedence parser is in place", 
   "Context sensitive flags between the scanner and parser have been removed.", 
   "The parsers about 1000 loc shorter, Slightly slower until I get precedence lookup simplified.", 
   "Some asc tests have been updated, since syntax error behavior is slightly improved in some cases.", 
   "QE Notes: All possible test cases should be run", 
   "Doc Notes: None", 
   "Reviewer: Paul", 
   "tests: checkintests tamarin, asc-tests, performance tests", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/Context.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/NamespacesTable.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Definitions/const/ConstErr.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/parser/NodeFactory.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/LocalizedErrors/1196-NoExpressionAfterThrow.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/e4x/TypeConversion/toXMLStringErr.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/parser/Token.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Definitions/Function/StaticPublicNameErr23.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Definitions/Function/StaticNameErr23.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Definitions/Function/EmptyNameErr23.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/parser/Scanner.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/parser/Parser.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/parser/MemberExpressionNode.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/as3/Definitions/FunctionAccessors/EmptyNameErr23.err</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/util/ContextStatics.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/parser/Tokens.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/asc/test/compiler/sanity/strict/b115412.err</path>"
  ], 
  "revision_id": "1313684"
 }
]