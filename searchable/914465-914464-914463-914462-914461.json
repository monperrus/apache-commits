[
 {
  "author": "bfoster", 
  "date": "2009-07-21T23:54:22.923158Z", 
  "msg": [
   "-updated interface methods and catalog support", 
   "--------------------"
  ], 
  "revision_id": "914465"
 }, 
 {
  "author": "bfoster", 
  "date": "2009-07-21T21:39:09.606152Z", 
  "msg": [
   "- problemo sovled!!!!!  dynamic plugin catalog capability now works . . . FINALLY!!!!!", 
   "------------------------------"
  ], 
  "revision_id": "914464"
 }, 
 {
  "author": "bfoster", 
  "date": "2009-07-21T21:38:35.305652Z", 
  "msg": [
   "- problemo sovled!!!!!  dynamic plugin catalog capability now works . . . FINALLY!!!!!", 
   "------------------------------"
  ], 
  "revision_id": "914463"
 }, 
 {
  "author": "bfoster", 
  "date": "2009-07-19T18:51:00.993992Z", 
  "msg": [
   "- some refactoring", 
   "-----------------------"
  ], 
  "revision_id": "914462"
 }, 
 {
  "author": "bfoster", 
  "date": "2009-07-18T22:02:35.763586Z", 
  "msg": [
   "- added back in the addCatalog feature . . . USE CAREFULLY!!! . . . the Catalog object that you add, must have all of its classes on the servers classpath . . . DON'T use the addPluginUrl methods . . . they work in as much as they will move the jar to the server side and add it to the Serializers classloader, however because of the way ClassLoads parent relationship is, this doesn't not work . . . i added them back in just in case i one day find a workaround!!!!", 
   "- added SpringCatalogRepository . . . this is currently the best way to go . . . just load all your statically configured catalogs from an unmodifiable xml file", 
   "--------------------------------"
  ], 
  "revision_id": "914461"
 }
]