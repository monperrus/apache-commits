[
 {
  "author": "kfogel", 
  "date": "2002-05-03T03:22:25.478483Z", 
  "msg": [
   "Abstract the process of getting a node id's predecessor.", 
   "I'm no longer sure that the other abstractions mentioned or implied in", 
   "revision 1864's log message are worth the effort -- in particular,", 
   "abstracting the ID branching code would be tricky.  But maybe it'll", 
   "seem like a good idea again later?  In any case it's better not to do", 
   "it all at once.", 
   "* subversion/libsvn_fs/id.h, subversion/libsvn_fs/id.c", 
   "(svn_fs__precede_id): New function, tweaks the ID in place.", 
   "(svn_fs__id_predecessor): Just use above.  Return an empty ID", 
   "instead of NULL.  Redocument.", 
   "* subversion/libsvn_fs/tree.c", 
   "(txn_body_revisions_changed): Use svn_fs__precede_id instead of", 
   "inline code.  Undo revision 1864's change to the `while' condition,", 
   "since svn_fs__precede_id now handles that case implicitly.", 
   "* subversion/libsvn_fs/id.c", 
   "(svn_fs_check_related): Use svn_fs__precede_id instead of inline", 
   "code.", 
   "* subversion/libsvn_fs/deltify.c", 
   "(svn_fs__stable_node): Adjust for new return value of", 
   "svn_fs__id_predecessor."
  ], 
  "revision_id": "841940"
 }, 
 {
  "author": "philip", 
  "date": "2002-05-02T23:17:41.278780Z", 
  "msg": [
   "Prevent checkout into an existing working-copy.", 
   "* subversion/libsvn_wc/update_editor.c (svn_wc_get_checkout_editor): Fail", 
   "if destination is already a working copy.", 
   "* subversion/tests/clients/cmdline/basic_tests.py (basic_checkout): Test", 
   "that checkout into a working copy fails."
  ], 
  "revision_id": "841939"
 }, 
 {
  "author": "kfogel", 
  "date": "2002-05-02T23:01:43.967706Z", 
  "msg": [
   "Fix issue #692.  Running \"svn log\" or \"svn log -rHEAD\" on a repository", 
   "with only revision 0 won't error anymore.", 
   "* subversion/clients/cmdline/log-cmd.c", 
   "(log_message_receiver): If revision 0, return early with a simple", 
   "informative message.", 
   "(log_message_receiver_xml): If revision 0, return without printing", 
   "anything.", 
   "* subversion/libsvn_client/log.c", 
   "(svn_client_log): If youngest revision is repository is 0, don't", 
   "bother to get logs, just drive the receiver once and get out.", 
   "* subversion/libsvn_fs/tree.c", 
   "(txn_body_revisions_changed): Change guard on do-while loop so it", 
   "will correctly handle when tmp_id is decremented from `0.0'.  This", 
   "circumstance is less likely to arise now, given the above changes to", 
   "the log code, but still needs to work right just in case.", 
   "Similar problems may exist througout the fs code.  Thus, the next", 
   "step is to abstract out all the id incrementing/decrementing code,", 
   "instead of having it written inline everywhere."
  ], 
  "revision_id": "841938"
 }, 
 {
  "author": "gstein", 
  "date": "2002-05-02T22:46:53.091071Z", 
  "msg": [
   "Make ra_dav more robust in the face of URLs changing on the", 
   "server. Specifically, if a CHECKOUT or a MKACTIVITY fails with a 404,", 
   "then we assume that the cached URL is wrong, and we fetch it from the", 
   "server again. This auto-refetch is also performed when the property is", 
   "simply missing (e.g. somebody deleted the wcprops file(s)).", 
   "Lots of other cleanups and tweaks.", 
   "* libsvn_ra_dav/ra_dav.h (SVN_RA_DAV__LP_ACTIVITY_COLL): new name for", 
   "SVN_RA_DAV__LP_ACTIVITY_COLL", 
   "(svn_ra_dav__get_activity_collection): new name for", 
   "svn_ra_dav__get_activity_url -- we're get the collection where", 
   "activities are stored; we aren't getting an actual activity.", 
   "(svn_ra_dav__request_dispatch): add 'okay_1' and 'okay_2' as", 
   "parameters for the acceptable status codes from the request.", 
   "* libsvn_ra_dav/commit.c: update many 'return NULL' statements to", 
   "return SVN_NO_ERROR instead.", 
   "(resource_t {}): add the 'revision' member to specify what revision", 
   "this resource is referring to.", 
   "(commit_ctx_t): rename 'close_baton' to 'cb_baton'", 
   "(simple_request): add 'okay_1' and 'okay_2' parameters to pass to", 
   "the modified request_dispatch function.", 
   "(get_version_url): drop the 'revision' parameter since that is now", 
   "located within the resource structure. add a 'force' parameter to", 
   "force the function to query the server for the version URL. if a", 
   "prop-set function is available, then try to store the (correct)", 
   "version URL back to the wcprops.", 
   "(get_activity_collection): renamed from get_activity_url(). add a", 
   "'force' parameter to force the function to query the server for", 
   "the correct value. some activity url -> coll renames. remove the", 
   "copy of the activity collection into the session pool -- this was", 
   "needed a long time before, when fetching a property retrieved it", 
   "into an internal pool rather than (now) the provided pool. when", 
   "the activity collection is returned, attempt to save it back into", 
   "the directory's wcprops.", 
   "(create_activity): some activity url -> coll renaming. reorganize to", 
   "try creating the activity a second time if a 404 is returned.", 
   "(add_child): store the revision into the new resource.", 
   "(do_checkout): new low-level function for performing the checkout;", 
   "much of the code has been refactored out of checkout_resource().", 
   "this function just sets up the request and runs it. pass some new", 
   "params to the request_dispatch function.", 
   "(checkout_resource): refactored some code out into do_checkout. if a", 
   "404 occurs, then refetch the version URL and try again.", 
   "-> updated all callers to pass the new 'allow_404' flag. the only", 
   "time this is NOT allowed is when we're checking out the", 
   "baseline to apply properties.", 
   "(do_proppatch): no need to check for 207; request_dispatch will do", 
   "that for us now.", 
   "(commit_open_root): store the revision into the new resource", 
   "structure.  leave a note that we may be storing the wrong one.", 
   "(commit_delete_entry): no need to look for 204 and 404 explicitly;", 
   "request_dispatch will do this for us now.", 
   "(commit_add_dir): remove the special check for 201; request_dispatch", 
   "now handles this for us (and better).", 
   "(commit_stream_close): pass 201 and 204 to request_dispatch.", 
   "(apply_log_message): tweak the initialization of baseline_rsrc.", 
   "* libsvn_ra_dav/fetch.c (custom_get_request): pass 200 and 226 to", 
   "request_dispatch as the only two legal GET response values. remove", 
   "the custom error check since request_dispatch now handles it for", 
   "us.", 
   "(begin_checkout): rename 'activity_url' param to 'activity_coll'.", 
   "remove the old BUSTED_CRAP ifdef'd code. use svn_path_join()", 
   "rather than manual appending of the paths.", 
   "(svn_ra_dav__do_checkout): some activity url->coll renaming.", 
   "* libsvn_ra_dav/options.c (options_ctx_t {}, end_element,", 
   "svn_ra_dav__get_activity_collection): activity_url -> coll", 
   "renaming.", 
   "* libsvn_ra_dav/util.c (svn_ra_dav__request_dispatch): add 'okay_1'", 
   "and 'okay_2' params to hold the legal result status codes. return", 
   "SVN_NO_ERROR when one of these occur, even when a marshalled error", 
   "is present. return SVN_ERR_RA_REQUEST_FAILED instead of", 
   "APR_EGENERAL for any non-okay status code (this is a much nicer", 
   "response than the manual handling of the HTTP status that all the", 
   "callers were doing).", 
   "* include/svn_error_codes.h (SVN_ERR_RA_MKACTIVITY_FAILED,", 
   "SVN_ERR_RA_DELETE_FAILED): unused. obsolete.", 
   "* bindings/ruby/error.c (svn_ruby_init_error): remove the obsoleted", 
   "macros.", 
   "* libsvn_ra_dav/merge.c (bump_resource): remove unused 'path_str'", 
   "variable."
  ], 
  "revision_id": "841937"
 }, 
 {
  "author": "gstein", 
  "date": "2002-05-02T21:42:29.582062Z", 
  "msg": [
   "* propset-cmd.c (svn_cl__propset): tweak the formatting to remove an", 
   "extra space when the propset is not recursive."
  ], 
  "revision_id": "841936"
 }
]