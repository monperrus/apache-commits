[
 {
  "author": "jerenkrantz", 
  "date": "2006-02-14T23:08:19.234229Z", 
  "msg": [
   "Fix a bug where deflate buckets would return EOF too early and corrupt the", 
   "read response.  (Doh!)", 
   "* deflate_buckets.c", 
   "(serf_bucket_deflate_create): Init ->stream_status to 0", 
   "(serf_deflate_read): If we have exhausted our inflate'd stream *and* our", 
   "source stream *and* we're still in STATE_INFLATE, it must mean that we", 
   "haven't reached the end of the zlib inflate() cycle - so we must fall", 
   "through (if we didn't return any data) and call inflate() until we receive", 
   "Z_STREAM_END which will advance us to the next read state."
  ], 
  "revision_id": "1698558"
 }, 
 {
  "author": "gstein", 
  "date": "2006-02-14T20:36:38.356901Z", 
  "msg": [
   "Minor tweaks. Removed some old comments questioning whether we have to set", 
   "*data when *len == 0. Answer: we don't; the spec says you shouldn't", 
   "attempt to use the pointer when the length is zero.", 
   "* buckets/aggregate_buckets.c:", 
   "(serf_bucket_aggregate_prepend_iovec, serf_bucket_aggregate_append_iovec):", 
   "remove a superfluous initialization", 
   "(read_aggregate): just return the APR_EAGAIN constant rather than the", 
   "variable (we know its value).", 
   "(serf_aggregate_read_iovec): initialize status in case vecs_size is", 
   "zero, or ctx->list is empty. exit from the loop on ANY non-zero status", 
   "(e.g. exit on APR_EOF, too)."
  ], 
  "revision_id": "1698557"
 }, 
 {
  "author": "jerenkrantz", 
  "date": "2006-02-14T18:10:41.981319Z", 
  "msg": [
   "Implement read_iovec for aggregate_buckets; Use iovec calls for chunking and", 
   "writing to the socket.", 
   "This dramatically reduces the number of write() operations we must perform", 
   "and switches them to writev() ops.  (Our chunk sizes are now much bigger too.)", 
   "Assist to Saul Bancroft for carefully walking through the iovec loop with me.", 
   "* buckets/aggregate_buckets.c", 
   "(aggregate_context_t): Change done to be a list of buckets as we may", 
   "return multiple buckets in one read_iovec call.", 
   "(cleanup_aggregate): New helper function that will clear our ->done list.", 
   "(serf_aggregate_destroy_and_data): Call cleanup_aggregate.", 
   "(serf_bucket_aggregate_prepend_iovec, serf_bucket_aggregate_appeend_iovec):", 
   "New helper functions.", 
   "(serf_aggregate_read): Off load most functionality to...", 
   "(read_aggregate): here; New helper function that returns a single item from", 
   "the list.", 
   "(serf_aggregate_read_iovec): Function that collects a bunch of bucket reads", 
   "into an iovec.", 
   "* buckets/chunk_buckets.c", 
   "(serf_chunk_read): Simplify by moving the create_chunk functionality to...", 
   "(create_chunk): here; New function that uses read_iovec to build the chunks.", 
   "(serf_chunk_read_iovec): Pass along basic read_iovec functionality.", 
   "* context.c", 
   "(serf_connection_t): Store an iovec instead of a pointer/len", 
   "(update_pollset, no_more_writes, serf_connection_reset): Use vec_len instead", 
   "of unwritten_len", 
   "(socket_writev): New helper function that writes an iovec to the socket and", 
   "updates the iovec array with the number of bytes written.", 
   "(write_to_connection): Use socket_writev call to write and call read_iovec", 
   "to fetch data from our stream.", 
   "* serf_bucket_types.h", 
   "(serf_bucket_aggregate_prepend_iovec, serf_bucket_aggregate_appeend_iovec):", 
   "Declare new helper functions."
  ], 
  "revision_id": "1698556"
 }, 
 {
  "author": "jerenkrantz", 
  "date": "2006-02-14T01:46:42.351722Z", 
  "msg": [
   "Handle some EAGAIN/EOF edge-cases.", 
   "* buckets/limit_buckets.c", 
   "(serf_limit_read, serf_limit_readline): Handle getting EAGAIN at the last", 
   "read in our stream.", 
   "* buckets/aggregate_buckets.c", 
   "(serf_aggregate_read): If we didn't read anything and got EAGAIN, return", 
   "instead of deleting the bucket.", 
   "* buckets/deflate_buckets.c", 
   "(serf_deflate_read): Handle an EAGAIN when we read the final trailer;", 
   "handle an EAGAIN with no data when we read our stream."
  ], 
  "revision_id": "1698555"
 }, 
 {
  "author": "jerenkrantz", 
  "date": "2006-02-14T01:40:19.722051Z", 
  "msg": [
   "Handle ECONNRESET explicitly.", 
   "(Linux's epoll does not generate HUP when we'd get a CONNRESET like kqueue.)", 
   "* context.c", 
   "(read_from_connection, write_to_connection): Handle ECONNRESET returns."
  ], 
  "revision_id": "1698554"
 }
]