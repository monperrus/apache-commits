[
 {
  "author": "gstein", 
  "date": "2004-09-07T07:55:31.289434Z", 
  "msg": [
   "Remove the broken metadata concept.", 
   "* serf.h:", 
   "(serf_metadata_t): removed.", 
   "(serf_bucket_type_t): remove the get_metadata and set_metadata vtable", 
   "functions. no longer needed.", 
   "(serf_bucket_get_metadata): removed macro function", 
   "(serf_bucket_set_metadata): removed macro function", 
   "(serf_bucket_t): remove the metadata field from the bucket", 
   "* serf_bucket_types.h:", 
   "(SERF_REQUEST_HEADERS, SERF_RESPONSE_HEADERS): removed", 
   "* serf_bucket_util.h:", 
   "(serf_default_set_metadata, serf_default_get_metadata): removed", 
   "* buckets/buckets.c:", 
   "(serf_metadata_t): removed", 
   "(serf_bucket_create): do not initialize the defunct metadata field", 
   "(serf_default_get_metadata, serf_default_set_metadata): removed", 
   "(serF_default_destroy): no longer free the metadata", 
   "* buckets/aggregate_buckets.c:", 
   "* buckets/dechunk_buckets.c:", 
   "* buckets/file_buckets.c:", 
   "* buckets/headers_buckets.c:", 
   "* buckets/mmap_buckets.c:", 
   "* buckets/request_buckets.c:", 
   "* buckets/response_buckets.c:", 
   "* buckets/simple_buckets.c:", 
   "* buckets/socket_buckets.c:", 
   "- removed the get/set metadata from the bucket type structures", 
   "* STATUS: update the comments about metadata and content descriptors"
  ], 
  "revision_id": "1698493"
 }, 
 {
  "author": "gstein", 
  "date": "2004-09-07T07:18:57.409469Z", 
  "msg": [
   "Convert the response bucket to use a headers bucket for data storage. Adds", 
   "a new interface to the headers bucket to optimize how to store values.", 
   "* serf_bucket_types.h:", 
   "(serf_bucket_headers_setx): new function for extended control over", 
   "setting values into the bucket.", 
   "* buckets/headers_buckets.c:", 
   "(new_headers): removed, in favor of:", 
   "(serf_bucket_headers_setx): new function to provide fine-grained control", 
   "over placing headers into the bucket. this function replaces the old", 
   "new_header function. it now takes h/v sizes rather than internally", 
   "computing them, and takes int (boolean) values for the copy flags,", 
   "rather than an internal alloc_flags value.", 
   "(serf_bucket_headers_set, serf_bucket_headers_setc,", 
   "serf_bucket_headers_setn): use serf_bucket_headers_setx instead of", 
   "the old new_header function.", 
   "* buckets/response_buckets.c:", 
   "(response_context_t): add field to store a headers bucket.", 
   "(serf_bucket_response_create): alloc and store a headers bucket.", 
   "(serf_response_destroy_and_data): don't bother with the old metadata;", 
   "just destroy the new headers bucket.", 
   "(fetch_headers): use the new headers bucket to store values, rather than", 
   "storing into a metadata-based hash.", 
   "(run_machine): fetch the headers from the header bucket, rather than the", 
   "old metadata style."
  ], 
  "revision_id": "1698492"
 }, 
 {
  "author": "gstein", 
  "date": "2004-09-07T06:39:02.287305Z", 
  "msg": [
   "Switch the file test over to the new request header system.", 
   "* test/serf_file.c:", 
   "(main): get the headers bucket and set the appropriate values. also", 
   "removed some #if'd out code and an unused variable."
  ], 
  "revision_id": "1698491"
 }, 
 {
  "author": "gstein", 
  "date": "2004-09-07T06:34:54.462587Z", 
  "msg": [
   "Rebuild the request bucket to use a headers bucket for storing and", 
   "serializing the request headers.", 
   "* buckets/request_buckets.c:", 
   "(request_context_t): add a headers bucket", 
   "(request_metadata_t): removed. no longer used.", 
   "(serf_bucket_request_create): create and store a headers bucket", 
   "(serf_bucket_request_get_headers): new. return the headers bucket.", 
   "(serialize_data): remove all header generation code, and simply link the", 
   "headers bucket into the (new) aggregate bucket. simplify the iovec", 
   "generation since it is fixed at four vectors.", 
   "* serf_bucket_types.h:", 
   "(serf_bucket_request_get_headers): declaration for new function", 
   "* test/serf_get.c:", 
   "(main): get the header bucket from the request bucket and fill in the", 
   "various headers."
  ], 
  "revision_id": "1698490"
 }, 
 {
  "author": "gstein", 
  "date": "2004-09-07T02:51:29.721235Z", 
  "msg": [
   "The headers bucket was not delivering the terminating CRLF pair.", 
   "Originally, the idea was the user of the bucket would arrange it. However,", 
   "all users need it, so the headers bucket now handles the delivery.", 
   "The aggregate bucket was broken: it would return APR_EOF when the first", 
   "bucket was completed, rather than waiting for all buckets.", 
   "Added a test program to put together a request and print it to stdout", 
   "(this helped in debugging the headers and aggregate buckets).", 
   "* buckets/headers_buckets.c:", 
   "(headers_context_t.state): add READ_START and READ_TERM states", 
   "(serf_bucket_headers_create): don't bother initializing cur_read, as", 
   "that will get initialized during the transition from START. initialize", 
   "the state to START.", 
   "(select_value): handle the new START and TERM states. handle the case", 
   "where no headers are present, and we need to move to TERM.", 
   "(consume_chunk): add handling for the TERM->DONE transition. handle the", 
   "transition to TERM when all headers have been sent.", 
   "(serf_headers_peek): simplify the tests for returning APR_EOF", 
   "(serf_headers_read): call select_value before testing for DONE to let it", 
   "set the *len value for us.", 
   "(serf_headers_readline): call select_value before tetsing for DONE. add", 
   "test for TERM for returning NEWLINE_CRLF.", 
   "* buckets/aggregate_buckets.c:", 
   "(serf_aggregate_read): bail on a read error, and fix the return code", 
   "when a bucket returns EOF.", 
   "* test/serf_request.c: short test program to assemble a request and then", 
   "print it to stdout.", 
   "* Makefile: add rule for the serf_request program."
  ], 
  "revision_id": "1698489"
 }
]