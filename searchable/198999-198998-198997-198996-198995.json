[
 {
  "author": "vhardy", 
  "date": "2000-11-08T17:07:40.000000Z", 
  "msg": [
   "Changed FAQ with feedback.", 
   "PR:", 
   "Obtained from:", 
   "Submitted by:", 
   "Reviewed by:"
  ], 
  "revision_id": "198999"
 }, 
 {
  "author": "hillion", 
  "date": "2000-11-08T16:36:18.000000Z", 
  "msg": [
   "added URI resolver.", 
   "PR:", 
   "Obtained from:", 
   "Submitted by:", 
   "Reviewed by:"
  ], 
  "revision_id": "198998"
 }, 
 {
  "author": "hillion", 
  "date": "2000-11-08T16:32:15.000000Z", 
  "msg": [
   "External use.", 
   "Pn", 
   "Obtained from:", 
   "Submitted by:", 
   "Reviewed by:"
  ], 
  "revision_id": "198997"
 }, 
 {
  "author": "deweese", 
  "date": "2000-11-08T13:23:29.000000Z", 
  "msg": [
   "1) Fixed a bug where the morphology op let alpha wrap to a negative", 
   "number hence messing up the calculation (alpha was the highest byte of", 
   "a signed integer, no unsigned types in java :().", 
   "2) MorphologyOp and GaussianBlurOp now share virtually the same code", 
   "for setup and break down to the filter(Raster, WritableRater) call.", 
   "This is probably a canidate for moving into a baseclass.", 
   "3) AbstractGraphicsNode now wraps the RenderedImage into a BufferedImage", 
   "before drawing it into the given Graphics2D.  I suspect that drawing", 
   "a renderedImage works fine for a screen graphics2D but messes up on", 
   "an offscreen graphics2D.  The BufferedImage case seems to always work,", 
   "and shouldn't be any slower.", 
   "4) MorphologyOp now grows it's AOI in user space.", 
   "5) ConcreteGraphicsNodeRable now uses TYPE_INT_ARGB_PRE for it's", 
   "BufferedImages.", 
   "6) ImageDisplay now crops to the intersection of bounds and image bounds", 
   "when trying to print a subsection of an image to the console."
  ], 
  "revision_id": "198996"
 }, 
 {
  "author": "billh", 
  "date": "2000-11-08T13:20:08.000000Z", 
  "msg": [
   "Design reviewed by: VH, TK", 
   "----------------------------------------------------------------------", 
   "Changes to GVTAttributedCharacterIterator and StrokingTextPainter", 
   "New TextAttributes for UNDERLINE, OVERLINE and STRIKETHROUGH", 
   "for enhanced rendering support. Note that previous TextAttributes", 
   "for these text-decorations should no longer be used.", 
   "Changes to SVGTextElementBridge to support these new attributes, and", 
   "a one-line bug fix for a whitespace regression.", 
   "Changes to StrokingTextPainter also for new text rendering implementation;", 
   "instead of calling TextLayout.draw() we are manually", 
   "filling.  This requires that multiple TextLayouts be created when", 
   "text fill paint changes, underline changes, etc.", 
   "This fixes a layout fractional metrics bug and also", 
   "is a cosmetic improvement for stroked text (strokes correspond", 
   "better with fills).", 
   "Modified Files:", 
   "sources/org/apache/batik/gvt/text/GVTAttributedCharacterIterator.java", 
   "sources/org/apache/batik/refimpl/bridge/SVGTextElementBridge.java", 
   "sources/org/apache/batik/refimpl/gvt/renderer/StrokingTextPainter.java", 
   "----------------------------------------------------------------------"
  ], 
  "revision_id": "198995"
 }
]