[
 {
  "author": "chenpei", 
  "date": "2012-09-20T16:25:56.647572Z", 
  "msg": [
   "https://issues.apache.org/jira/browse/CTAKES-61", 
   "Fixing the license header for these few files.  the plugin didn't reformat the existing header properly."
  ], 
  "revision_id": "1388103"
 }, 
 {
  "author": "stefan2", 
  "date": "2012-09-20T16:24:59.179358Z", 
  "msg": [
   "On the 10Gb branch, extend the FS vtable.  Add a function that", 
   "allows for processing file content in-situ.", 
   "This allows for a zero-copy alternative to our copying stream-", 
   "based data processing.  svn_fs_try_process_file_content has a", 
   "best effort semantics and will usually fail if data could not", 
   "be found our caches etc.", 
   "Implement it for FSFS only.  All other FS modules will return", 
   "this API call with *success set to FALSE.", 
   "* subversion/include/svn_fs.h", 
   "(svn_fs_process_content_func_t): declare new callback type", 
   "(svn_fs_try_process_file_content): declare new FS API function", 
   "* subversion/libsvn_fs/fs-loader.h", 
   "(root_vtable_t): add function pointer for new API", 
   "* subversion/libsvn_fs/fs-loader.c", 
   "(svn_fs_try_process_file_content): implement new FS API function", 
   "* subversion/libsvn_fs_base/tree.c", 
   "(root_vtable): mark new API as not implemented for BDB", 
   "* subversion/libsvn_fs_fs/dag.h", 
   "(svn_fs_fs__dag_try_process_file_content): declare pass-through", 
   "* subversion/libsvn_fs_fs/dag.c", 
   "(svn_fs_fs__dag_try_process_file_content): implement pass-through", 
   "* subversion/libsvn_fs_fs/fs_fs.h", 
   "(svn_fs_fs__try_process_file_content): declare", 
   "* subversion/libsvn_fs_fs/fs_fs.c", 
   "(cache_access_wrapper_baton_t,", 
   "cache_access_wrapper): adapter to cache API", 
   "(svn_fs_fs__try_process_file_content): implementation for new API", 
   "* subversion/libsvn_fs_fs/tree.c", 
   "(fs_try_process_file_content): implement as pass-through", 
   "(root_vtable): add it to the vtable"
  ], 
  "revision_id": "1388102"
 }, 
 {
  "author": "elecharny", 
  "date": "2012-09-20T16:24:18.467240Z", 
  "msg": [
   "Switched the log level to OFF"
  ], 
  "revision_id": "1388101"
 }, 
 {
  "author": "elecharny", 
  "date": "2012-09-20T16:21:52.795476Z", 
  "msg": [
   "Added a counter"
  ], 
  "revision_id": "1388100"
 }, 
 {
  "author": "erans", 
  "date": "2012-09-20T16:21:46.775879Z", 
  "msg": [
   "MATH-863", 
   "New \"Quaternion\" class. Thanks to Julien Anxionnat.", 
   "After applying the original patch, the following changes were made:", 
   "* Renamed the \"static\" quaternion instances (\"PLUS_\" prefix removed).", 
   "* Removed some (syntactic sugar) methods; removed or modified corresponding", 
   "unit tests.", 
   "* Made the redundant accessors call the \"canonic\" ones.", 
   "* Removed the default tolerance and added an explicit tolerance parameter", 
   "in methods that depend on equality testing.", 
   "* When a \"ZeroException\" is thrown, the actual value of the norm is provided", 
   "in the detailed message (as the implementation actually does not use a", 
   "strict comparison with 0).", 
   "* Added \"equals(Object)\" and \"hashCode\" methods.", 
   "* Javadoc and formatting. Added license header.", 
   "* Removed \"toString\" documentation (as this representation should not be", 
   "binding). Changed the representation to not use a comma.", 
   "* Renamed \"scalarMultiply\" to \"multiply\".", 
   "* More stringent tolerance used in the unit tests assertions, whenever", 
   "possible.", 
   "* Added unit tests."
  ], 
  "revision_id": "1388099"
 }
]