[
 {
  "author": "craigmcc", 
  "date": "2000-07-17T00:46:39.000000Z", 
  "msg": [
   "Allow the scope of a form bean to be either \"session\" (originally the only", 
   "supported option) or \"request\".", 
   "To enable using \"request\" scope for your form beans, you need to do the", 
   "following:", 
   "* Add the attribute 'formScope=\"request\"' in your <action> elements to", 
   "set individual forms to be request scope, or configure the controller", 
   "servlet to use class org.apache.struts.action.RequestActionMapping as", 
   "the default implementation class for mappings.", 
   "* In your JSP pages, add the attribute 'scope=\"request\"' to the", 
   "<struts:form> tag defining the form.", 
   "Note that, because nothing is maintained in the user's session in between", 
   "requests when you use request scoped form beans, you will need to ensure", 
   "that *all* properties of your form bean are represented by fields in the", 
   "form, even if they are hidden.", 
   "Submitted by:  Based on suggestions by David Chisholm", 
   "<David.Chisholm@j2.com>"
  ], 
  "revision_id": "47729"
 }, 
 {
  "author": "craigmcc", 
  "date": "2000-07-17T00:20:09.000000Z", 
  "msg": [
   "Enhance each of the field-related tags (checkbox, hidden, multibox,", 
   "password, property, radio, select, text, and textarea) to take an optional", 
   "\"name\" attribute that names the bean from which the current value of this", 
   "field should be retrieved.  This allows you to have forms that take values", 
   "from multiple beans -- although the automatic form bean support in the", 
   "controller servlet still supports only one form bean.", 
   "In all cases, the default bean is the one associated with our current", 
   "form, so existing forms will continue to operate as before."
  ], 
  "revision_id": "47728"
 }, 
 {
  "author": "craigmcc", 
  "date": "2000-07-16T23:03:19.000000Z", 
  "msg": [
   "Deal with changes in the parameter types for BeanUtils.convert()."
  ], 
  "revision_id": "47727"
 }, 
 {
  "author": "craigmcc", 
  "date": "2000-07-16T22:49:22.000000Z", 
  "msg": [
   "Add two new custom tags to the Struts library:", 
   "<struts:options1> is a version of <struts:options> that is compatible with", 
   "JDK 1.1, and can enumerate over an array, a Dictionary (including a", 
   "Hashtable), an Enumeration, or a Vector.", 
   "<struts:multibox> is a tag that creates checkboxes, based on Ralph", 
   "Schaer's proposed modifications to the existing <struts:checkbox> tag.  I", 
   "added this functionality as a new tag instead, to allow the older tag to", 
   "remain consistent with the other input field tags in how it handled the", 
   "optional value attribute.", 
   "The basic idea of <struts:multibox> is that you have an array-valued", 
   "property (the underlying data type can be String or any Java primitive),", 
   "and the values present in the array define which checkboxes, out of a set", 
   "of checkboxes with the same property name, should be marked.  For example,", 
   "assume you have a property named \"os\", and a property getter named getOs()", 
   "that returns \"int[]\".  You might use it like this in your JSP page:", 
   "<struts:multibox property=\"os\" value=\"1\">Win98</struts:multibox>", 
   "<struts:multibox property=\"os\" value=\"2\">Win2000</struts:multibox>", 
   "<struts:multibox property=\"os\" value=\"3\">Linux</struts:multibox>", 
   "Note that <struts:multibox> will also work with an existing boolean bean", 
   "property, and provides one approach to getting around the \"sticky", 
   "checkbox\" problem.  For example, if your bean has a boolean property named", 
   "\"enabled\", the following command generates a checkbox that is checked if", 
   "the property is true, and unchecked if the property is false:", 
   "<struts:multibox property=\"enabled\" value=\"true\">Enabled</struts:multibox>"
  ], 
  "revision_id": "47726"
 }, 
 {
  "author": "craigmcc", 
  "date": "2000-07-16T22:29:10.000000Z", 
  "msg": [
   "Modify all tags that use reflection for calling property getters on beans", 
   "to use the shared logic (in BeanUtils) that consistently uses the", 
   "JavaBeans introspection for identifying property getter method names, as", 
   "well as takes advantage of the reflection caching that is being done.", 
   "Refine the message keys for all custom tags to share messages that should", 
   "be shared under generic names."
  ], 
  "revision_id": "47725"
 }
]