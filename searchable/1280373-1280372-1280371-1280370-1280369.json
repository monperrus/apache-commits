[
 {
  "author": "", 
  "date": "2012-01-31T18:28:28.733960Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 10870", 
   "Author:   cframpto@adobe.com", 
   "Date:     2009-10-05T18:23:10.599724Z", 
   "Log Message:", 
   "-----------", 
   "In the past when the width (or maxWidth) wasn\u2019t specified we told TLF that the width was our default maxWidth=10000.  This had implications especially when the text was rtl or textAlign != left because it aligned over a width of 10000. With this change we let TLF measure.  It will figure out the widest line and use that for the width.  Text will be aligned on that width.  So if there is only one line, and no explicit width, left, center and right alignment all look the same.", 
   "Truncation results will be slightly different now if there isn\u2019t an explicit width.  We will let TLF measure the width and it will use that width for the truncation.  Depending on whether the last line is the widest line or not, it may have to remove some of the text to make room for the truncation indicator.", 
   "QE notes: there are a handful of RichText and Label failures as a result of this change - Ella approved the submit.", 
   "Doc notes:", 
   "Bugs: SDK-22909", 
   "Reviewer: Gordon", 
   "Tests run: checkintests, TextArea, TextInput, NumericStepper, RichText, Label", 
   "Is noteworthy for integration: yes", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/supportClasses/TextBase.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/RichText.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/supportClasses/RichEditableTextContainerManager.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/Label.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/RichEditableText.as</path>"
  ], 
  "revision_id": "1280373"
 }, 
 {
  "author": "", 
  "date": "2012-01-31T18:28:26.361261Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 10675", 
   "Author:   cframpto@adobe.com", 
   "Date:     2009-09-29T14:01:45.012930Z", 
   "Log Message:", 
   "-----------", 
   "The RTE was caused by a loop involving the damage handler which kept damaging the flow which required a recomposition, which damaged the flow, etc.", 
   "This fix was to remove the text flow's damage handler before resetting the text flow so we don't have old damage handlers firing.", 
   "QE notes:", 
   "Doc notes:", 
   "Bugs: SDK-23415", 
   "Reviewer: Gordon", 
   "Tests run: checkintests, RichText", 
   "Is noteworthy for integration: no", 
   "Modified Paths:", 
   "--------------", 
   "/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/RichText.as"
  ], 
  "revision_id": "1280372"
 }, 
 {
  "author": "", 
  "date": "2012-01-31T18:28:23.566130Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 10357", 
   "Author:   jimurphy@adobe.com", 
   "Date:     2009-09-17T21:13:02.502084Z", 
   "Log Message:", 
   "-----------", 
   "Merged beta2 revisions 10309,10320-10321,10333-10335,10342,10347-10348 -> trunk", 
   "checkintests: pass", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/core/SpriteVisualElement.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/supportClasses/FadeInstance.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/compiler/src/java/flex2/compiler/as3/binding/Info.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/compiler/src/java/flex2/compiler/as3/genext/GenerativeClassInfo.java</path>", 
   "<path kind=\"dir\" action=\"M\">/flex/sdk/trunk</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/RichText.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/wireframe/src/spark/skins/wireframe/DropDownListSkin.mxml</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/framework/src/mx/controls/Label.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/TLFText.css</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/mx/core/UITLFTextField.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/modules/compiler/src/java/flex2/compiler/as3/binding/TypeAnalyzer.java</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/wireframe/src/spark/skins/wireframe/ApplicationSkin.mxml</path>"
  ], 
  "revision_id": "1280371"
 }, 
 {
  "author": "", 
  "date": "2012-01-31T18:28:21.562853Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 10214", 
   "Author:   cframpto@adobe.com", 
   "Date:     2009-09-13T14:33:58.570082Z", 
   "Log Message:", 
   "-----------", 
   "This fixes the problem that if two text components share the same textFlow there is an infinite loop involving updateDisplayList -> damageHandler -> invalidateDisplaylist -> back to updateDisplayList.  The bug file was for TextArea which is RET but the same bug was in RichText as well.", 
   "This example with a renderer exposed it because the typicalItem that is composed to figure out sizes and the actual first item in the list share the same textFlow.  It actually has nothing to do with useVirtualDisplay other than it was sharing a textFlow.", 
   "It turns out that the TextFlowFactory dispatches damage events every time the textFlow is composed.  Unlike when the flowComposer is used, it always considers the flow damaged.  It was exacerbated by each of the two components having a damage handler for the same textFlow.", 
   "The solution is to use the textFlow generation number.  In the damageHandler if the generation is the last known generation number, assume no changes, and return immediately from the damage handler.", 
   "QE notes: There are 1 TextArea, 6 TextInput and 2 NumericStepper failuers, with or without my changes.  The common link seems to be DispatchKeyEvent.  Most were testing maxChar, displayAsPassword and restrict.  I tested these and they seem to be working correctly.", 
   "Doc notes:", 
   "Bugs: SDK-23002", 
   "Reviewer: Gordon", 
   "Tests run: checkintests, TextArea, TextInput and NumericStepper", 
   "Is noteworthy for integration: no", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/RichText.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/supportClasses/RichEditableTextContainerManager.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/RichEditableText.as</path>"
  ], 
  "revision_id": "1280370"
 }, 
 {
  "author": "", 
  "date": "2012-01-31T18:28:19.603600Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 10168", 
   "Author:   gosmith@adobe.com", 
   "Date:     2009-09-11T21:23:32.233555Z", 
   "Log Message:", 
   "-----------", 
   "The 'content' property for rich text in Spark components is now get/set rather than set-only, so that it plays well with states. The getter will always return a TextFlow because this is the canonical representation of rich text content in TLF, and if you have edited or programatically mutated the content the current TextFlow is what the states mechanism should save off.", 
   "QE notes: Please test state-dependent 'content' in the Spark RichText, RichEditableText, and TextArea.", 
   "Doc notes: I've added more documentation regarding the 'content' property.", 
   "Bugs: SDK-23120", 
   "Reviewer: Carol", 
   "Tests run: ant checkintests", 
   "Is noteworthy for integration: Yes", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/RichText.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/TextArea.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/components/RichEditableText.as</path>"
  ], 
  "revision_id": "1280369"
 }
]