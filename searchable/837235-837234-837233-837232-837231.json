[
 {
  "author": "joe", 
  "date": "2000-09-14T10:56:59.000000Z", 
  "msg": [
   "* get_editor.c (free_dir_baton): Add return statement.", 
   "(add_file): Fix debugging printf.", 
   "PR:", 
   "Obtained from:", 
   "Submitted by:", 
   "Reviewed by:"
  ], 
  "revision_id": "837235"
 }, 
 {
  "author": "joe", 
  "date": "2000-09-13T19:44:51.000000Z", 
  "msg": [
   "* questions.c: Fix compile warning by picking up apr_psprintf", 
   "prototype."
  ], 
  "revision_id": "837234"
 }, 
 {
  "author": "kfogel", 
  "date": "2000-09-13T03:46:27.000000Z", 
  "msg": [
   "More changes to handle postfix text deltas and prop deltas, and", 
   "give more control over syncing of tmp files in the adm area:", 
   "* adm_ops.c, adm_files.c:", 
   "(svn_wc__ensure_wc): replaces `svn_wc__ensure_prepare_wc'.", 
   "Don't ask about prior existence, and don't leave the adm area locked.", 
   "(svn_wc__ensure_adm): checking adm area's existence is a purely", 
   "internal matter now, don't reveal anything to caller.", 
   "(v_extend_with_adm_name): new func, extends path by using a va_list.", 
   "(extend_with_adm_name): replaces `extend_with_adm_name'.", 
   "Now variadic, by v_extend_with_admin_name().", 
   "All callers changed.", 
   "(chop_admin_name): replaces `chop_admin_thing', better name.", 
   "(svn_wc__make_adm_thing): take `tmp' arg.  All callers changed.", 
   "(init_adm): make directories before files, so the tmp dir is present", 
   "by the time we need it.", 
   "(svn_wc__open_adm_file): open temporary files in tmp/.", 
   "(svn_wc__sync_adm_file): new func, all syncing of tmp file with real", 
   "file happens here.", 
   "(svn_wc__close_adm_file): `sync' arg replaces old `write' arg.", 
   "Document that it is optional, and call above to actually do the sync.", 
   "(svn_wc__open_text_base, svn_wc__close_text_base,", 
   "svn_wc__sync_text_base): new funcs.", 
   "(SVN_WC__TMP_EXTENSION): removed, no longer used.", 
   "* get_editor.c (edit_baton): replaces struct `e_baton'.", 
   "(dir_baton, file_baton): new structs.", 
   "(make_file_baton): new func, creates a file baton in the parent dir's", 
   "subpool.", 
   "(make_dir_baton, free_dir_baton): create and destroy dir batons, where", 
   "\"destroy\" implies various cleanups on the directory.", 
   "(decrement_ref_count): decrement ref count and conditionally free a", 
   "dir baton.", 
   "(maybe_prepend_dest): removed, no longer needed.", 
   "All callers changed.", 
   "* questions.c (svn_wc__check_wc): replaces `svn_wc__working_copy_p',", 
   "just returns error to flag that arg is not a working copy, because a", 
   "\"no\" answer is usually best fatal anyway.", 
   "* README: document SVN/tmp/ better.", 
   "Various cleanups:", 
   "(svn_wc__open_adm_file): set *handle to null, to guarantee APR's", 
   "satisfaction.", 
   "(apr_copy_file): use BUFSIZ, not hardcoded 1024.", 
   "(svn_wc__make_adm_thing): doc fix.", 
   "(init_adm_file): doc fix.", 
   "(svn_wc__file_modified_p): pass pool arg to apr_psprintf()."
  ], 
  "revision_id": "837233"
 }, 
 {
  "author": "sussman", 
  "date": "2000-09-12T21:53:11.000000Z", 
  "msg": [
   "* questions.c :  fix typos (compile-o's?) :)"
  ], 
  "revision_id": "837232"
 }, 
 {
  "author": "sussman", 
  "date": "2000-09-12T21:48:59.000000Z", 
  "msg": [
   "* questions.c", 
   "(svn_wc__file_modified_p)  new routine to check if a file has", 
   "changed.  also added many static helper funcs."
  ], 
  "revision_id": "837231"
 }
]