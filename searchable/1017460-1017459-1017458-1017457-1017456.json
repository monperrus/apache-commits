[
 {
  "author": "dkhaywood", 
  "date": "2008-01-10T18:28:23.101109Z", 
  "msg": [
   "Pulled the transaction management behaviour out of ObjectStorePersistor, and into a", 
   "new ObjectStoreTransactionManager.  The API for the ObjectStorePersistor is unchanged, it just", 
   "delegates.  This design means that we can optionally inject the TxnMgr, eg allowing it also to be", 
   "passed to services that need to be enlisted into a 2PC, for example.  It also follows the", 
   "decomposition of APIs in Spring and Hibernate, transaction management being a different thing", 
   "from persistence.", 
   "This refactoring also required moving OidGenerator, ExecutionContext, PersistenceCommand,", 
   "RequiresSetup and DebugInfo into noa (from nof.persist)."
  ], 
  "revision_id": "1017460"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-01-10T18:28:11.978292Z", 
  "msg": [
   "Pulled the transaction management behaviour out of ObjectStorePersistor, and into a", 
   "new ObjectStoreTransactionManager.  The API for the ObjectStorePersistor is unchanged, it just", 
   "delegates.  This design means that we can optionally inject the TxnMgr, eg allowing it also to be", 
   "passed to services that need to be enlisted into a 2PC, for example.  It also follows the", 
   "decomposition of APIs in Spring and Hibernate, transaction management being a different thing", 
   "from persistence.", 
   "This refactoring also required moving OidGenerator, ExecutionContext, PersistenceCommand,", 
   "RequiresSetup and DebugInfo into noa (from nof.persist)."
  ], 
  "revision_id": "1017459"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-01-10T18:27:50.716976Z", 
  "msg": [
   "Pulled the transaction management behaviour out of ObjectStorePersistor, and into a", 
   "new ObjectStoreTransactionManager.  The API for the ObjectStorePersistor is unchanged, it just", 
   "delegates.  This design means that we can optionally inject the TxnMgr, eg allowing it also to be", 
   "passed to services that need to be enlisted into a 2PC, for example.  It also follows the", 
   "decomposition of APIs in Spring and Hibernate, transaction management being a different thing", 
   "from persistence.", 
   "This refactoring also required moving OidGenerator, ExecutionContext, PersistenceCommand,", 
   "RequiresSetup and DebugInfo into noa (from nof.persist)."
  ], 
  "revision_id": "1017458"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-01-10T18:27:45.612749Z", 
  "msg": [
   "Pulled the transaction management behaviour out of ObjectStorePersistor, and into a", 
   "new ObjectStoreTransactionManager.  The API for the ObjectStorePersistor is unchanged, it just", 
   "delegates.  This design means that we can optionally inject the TxnMgr, eg allowing it also to be", 
   "passed to services that need to be enlisted into a 2PC, for example.  It also follows the", 
   "decomposition of APIs in Spring and Hibernate, transaction management being a different thing", 
   "from persistence.", 
   "This refactoring also required moving OidGenerator, ExecutionContext, PersistenceCommand,", 
   "RequiresSetup and DebugInfo into noa (from nof.persist)."
  ], 
  "revision_id": "1017457"
 }, 
 {
  "author": "dkhaywood", 
  "date": "2008-01-10T18:27:33.470356Z", 
  "msg": [
   "Pulled the transaction management behaviour out of ObjectStorePersistor, and into a", 
   "new ObjectStoreTransactionManager.  The API for the ObjectStorePersistor is unchanged, it just", 
   "delegates.  This design means that we can optionally inject the TxnMgr, eg allowing it also to be", 
   "passed to services that need to be enlisted into a 2PC, for example.  It also follows the", 
   "decomposition of APIs in Spring and Hibernate, transaction management being a different thing", 
   "from persistence.", 
   "This refactoring also required moving OidGenerator, ExecutionContext, PersistenceCommand,", 
   "RequiresSetup and DebugInfo into noa (from nof.persist)."
  ], 
  "revision_id": "1017456"
 }
]