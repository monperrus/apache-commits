[
 {
  "author": "mikem", 
  "date": "2007-12-11T21:58:25.293275Z", 
  "msg": [
   "DERBY-3244", 
   "In the case of a wait for a latch while traveling left at leaf level, and", 
   "a subsequent wait for either a lock or another latch while looking for row", 
   "to lock then one path through the code would get a null pointer.  The code", 
   "was trying to release a latch that had already been released and was tracked", 
   "by \"current_leaf == null\".", 
   "I could not get this to fail in my environment, but did force it by code", 
   "inspection and changing the path through the code by hand to mimic latch", 
   "waits.  My assumption is that intermittently on some platforms this single", 
   "threaded test is competing for these latches with background deleted row", 
   "cleaner thread, probably on a fast multiple processor machine.", 
   "-", 
   "M    java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java", 
   "M    java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java"
  ], 
  "revision_id": "603375"
 }, 
 {
  "author": "bommel", 
  "date": "2007-12-11T21:55:40.980235Z", 
  "msg": [
   "added license"
  ], 
  "revision_id": "603374"
 }, 
 {
  "author": "elecharny", 
  "date": "2007-12-11T21:52:06.314486Z", 
  "msg": [
   "Added a new tests to check special DN like \"cn= \\\"test, test\\\" \""
  ], 
  "revision_id": "603373"
 }, 
 {
  "author": "carnold", 
  "date": "2007-12-11T21:51:37.493050Z", 
  "msg": [
   "LOGCXX-215: Eliminate reference to sqlext.h in odbcappender.h"
  ], 
  "revision_id": "603372"
 }, 
 {
  "author": "akarasulu", 
  "date": "2007-12-11T21:48:59.051982Z", 
  "msg": [
   "messed up the dang externals"
  ], 
  "revision_id": "603371"
 }
]