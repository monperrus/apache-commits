[
 {
  "author": "hwright", 
  "date": "2009-07-20T22:54:25.323860Z", 
  "msg": [
   "Add a helper function for converting the tree conflict work over to wc-ng.", 
   "* subversion/libsvn_wc/util.c", 
   "(svn_wc__conflict_desc2_from_conflict_desc): New.", 
   "* subversion/libsvn_wc/wc.h", 
   "(svn_wc__conflict_desc2_from_conflict_desc): New."
  ], 
  "revision_id": "878525"
 }, 
 {
  "author": "hwright", 
  "date": "2009-07-20T18:03:36.557820Z", 
  "msg": [
   "Rev another libsvn_wc private-public API.", 
   "(As an aside, having these APIs feels a bit like cheating.  I mean, if we use", 
   "them, and they are useful, shouldn't we expose them to the rest of the world?", 
   "Not only do we let others use these APIs, but we also get rid of this", 
   "\"svn_wc__blah() is not really internal, so we need an *additional* wrapper", 
   "around it to pull out the wc_db param\" dance.  Oh well, maybe in some future", 
   "life...)", 
   "* subversion/include/private/svn_wc_private.h", 
   "(svn_wc__versioned_file_modcheck): Rev, adding a wc_ctx, and updating the", 
   "docstring.", 
   "* subversion/libsvn_wc/wc.h", 
   "(svn_wc__internal_versioned_file_modcheck): New.", 
   "* subversion/libsvn_wc/update_editor.c", 
   "(merge_file): Update caller.", 
   "* subversion/libsvn_wc/questions.c", 
   "(compare_and_verify): Get rid of the access baton parameter, and use a", 
   "wc_db instead.  Accept only absolute paths.", 
   "(svn_wc__internal_versioned_file_modcheck): New.", 
   "(svn_wc__versioned_file_modcheck): Update args, call the wrapper.", 
   "(svn_wc__text_modified_internal_p): Get a db and absolute paths to call", 
   "compare_and_verify().", 
   "* subversion/libsvn_wc/log.c", 
   "(log_do_committed): Update caller.", 
   "* subversion/libsvn_client/merge.c", 
   "(files_same_p): Remove the adm_access param, and require absolute paths.", 
   "(merge_file_deleted): Get some absolute paths and update a caller."
  ], 
  "revision_id": "878524"
 }, 
 {
  "author": "hwright", 
  "date": "2009-07-20T17:59:58.495419Z", 
  "msg": [
   "Update callers to the deprecated svn_wc_conflicted2_p(), adding an internal", 
   "wrapper for callers which have direct access to a wc_db.", 
   "* subversion/libsvn_wc/wc.h", 
   "(svn_wc__internal_conflicted_p): New.", 
   "* subversion/libsvn_wc/status.c", 
   "(assemble_status): Update caller.", 
   "* subversion/libsvn_client/externals.c", 
   "(switch_file_external),", 
   "* subversion/libsvn_wc/update_editor.c", 
   "(open_directory, open_file): Grab some absolute paths and update callers.", 
   "* subversion/libsvn_wc/questions.c", 
   "(svn_wc__internal_conflicted_p): New.", 
   "(svn_wc_conflicted_p3): Rewrite as a wrapper.", 
   "* subversion/libsvn_client/commit_util.c", 
   "(bail_on_tree_conflicted_ancestor): Update caller, and remove an obsolete", 
   "comment."
  ], 
  "revision_id": "878523"
 }, 
 {
  "author": "hwright", 
  "date": "2009-07-20T17:49:37.765342Z", 
  "msg": [
   "Add a tree_conflict_data out parameter to svn_wc__db_read_info().", 
   "Ideally, this parameter would be a svn_wc_conflict_description2_t which", 
   "describes the tree conflict on local_abspath.  However, the way that tree", 
   "conflicts are stored and what current consumers of this API expect don't match", 
   "that ideal.  I've left a note to update this when tree conflict information", 
   "is moved.", 
   "* subversion/tests/libsvn_wc/db-test.c", 
   "(test_working_info, test_global_relocate),", 
   "* subversion/libsvn_wc/relocate.c", 
   "(svn_wc_relocate4),", 
   "* subversion/libsvn_wc/crop.c", 
   "(crop_children),", 
   "* subversion/libsvn_wc/props.c", 
   "(get_existing_prop_reject_file, svn_wc__load_props,", 
   "svn_wc__internal_propset),", 
   "* subversion/libsvn_wc/adm_ops.c", 
   "(tweak_entries),", 
   "* subversion/libsvn_wc/update_editor.c", 
   "(svn_wc__strictly_is_wc_root),", 
   "* subversion/libsvn_wc/questions.c", 
   "(svn_wc_conflicted_p3),", 
   "* subversion/libsvn_wc/adm_crawler.c", 
   "(restore_file, svn_wc_transmit_text_deltas2),", 
   "* subversion/libsvn_wc/translate.c", 
   "(svn_wc__get_keywords, svn_wc__maybe_set_read_only):", 
   "Update callers.", 
   "* subversion/libsvn_wc/entries.c", 
   "(statement_keys, statements): Remove an unneeded statement.", 
   "(fetch_actual_nodes): Remove.", 
   "(read_entries_new): Don't fetch the actual nodes, since we can just get the", 
   "information we need from read_info() now.", 
   "(svn_wc_walk_entries3): Update caller.", 
   "* subversion/libsvn_wc/wc_db.c", 
   "(statements): Get the tree_conflict_data from ACTUAL_NODE.", 
   "(svn_wc__db_read_info): Add tree_conflict_data param, and fetch it.", 
   "(svn_wc__db_global_relocate, svn_wc__db_check_node): Update callers.", 
   "* subversion/libsvn_wc/wc_db.h", 
   "(svn_wc__db_read_info): Add tree_conflict_data output parameter, along with", 
   "a comment about what the future of this parameter should be."
  ], 
  "revision_id": "878522"
 }, 
 {
  "author": "hwright", 
  "date": "2009-07-19T01:35:09.286129Z", 
  "msg": [
   "Followup to r38445 by rewriting a library-public API as a wrapper, and", 
   "updating its callers.", 
   "* subversion/include/private/svn_wc_private.h", 
   "(svn_wc__path_switched): Rev.", 
   "* subversion/libsvn_wc/util.c", 
   "(svn_wc__path_switched): Reimplement as a thin wrapper around", 
   "svn_wc__internal_path_switched().", 
   "* subversion/libsvn_client/merge.c", 
   "(get_mergeinfo_walk_cb): Update caller.", 
   "* subversion/libsvn_client/mergeinfo.c", 
   "(svn_client__get_wc_mergeinfo, svn_client__elide_children): Same."
  ], 
  "revision_id": "878521"
 }
]