[
 {
  "author": "mdiggory", 
  "date": "2003-06-16T21:38:15.000000Z", 
  "msg": [
   "I'm not sure with this algorithm, but I'm going to add this test back into the Variance that protects it from returning a value less than 0."
  ], 
  "revision_id": "140914"
 }, 
 {
  "author": "mdiggory", 
  "date": "2003-06-16T21:29:49.000000Z", 
  "msg": [
   "More correction of Javadoc errors."
  ], 
  "revision_id": "140913"
 }, 
 {
  "author": "mdiggory", 
  "date": "2003-06-16T21:24:30.000000Z", 
  "msg": [
   "More correction of Javadoc errors that end up propigating into UnivarImpl and other implementations."
  ], 
  "revision_id": "140912"
 }, 
 {
  "author": "mdiggory", 
  "date": "2003-06-16T20:58:53.000000Z", 
  "msg": [
   "Correction of Javadoc errors that end up propigating into UnivarImpl and other implementations."
  ], 
  "revision_id": "140911"
 }, 
 {
  "author": "mdiggory", 
  "date": "2003-06-16T20:42:24.000000Z", 
  "msg": [
   "This house-cleaning improves UnivariateImpl, in a number of ways.", 
   "1.) insertValue is abolished and its contents are now in addValue", 
   "2.) UnivariateImpl now extends AbstractStoredUnivariate to deligate to", 
   "those methods directly for calculating statistics when storage is active, all methods", 
   "deligate to AbstractStoreUniv when the DoubleArray is no longer null. This also means", 
   "that a majority of the StoreUnivariate interface is now implemented in Univariate to provide", 
   "deligates when storage is active, and to throw runtime exceptions when its not (this at least until", 
   "we establish rolling implementations for those methods). We should consider consolidating the", 
   "StoreUnivariate interface into the Univariate interface", 
   "3.) Calculations in addValue have been reorganized, only calculations for", 
   "the storageless solution are now present in this class. otherwise the value is", 
   "added/Rolling to the Double array when appropriate.", 
   "I'm satisfied that it passes all Unit tests."
  ], 
  "revision_id": "140910"
 }
]