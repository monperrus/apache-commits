[
 {
  "author": "cdinapala", 
  "date": "2005-08-01T07:49:41.000000Z", 
  "msg": [
   "Add 5 services for new tests. (AXISCPP-766)"
  ], 
  "revision_id": "261779"
 }, 
 {
  "author": "cdinapala", 
  "date": "2005-08-01T07:48:54.000000Z", 
  "msg": [
   "Add 5 server codes for new tests. (AXISCPP-766)"
  ], 
  "revision_id": "261778"
 }, 
 {
  "author": "dims", 
  "date": "2005-08-01T03:16:45.000000Z", 
  "msg": [
   "Fix and test case for AXIS-2102 - wsdl2java does not generate wrappers for nillable parameters", 
   "from Hans (hplanting@mail.com)"
  ], 
  "revision_id": "261777"
 }, 
 {
  "author": "dims", 
  "date": "2005-07-31T21:59:37.000000Z", 
  "msg": [
   "Preliminary MTOM support.", 
   "- Tested with the WSE 3.0 July CTP service (http://www.mail-archive.com/axis-dev@ws.apache.org/msg08296.html)", 
   "- Sample client code below (modified version of the samples/attachments client code)", 
   "===============================================================", 
   "/*", 
   "* Copyright 2001-2004 The Apache Software Foundation.", 
   "*", 
   "* Licensed under the Apache License, Version 2.0 (the \"License\");", 
   "* you may not use this file except in compliance with the License.", 
   "* You may obtain a copy of the License at", 
   "*", 
   "*      http://www.apache.org/licenses/LICENSE-2.0", 
   "*", 
   "* Unless required by applicable law or agreed to in writing, software", 
   "* distributed under the License is distributed on an \"AS IS\" BASIS,", 
   "* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", 
   "* See the License for the specific language governing permissions and", 
   "* limitations under the License.", 
   "*/", 
   "import org.apache.axis.AxisFault;", 
   "import org.apache.axis.constants.Style;", 
   "import org.apache.axis.constants.Use;", 
   "import org.apache.axis.client.Call;", 
   "import org.apache.axis.client.Service;", 
   "import org.apache.axis.encoding.XMLType;", 
   "import org.apache.axis.encoding.ser.JAFDataHandlerDeserializerFactory;", 
   "import org.apache.axis.encoding.ser.JAFDataHandlerSerializerFactory;", 
   "import org.apache.axis.transport.http.HTTPConstants;", 
   "import org.apache.axis.utils.Options;", 
   "import javax.activation.DataHandler;", 
   "import javax.activation.FileDataSource;", 
   "import javax.xml.namespace.QName;", 
   "import javax.xml.rpc.ParameterMode;", 
   "import javax.xml.soap.AttachmentPart;", 
   "import javax.xml.soap.MessageFactory;", 
   "import javax.xml.soap.SOAPBody;", 
   "import javax.xml.soap.SOAPBodyElement;", 
   "import javax.xml.soap.SOAPConnection;", 
   "import javax.xml.soap.SOAPConnectionFactory;", 
   "import javax.xml.soap.SOAPEnvelope;", 
   "import javax.xml.soap.SOAPMessage;", 
   "import javax.xml.soap.SOAPPart;", 
   "import java.io.File;", 
   "import java.net.URL;", 
   "import java.util.Hashtable;", 
   "import java.util.Iterator;", 
   "import java.util.ListIterator;", 
   "import java.util.Vector;", 
   "import samples.attachments.EchoAttachment;", 
   "/**", 
   "* An example of sending an attachment via RPC.", 
   "* This class has a main method that beside the standard arguments", 
   "* allows you to specify an attachment that will be sent to a", 
   "* service which will then send it back.", 
   "*", 
   "*/", 
   "public class EchoStockAttachment {", 
   "Options opts = null;", 
   "public EchoStockAttachment(Options opts) {", 
   "this.opts = opts;", 
   "}", 
   "/**", 
   "* This method sends a file as an attachment then", 
   "*  receives it as a return.  The returned file is", 
   "*  compared to the source.", 
   "*  @param doMTOM The filename that is the source to send.", 
   "*  @return True if sent and compared.", 
   "*/", 
   "public boolean echo(final boolean doMTOM, String filename) throws Exception {", 
   "//Create the data for the attached file.", 
   "DataHandler dhSource = new DataHandler(new FileDataSource(filename));", 
   "Service service = new Service();", 
   "Call call = (Call) service.createCall();", 
   "call.setTargetEndpointAddress(new URL(opts.getURL())); //Set the target service host and service location,", 
   "call.setSOAPActionURI(\"http://stockservice.contoso.com/wse/samples/echoAttachment\");", 
   "call.setOperationName(new QName(\"http://stockservice.contoso.com/wse/samples\", \"echoAttachment\")); //This is the target services method to invoke.", 
   "call.setEncodingStyle(\"\");", 
   "call.setOperationStyle(Style.WRAPPED);", 
   "call.setOperationUse(Use.LITERAL);", 
   "QName qnameAttachment = new QName(\"http://stockservice.contoso.com/wse/samples\", \"DataHandler\");", 
   "call.registerTypeMapping(dhSource.getClass(), //Add serializer for attachment.", 
   "qnameAttachment,", 
   "JAFDataHandlerSerializerFactory.class,", 
   "JAFDataHandlerDeserializerFactory.class);", 
   "call.addParameter(new QName(\"http://stockservice.contoso.com/wse/samples\", \"bytes\"), qnameAttachment,", 
   "ParameterMode.IN); //Add the file.", 
   "call.setReturnType(qnameAttachment);", 
   "call.setUsername(opts.getUser());", 
   "call.setPassword(opts.getPassword());", 
   "if (doMTOM)", 
   "call.setProperty(call.ATTACHMENT_ENCAPSULATION_FORMAT,", 
   "call.ATTACHMENT_ENCAPSULATION_FORMAT_MTOM);", 
   "Object ret = call.invoke(new Object[]{", 
   "dhSource", 
   "}", 
   "); //Add the attachment.", 
   "if (null == ret) {", 
   "System.out.println(\"Received null \");", 
   "throw new AxisFault(\"\", \"Received null\", null, null);", 
   "}", 
   "if (ret instanceof String) {", 
   "System.out.println(\"Received problem response from server: \" + ret);", 
   "throw new AxisFault(\"\", (String) ret, null, null);", 
   "}", 
   "if (!(ret instanceof DataHandler)) {", 
   "//The wrong type of object that what was expected.", 
   "System.out.println(\"Received problem response from server:\" +", 
   "ret.getClass().getName());", 
   "throw new AxisFault(\"\", \"Received problem response from server:\" +", 
   "ret.getClass().getName(), null, null);", 
   "}", 
   "//Still here, so far so good.", 
   "//Now lets brute force compare the source attachment", 
   "// to the one we received.", 
   "DataHandler rdh = (DataHandler) ret;", 
   "//From here we'll just treat the data resource as file.", 
   "String receivedfileName = rdh.getName();//Get the filename.", 
   "if (receivedfileName == null) {", 
   "System.err.println(\"Could not get the file name.\");", 
   "throw new AxisFault(\"\", \"Could not get the file name.\", null, null);", 
   "}", 
   "System.out.println(\"Going to compare the files..\");", 
   "boolean retv = compareFiles(filename, receivedfileName);", 
   "File receivedFile = new File(receivedfileName);", 
   "receivedFile.delete();", 
   "return retv;", 
   "}", 
   "/**", 
   "* Give a single file to send or name a directory", 
   "* to send an array of attachments of the files in", 
   "* that directory.", 
   "*/", 
   "public static void main(String args[]) {", 
   "try {", 
   "Options opts = new Options(args);", 
   "EchoStockAttachment echoattachment = new EchoStockAttachment(opts);", 
   "args = opts.getRemainingArgs();", 
   "int argpos = 0;", 
   "if (args == null || args.length == 0) {", 
   "System.err.println(\"Need a file.\");", 
   "System.exit(8);", 
   "}", 
   "boolean doMTOM = false;", 
   "if (args[0].trim().equalsIgnoreCase(\"+FDR\")) {", 
   "doMTOM = true;", 
   "++argpos;", 
   "}", 
   "if (argpos >= args.length) {", 
   "System.err.println(\"Need a file argument.\");", 
   "System.exit(8);", 
   "}", 
   "String argFile = args[argpos];", 
   "File source = new File(argFile);", 
   "if (!source.exists()) {", 
   "System.err.println(\"Error \\\"\" + argFile + \"\\\" does not exist!\");", 
   "System.exit(8);", 
   "}", 
   "if (echoattachment.echo(doMTOM, argFile)) {", 
   "System.out.println(\"Attachment sent and received ok!\");", 
   "System.exit(0);", 
   "} else {", 
   "System.err.println(\"Problem in matching attachments\");", 
   "System.exit(8);", 
   "}", 
   "} catch (Exception e) {", 
   "System.err.println(e);", 
   "e.printStackTrace();", 
   "}", 
   "System.exit(18);", 
   "}", 
   "/**", 
   "* Quick and unsophisticated method to compare two file's", 
   "* byte stream.", 
   "* @return True if the bytestreams do compare, false for", 
   "*    any other reason.", 
   "*/", 
   "protected boolean compareFiles(String one, String other)", 
   "throws java.io.FileNotFoundException, java.io.IOException {", 
   "java.io.BufferedInputStream oneStream = null;", 
   "java.io.BufferedInputStream otherStream = null;", 
   "// First compare file length.", 
   "File f1 = new File(one);", 
   "File f2 = new File(other);", 
   "if (f1.length() != f2.length())", 
   "return false;", 
   "try {", 
   "oneStream = new java.io.BufferedInputStream(", 
   "new java.io.FileInputStream(one), 1024 * 64);", 
   "otherStream = new java.io.BufferedInputStream(", 
   "new java.io.FileInputStream(other), 1024 * 64);", 
   "byte[] bufOne = new byte[1024 * 64];", 
   "byte[] bufOther = new byte[1024 * 64];", 
   "int breadOne = -1;", 
   "int breadOther = -1;", 
   "int available = 0;", 
   "do {", 
   "available = oneStream.available();", 
   "available = Math.min(available, otherStream.available());", 
   "available = Math.min(available, bufOther.length);", 
   "if (0 != available) {", 
   "java.util.Arrays.fill(bufOne, (byte) 0);", 
   "java.util.Arrays.fill(bufOther, (byte) 0);", 
   "breadOne = oneStream.read(bufOne, 0, available);", 
   "breadOther = otherStream.read(bufOther, 0, available);", 
   "if (breadOne != breadOther)", 
   "throw new RuntimeException(", 
   "\"Sorry couldn't really read whats available!\");", 
   "if (!java.util.Arrays.equals(bufOne, bufOther)) {", 
   "return false;", 
   "}", 
   "}", 
   "} while (available != 0 && breadOne != -1 && breadOther != -1);", 
   "if (available != 0 && (breadOne != -1 || breadOther != -1)) {", 
   "return false;", 
   "}", 
   "return true;", 
   "} finally {", 
   "if (null != oneStream) oneStream.close();", 
   "if (null != otherStream) otherStream.close();", 
   "}", 
   "}", 
   "}", 
   "====================================================================================="
  ], 
  "revision_id": "261776"
 }, 
 {
  "author": "dims", 
  "date": "2005-07-31T21:41:23.000000Z", 
  "msg": [
   "Set the user agent in CommonsHTTPSender."
  ], 
  "revision_id": "261775"
 }
]