[
 {
  "author": "", 
  "date": "2012-01-31T22:16:35.936125Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 22770", 
   "Author:   eday@adobe.com", 
   "Date:     2011-09-28T18:02:48.503874Z", 
   "Log Message:", 
   "-----------", 
   "Fix for Fade transition problem", 
   "Backed out old change for SDK-24925 in order to fix SDK-31089.  Fade once again only affects the alpha, visible, parent, and index properties.", 
   "QE notes:", 
   "Doc notes:", 
   "Bugs: SDK-31089", 
   "Reviewer: Glenn", 
   "Tests run: checkintests, cyclone", 
   "Is noteworthy for integration: no", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/private/flex/sdk/branches/4.y/frameworks/projects/spark/src/spark/effects/supportClasses/FadeInstance.as</path>", 
   "<path kind=\"file\" action=\"M\">/private/flex/sdk/branches/4.y/frameworks/projects/spark/src/spark/effects/Fade.as</path>"
  ], 
  "revision_id": "1284388"
 }, 
 {
  "author": "", 
  "date": "2012-01-31T22:16:29.617473Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 16064", 
   "Author:   chaase@adobe.com", 
   "Date:     2010-05-12T15:37:49.345162Z", 
   "Log Message:", 
   "-----------", 
   "Initial checkin of \"true autoReverse\" feature. This feature adds no new API, but does add new behavior to the existing autoReverse property on Transition. Now, if autoReverse=\"true\", any transition declared from/to the opposite states of the currently-requested state change can be used as a transition for this state change, played in reverse. This essentially means that you can author a single reverse for a forward direction and have the system play that transition in reverse for the opposite direction. Previously, you needed to author both directions, and take care to make them symmetric, in order to get them to play correctly when reversing in the middle. Note that if you author a *-to-* Transition (any to any), the new reversing behavior does nothing for you, because there is no way for the system to detect the forward (and thus the reverse) direction, so that transition will always play in the declared direction.", 
   "The main functionality needed to get this working was bolstering the currentSupport for playReversedFromEnd that already existed in Effect (along with the playReversed functionality in effect instances). There was also some timing engine details in Animation to make it work correctly, especially with startDelay.", 
   "Some work was done to make Fade work correctly when playing in reverse, though there is still a problem with some of the auto-fade functionality (fading items because of visible/parent changes between states) when the Fade effect has a startDelay.", 
   "QE notes: Tested on existing effects tests to make sure new behavior didn't break anything. But need new tests specifically around this new behavior.", 
   "Doc notes: Added new docs to Transition.autoReverse to describe the new behavior", 
   "Bugs: None", 
   "Reviewer: Corey", 
   "Tests run: checkintests, Mustella spark/effects, mx/effects", 
   "Is noteworthy for integration: No", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/framework/src/mx/effects/Effect.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/supportClasses/AnimateInstance.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/Animate.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/animation/Animation.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/supportClasses/FadeInstance.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/framework/src/mx/states/Transition.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/framework/src/mx/effects/effectClasses/SequenceInstance.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/framework/src/mx/core/UIComponent.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/framework/src/mx/effects/effectClasses/ParallelInstance.as</path>"
  ], 
  "revision_id": "1284387"
 }, 
 {
  "author": "", 
  "date": "2012-01-31T22:16:27.859820Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 15526", 
   "Author:   chaase@adobe.com", 
   "Date:     2010-04-16T23:14:38.571769Z", 
   "Log Message:", 
   "-----------", 
   "Two effects fixes, one states/SetProperty fix.", 
   "The Fade fix allows objects which don't exist in the next state, but which don't have valid values set in that state for position/orientation, to fade out in place.", 
   "The states fix cleans up the layout constraint docs in UIComponent and fixes logic in SetProperty that makes it possible to actually unset these properties in MXML.", 
   "The AnimateTransform fix cleans up logic when using AnimateTransform directly to auto-animate properties that change between states.", 
   "QE notes: Fade_accessor Fade_relevantProperties_Default fails because the affectedProperties of Fade has changed with one of these fixes. The test needs to be updated.", 
   "Doc notes: None", 
   "Bugs: sdk-25389, sdk-24989, sdk-24925", 
   "Reviewer: Corey (UIComponent, SetProperty) and Jason (the rest)", 
   "Tests run: checkintests, Mustella spark/effects, mx/states", 
   "Is noteworthy for integration: yes: downstream tools wanted fix for sdk-24925", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/supportClasses/FadeInstance.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/Fade.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/Resize.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/framework/src/mx/states/SetProperty.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/supportClasses/AnimateTransformInstance.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/framework/src/mx/core/UIComponent.as</path>"
  ], 
  "revision_id": "1284386"
 }, 
 {
  "author": "", 
  "date": "2012-01-31T22:16:25.632522Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 11481", 
   "Author:   chaase@adobe.com", 
   "Date:     2009-11-05T23:00:07.980316Z", 
   "Log Message:", 
   "-----------", 
   "Fixed a glitch in my Fade fix/refactoring yesterday. When a fade-in had a startDelay where the target object was not starting with a 0 alpha (like if it had alpha=1, but was going from not visible to visible or not-parented to parented), then Fade would fail to assign a 0 alpha to the object before it began the startDelay. This has the effect of making the object blink in at the beginning of the startDelay (because we made the object visible but opaque), then blink out at the end of the startDelay and fade in from there. The fix was to, like the old FadeInstance logic, set the target alpha to 0 if that's the alpha that we will start from in the actual effect.", 
   "QE notes: None.", 
   "Doc notes: None.", 
   "Bugs: none", 
   "Reviewer: Kevin", 
   "Tests run: checkintests, Mustella spark/effects/Fade", 
   "Is noteworthy for integration: yes - it's a fix for a  problem in a 'noteworthy' fix from commit 11447 for bug sdk-23399, which was requested by downstream teams.", 
   "Modified Paths:", 
   "--------------", 
   "/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/supportClasses/FadeInstance.as"
  ], 
  "revision_id": "1284385"
 }, 
 {
  "author": "", 
  "date": "2012-01-31T22:16:23.895283Z", 
  "msg": [
   "Transferred from the Adobe Open Source Subversion Repository", 
   "Revision: 11447", 
   "Author:   chaase@adobe.com", 
   "Date:     2009-11-05T00:12:40.026724Z", 
   "Log Message:", 
   "-----------", 
   "Fix to 3 unrelated bugs.", 
   "- Auto-fading logic was clobbering the state-specified value of alpha in some situations (and the logic was way complex and fragile, so a refactoring was needed).", 
   "- Animation now handles sorting of Resize animations to be processed first in each frame, to improve some of the Resize/transform-effect interaction.", 
   "- Post-layout translation animations were being automatically created in some situations, ignoring any startDelays set on the real translation animations. The fix was to pick up the real translation animation info to pre-populate the post-layout animations.", 
   "QE notes: None", 
   "Doc notes:  None", 
   "Bugs:  sdk-23399, sdk-22563, sdk-24010, sdk-23252", 
   "Reviewer: Kevin", 
   "Tests run: checkintests, Mustella spark/effects", 
   "Is noteworthy for integration: Yes - some fixes requested by Tools", 
   "Modified Paths:", 
   "--------------", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/animation/Animation.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/supportClasses/FadeInstance.as</path>", 
   "<path kind=\"file\" action=\"M\">/flex/sdk/trunk/frameworks/projects/spark/src/spark/effects/supportClasses/AnimateTransformInstance.as</path>"
  ], 
  "revision_id": "1284384"
 }
]