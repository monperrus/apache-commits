[
 {
  "author": "stsp", 
  "date": "2015-07-31T13:31:07.360973Z", 
  "msg": [
   "Add a convenience API which allows clients to resolve conflicts by", 
   "passing an option id rather than a pointer to an option object.", 
   "* subversion/include/svn_client.h", 
   "(svn_client_conflict_tree_resolve_by_id,", 
   "svn_client_conflict_prop_resolve_by_id,", 
   "svn_client_conflict_text_resolve_by_id): Declare.", 
   "* subversion/libsvn_client/resolved.c", 
   "(match_resolution_option): New helper function.", 
   "(svn_client_conflict_tree_resolve_by_id,", 
   "svn_client_conflict_prop_resolve_by_id,", 
   "svn_client_conflict_text_resolve_by_id): Implement."
  ], 
  "revision_id": "1693593"
 }, 
 {
  "author": "stsp", 
  "date": "2015-07-31T13:23:29.768210Z", 
  "msg": [
   "For a given svn_client_conflict_t, keep track of resolution per conflict type", 
   "rather than globally.", 
   "Replace svn_client_conflict_resolve() and svn_client_conflict_get_resolution()", 
   "with functions which operate on a specific type of conflict (text/prop/tree).", 
   "This is necessary since an svn_client_conflict_t represents all conflicts", 
   "on a working copy node. The former API interface made no sense.", 
   "* subversion/include/svn_client.h", 
   "(svn_client_conflict_resolve, svn_client_conflict_get_resolution): Remove.", 
   "(svn_client_conflict_tree_resolve,", 
   "svn_client_conflict_tree_get_resolution,", 
   "svn_client_conflict_prop_resolve", 
   "svn_client_conflict_prop_get_resolution,", 
   "svn_client_conflict_text_resolve", 
   "svn_client_conflict_text_get_resolution) Declare.", 
   "* subversion/libsvn_client/resolved.c", 
   "(svn_client_conflict_t): Remove 'resolution' field. Add new fields which", 
   "keep track of resolution of each conflict separately (one text conflict,", 
   "one tree conflict, and one property conflict per property).", 
   "(conflict_get_internal): Initialise new fields.", 
   "(conflict_resolver_func): Make use of the new per-conflict type fields.", 
   "(svn_client_conflict_option_t): Add 'propname' field which indicates", 
   "the specific property to resolve.", 
   "(resolve_postpone): Remove. Treating 'postpone' as a special case no-op", 
   "now gets in the way.", 
   "(resolve_text_conflict, resolve_prop_conflict,", 
   "resolve_tree_conflict): Update the new fields in 'conflict' as appropriate.", 
   "(text_conflict_options, binary_conflict_options, prop_conflict_options,", 
   "tree_conflict_options): Init new svn_client_conflict_option_t field to NULL", 
   "and stop using resolve_postpone.", 
   "(svn_client_conflict_resolve, svn_client_conflict_get_resolution): Remove.", 
   "(svn_client_conflict_tree_resolve,", 
   "svn_client_conflict_tree_get_resolution,", 
   "svn_client_conflict_prop_resolve", 
   "svn_client_conflict_prop_get_resolution,", 
   "svn_client_conflict_text_resolve", 
   "svn_client_conflict_text_get_resolution) Implement."
  ], 
  "revision_id": "1693592"
 }, 
 {
  "author": "rezan", 
  "date": "2015-07-31T13:14:18.031867Z", 
  "msg": [
   "final 2 transformers"
  ], 
  "revision_id": "1693591"
 }, 
 {
  "author": "cschneider", 
  "date": "2015-07-31T13:04:36.252582Z", 
  "msg": [
   "Added my tutorials"
  ], 
  "revision_id": "1693590"
 }, 
 {
  "author": "cschneider", 
  "date": "2015-07-31T12:46:21.177751Z", 
  "msg": [
   "Cleanup"
  ], 
  "revision_id": "1693589"
 }
]