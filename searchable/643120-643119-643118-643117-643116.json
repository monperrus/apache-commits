[
 {
  "author": "ablack", 
  "date": "2008-03-31T20:03:58.649632Z", 
  "msg": [
   "2008-03-31  Andrew Black  <ablack@roguewave.com>", 
   "STDCXX-426", 
   "* util/output.cpp (struct readback): Add convenience data structure", 
   "for backwards file reading.", 
   "(rbinit): Add method to initialize structure.", 
   "(rbbof): Add method to check if structure points to the beginning", 
   "of a file.", 
   "(rbsync): Add method to synchronize the file handle the structure", 
   "is built on to the structure.", 
   "(rbgetc): Add method to retrieve a character from the file and", 
   "move the structure one position closer to the start", 
   "(rbscanf): Add methods to search for a string using the", 
   "structure, possibly capturing an unsigned integer in the process.", 
   "(check_test, check_compat_test): Alter to use above methods."
  ], 
  "revision_id": "643120"
 }, 
 {
  "author": "hadrian", 
  "date": "2008-03-31T20:01:22.435999Z", 
  "msg": [
   "Add missing components to distro."
  ], 
  "revision_id": "643119"
 }, 
 {
  "author": "ate", 
  "date": "2008-03-31T19:59:30.327566Z", 
  "msg": [
   "Move somehow misplaced TestPathUtil.java back under the test/java folder"
  ], 
  "revision_id": "643118"
 }, 
 {
  "author": "esm", 
  "date": "2008-03-31T19:57:01.220061Z", 
  "msg": [
   "Unversioning the site plugin for now, so CI builds do not have to rely on a snapshot repo."
  ], 
  "revision_id": "643117"
 }, 
 {
  "author": "ate", 
  "date": "2008-03-31T19:55:46.675869Z", 
  "msg": [
   "Fixing a serious flaw in the initialization of Jetspeed (persistent) Preferences.", 
   "Java Preferences initializes the preferences spi using the default *or* provided PreferencesFactory only *once* per JVM.", 
   "The instantiated PreferencesFactory is stored as static *final* instance globally for the full JVM.", 
   "Restarting Jetspeed or its Spring container (like when running multiple unforked unit tests) will never lead to instantiating a new/fresh instance of its PreferencesFactory.", 
   "As our current implementation loads an OJB based PreferencesProvider in the JetspeedPreferences, reloading the Spring container leads to broken/invalid proxies and/or Class cast exceptions!", 
   "The following fix resolves this issue by wrapping the Jetspeed Preferences userRoot and systemRoot themselves (trough a higher (system) classloader loaded Observer interface).", 
   "Restarting the Jetspeed Spring container within the same JVM now properly injects a new/clean instance of the PersistenceBrokerPreferencesProvider, even if the Spring container is reloaded through a new classloader."
  ], 
  "revision_id": "643116"
 }
]