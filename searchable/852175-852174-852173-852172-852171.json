[
 {
  "author": "breser", 
  "date": "2004-12-01T04:10:22.156590Z", 
  "msg": [
   "* STATUS: Nominate r12100 for 1.1.x."
  ], 
  "revision_id": "852175"
 }, 
 {
  "author": "breser", 
  "date": "2004-12-01T04:07:43.467825Z", 
  "msg": [
   "Wrap the notify calls generated by svn_client__wc_delete() when merging a", 
   "deletion of a directory.  svn_client__wc_delete() assumes it is handling", 
   "schedule operations, but we treat merges as update operations so the wrong", 
   "notification action is passed to the notify callback.  Additionally,", 
   "the delete_item() call will generate a duplicate notification for the", 
   "deletion of the directory, so we need to filter the deletion notification", 
   "for the directory we're actually deleting.", 
   "Fixes Issue #2146", 
   "* subversion/libsvn_client/delete.c", 
   "(svn_client__wc_delete): Add parameters for specifying the notify_func,", 
   "and the notify_baton so we can wrap this.", 
   "(svn_client_delete): Adjust parameters for the svn_client__wc_delete() call.", 
   "* subversion/libsvn_client/client.h", 
   "(svn_client__wc_delete): Adjust the documentation and the paramters to match", 
   "the changes to the function.", 
   "* subversion/libsvn_client/diff.c", 
   "(merge_file_deleted): Remove the ugly workaround to avoid the double", 
   "notification already in place for a file and instead just pass NULL", 
   "for the notify_func and notify_baton.", 
   "(merge_delete_notify_baton_t): New struct acts as our notify_baton.", 
   "(merge_delete_notify_func): New static function that filters the notify", 
   "calls from svn_client__wc_delete() when deleting a directory.", 
   "(merge_dir_deleted): Build a baton and set the notify callback for our", 
   "call to svn_client__wc_delete() to our wrapper."
  ], 
  "revision_id": "852174"
 }, 
 {
  "author": "sussman", 
  "date": "2004-11-30T21:56:39.386720Z", 
  "msg": [
   "Locking branch:  finish mod_dav locking vtable.  Still debugging mod_dav.", 
   "* mod_dav_svn/lock.c", 
   "(dav_svn_compare_locktoken):    implement.", 
   "(dav_svn_open_lockdb):          implement.", 
   "(dav_svn_close_lockdb):         implement.", 
   "(dav_svn_refresh_locks):        implement.", 
   "(dav_svn_get_locks):            bugfix:  return NULL list if no locks.", 
   "(dav_svn_lookup_resource):      don't implement.", 
   "(dav_svn_hooks_locks):          remove _lookup_resource from vtable.", 
   "* mod_dav_svn/repos.c", 
   "(get_parent_path):              new helper.", 
   "(dav_svn_get_parent_resource):  bugfix.  construct a *real* parent", 
   "resource for 'regular' resources."
  ], 
  "revision_id": "852173"
 }, 
 {
  "author": "lundblad", 
  "date": "2004-11-30T21:23:43.924619Z", 
  "msg": [
   "On the locking branch: implement new RA locking functions in lib_ra_svn.", 
   "Adjust protocol spec for sussman's API change.", 
   "* subversion/libsvn_ra_svn/client.c (parse_lock): New function.", 
   "(handle_unsupported_cmd): New function, factorized out from", 
   "ra_svn_get_locations.", 
   "(ra_svn_get_locations, ra_svn_get_file_revs): Use the above to translate", 
   "the unsupported command error.", 
   "(ra_svn_lock, ra_svn_unlock, ra_svn_get_lock, ra_svn_get_locks): Implement.", 
   "* subversion/libsvn_ra_svn/protocol (lock command): Remove curtoken argument."
  ], 
  "revision_id": "852172"
 }, 
 {
  "author": "fitz", 
  "date": "2004-11-30T20:28:16.462875Z", 
  "msg": [
   "Make private function for determining the node_kind of a path", 
   "available to the rest of fsfs.  Rename static function fs_check_path", 
   "in tree.c to svn_fs_fs__check_path, add prototype to header, and", 
   "update all callers.", 
   "* subversion/subversion/libsvn_fs_fs/tree.c (svn_fs_fs__check_path):", 
   "Renamed from fs_check_path.", 
   "* subversion/subversion/libsvn_fs_fs/tree.h (svn_fs_fs__check_path):", 
   "New function prototype."
  ], 
  "revision_id": "852171"
 }
]