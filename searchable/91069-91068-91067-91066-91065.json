[
 {
  "author": "rbb", 
  "date": "2001-09-18T15:02:19.000000Z", 
  "msg": [
   "If we are going to have an optional function, we have to install that", 
   "header file, so that people can use it."
  ], 
  "revision_id": "91069"
 }, 
 {
  "author": "gstein", 
  "date": "2001-09-18T09:06:33.000000Z", 
  "msg": [
   "I always forget this file..."
  ], 
  "revision_id": "91068"
 }, 
 {
  "author": "gstein", 
  "date": "2001-09-18T08:40:25.000000Z", 
  "msg": [
   "Simplify dav_propdb_define_namespaces(); since we're putting the value in", 
   "the pool (now), forget the stack-based buffer altogether."
  ], 
  "revision_id": "91067"
 }, 
 {
  "author": "dougm", 
  "date": "2001-09-18T04:12:46.000000Z", 
  "msg": [
   "add -DPERL_USEITHREADS when starting server for ithreads enabled Perls"
  ], 
  "revision_id": "91066"
 }, 
 {
  "author": "gstein", 
  "date": "2001-09-18T04:09:19.000000Z", 
  "msg": [
   "Revamp the API that mod_dav uses to talk to back end deadprop (propdb)", 
   "providers. The old API was really based on how the FS stored properties, but", 
   "sucked for other types of providers (SQL databases, Subversion, etc). This", 
   "new code is overall much cleaner as it moves from a DBM style API to one", 
   "tuned for actual mod_dav operation; it also more flexible/clearer for future", 
   "improvements (e.g. dropping props directly to the wire rather than buffering", 
   "in memory).", 
   "This new API allows the provider to better define namespace handling during", 
   "the output of the values, how values are serialized and stored, the mapping", 
   "between elements' namespaces and the internalized namespace storage, a", 
   "clearer mechanism for naming properties (dav_prop_name), and an explicit", 
   "rollback mechanism to deal with PROPPATCH atomicity.", 
   "Updated the FS provider (fs/dbm.c) to the new API, mostly by moving code", 
   "from main/props.c. Of course, with the new semantics, some big changes in", 
   "the namespace mapping were made."
  ], 
  "revision_id": "91065"
 }
]