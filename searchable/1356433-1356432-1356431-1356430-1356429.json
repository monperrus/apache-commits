[
 {
  "author": "jbonofre", 
  "date": "2012-07-02T19:40:56.259735Z", 
  "msg": [
   "[KARAF-1603] Upgrade to maven-surefire-plugin 2.12"
  ], 
  "revision_id": "1356433"
 }, 
 {
  "author": "cmueller", 
  "date": "2012-07-02T19:39:18.135469Z", 
  "msg": [
   "fixed CS failure"
  ], 
  "revision_id": "1356432"
 }, 
 {
  "author": "tabish", 
  "date": "2012-07-02T19:36:24.143188Z", 
  "msg": [
   "fix and tests for: https://issues.apache.org/jira/browse/AMQ-3909"
  ], 
  "revision_id": "1356431"
 }, 
 {
  "author": "bobby", 
  "date": "2012-07-02T19:35:07.071643Z", 
  "msg": [
   "HADOOP-8548. test-patch.sh shows an incorrect link in Jekins builds (Kihwal Lee via bobby)"
  ], 
  "revision_id": "1356430"
 }, 
 {
  "author": "veithen", 
  "date": "2012-07-02T19:34:15.437675Z", 
  "msg": [
   "Fix for AXIS2-4197.", 
   "The JAXBRI databinding has the following particularity: for a root element declaration that refers to a named complex type, JAXB will only generate a class for the type, but not for the element declaration. JAXB represents an instance of that element by a JAXBElement<T> object, where T is the Java type corresponding to the complex type in the schema (but the corresponding methods in the stub and skeleton will use T). However, it is possible that the schema has multiple root element declarations referring to the same complex type. In that case, it is not possible to determine the element name based on the Java type (because only a single class is generated). This is problematic because there is only a single toEnvelope method per argument type. To solve this, we add a parameter to the toEnvelope method that specifies the element QName. The codegen templates are changed to construct that QName.", 
   "Note that this fix looks similar to the original change (r1052896) for that issue, but that change incorrectly used the method (operation) QName, instead of the element QName, causing regressions for a large class of WSDLs (see e.g. AXIS2-5147 and AXIS2-5249)."
  ], 
  "revision_id": "1356429"
 }
]