[
 {
  "author": "hwright", 
  "date": "2007-08-20T18:57:25.530542Z", 
  "msg": [
   "Ensure that we have an original blame chain.  In the case where a file is", 
   "created on a branch, and then merged to another branch, the merge is", 
   "actually a copy, and we treat it as such.  We still need to be sure that", 
   "the original chain is existent, so we create one using the most recent", 
   "revision in the direct line of history.", 
   "* subversion/libsvn_client/blame.c", 
   "(svn_client_blame4): Create an orginal blame chain if one does not already", 
   "exist."
  ], 
  "revision_id": "866285"
 }, 
 {
  "author": "cacknin", 
  "date": "2007-08-20T18:42:44.502798Z", 
  "msg": [
   "Implementation of 'svn patch' guts.", 
   "* subversion/svn/patch-cmd.c", 
   "(svn_cl__patch): set up the command line notifier for 'svn patch'.", 
   "* subversion/svn/main.c", 
   "(svn_cl__cmd_table): provide 'patch' with svn_cl__force_opt option.", 
   "* subversion/include/svn_client.h", 
   "(svn_client_patch): add the 'force' argument.", 
   "* subversion/include/svn_wc.h", 
   "(svn_wc_read_item, svn_wc_parse_tuple, svn_wc_read_tuple,", 
   "svn_wc_apply_patch): New functions to deal with svnpatch-reading.", 
   "* subversion/libsvn_wc/util.c", 
   "(readbuf_getchar_skip_whitespace, read_string, read_item,", 
   "vparse_tuple): New helper functions.", 
   "(svn_wc_read_item, svn_wc_parse_tuple, svn_wc_read_tuple): New", 
   "functions to read Editor Commands chunks.", 
   "* subversion/libsvn_wc/patch.c", 
   "Similar to what libsvn_ra_svn/editorp.c does with ra_svn-based", 
   "communications.", 
   "New file.  Read Editor Commands from a decoded patch file and drive", 
   "the editor.", 
   "* subversion/libsvn_client/patch.c", 
   "A lot of this file was imported from both merge.c and repos_diff.c.", 
   "(patch_cmd_baton): analogous to merge_cmd_baton.", 
   "(patch_callbacks, merge_props_changed, merge_file_changed,", 
   "merge_file_added, merge_file_deleted, merge_dir_added,", 
   "merge_dir_deleted): add svn_wc_diff_callbacks2_t functions to merge", 
   "changes from the (svn)patch.", 
   "(merge_delete_notify_baton_t, merge_delete_notify_func):", 
   "Notify-wrapper and its baton from merge.c.", 
   "(edit_baton, dir_baton, file_baton, make_dir_baton, make_file_baton,", 
   "make_editor_baton): new baton structures/functions dealing with tree", 
   "traversal.", 
   "(create_empty_file, get_path_access, get_parent_access,", 
   "get_empty_file): helper functions from repos_diff.c.", 
   "(open_root, delete_entry, add_directory, open_directory,", 
   "add_file, open_file, window_handler, apply_textdelta, close_file,", 
   "close_directory, change_file_prop, change_dir_prop, close_edit):", 
   "Editor functions, imported from repos_diff.c.", 
   "(extract_svnpatch): Pull out the svnpatch block from patches and", 
   "decode data (uncompress + base64-decode).", 
   "(svn_client_patch): add 'force' flag and define the function to call", 
   "svn_wc_apply_patch."
  ], 
  "revision_id": "866284"
 }, 
 {
  "author": "hwright", 
  "date": "2007-08-20T17:31:10.433638Z", 
  "msg": [
   "When looking for merged logs, ensure that the path exists in source merge", 
   "info.  Add a test for this condition.", 
   "* subversion/libsvn_repos/log.c", 
   "(build_log_tree): Make sure that the path exists in the given revision", 
   "before attempting to build a tree with it.", 
   "* subversion/tests/cmdline/log_tests.py", 
   "(merge_sensitive_log_added_path): New test.", 
   "(test_list): Run the new test."
  ], 
  "revision_id": "866283"
 }, 
 {
  "author": "kameshj", 
  "date": "2007-08-20T16:13:54.068465Z", 
  "msg": [
   "Fix issue 2877 - \"Do subtree merge only if subtree has a explicit mergeinfo", 
   "set and has a merge source as that of(equivalent) current merge source\".", 
   "* subversion/libsvn_client/merge.c", 
   "(struct get_sw_mergeinfo_walk_baton):", 
   "Add merge_src_canon_path, merge_target_path.", 
   "(get_sw_mergeinfo_walk_cb):", 
   "Populate 'wb->children_sw_or_with_mergeinfo' only if merge from equivalent", 
   "path from wb->merge_src_canon_path is found or the path is switched.", 
   "(get_sw_mergeinfo_paths): Accepts 'merge_src_canon_path'.", 
   "(discover_and_merge_children): Accepts 'wc_root_url'.", 
   "(guess_merge_src_child_url): New function.", 
   "(discover_and_merge_children):", 
   "Accept new argument 'wc_root_url'.", 
   "Changes to reflect the change of signature of 'get_sw_mergeinfo_paths'.", 
   "(get_repos_root): New function to get the repository root for a given", 
   "path or url.", 
   "(svn_client_merge3): get the wc_repos_root.", 
   "Update the call to 'discover_and_merge_children'.", 
   "(svn_client_merge_peg3): get the wc_repos_root.", 
   "Update the call to 'discover_and_merge_children'.", 
   "Code refactoring.", 
   "* subversion/tests/cmdline/merge_tests.py", 
   "(avoid_repeated_merge_on_subtree_with_merge_info):", 
   "Even though '/A/copy-of-B/F/E1' has the mergeinfo from '/A/B/F/E',", 
   "it does not have any logical connection with '/A/B'.", 
   "Fix the expectation accordingly.", 
   "(merge_to_target_with_copied_children):", 
   "'/A_COPY/D/G/rho_copy' is not related to '/A/D/G' so merge on", 
   "parent target of '/A_COPY/D/G' from '/A/D/G' should not affect it.", 
   "(test_list): remove XFail marker from 'merge_to_target_with_copied_children'.", 
   "Suggested by: vgeorgescu"
  ], 
  "revision_id": "866282"
 }, 
 {
  "author": "hwright", 
  "date": "2007-08-20T15:52:49.609441Z", 
  "msg": [
   "Fix a 'file not found' error when running 'svn blame -g'.", 
   "Found by: markphip", 
   "* subversion/libsvn_client/blame.c", 
   "(window_handler): In the case of 'blame -g', add blame information to the", 
   "original blame chain after processing the merged chain.  We need the", 
   "previous original file to live long enough for both chains, not just", 
   "the merged one."
  ], 
  "revision_id": "866281"
 }
]