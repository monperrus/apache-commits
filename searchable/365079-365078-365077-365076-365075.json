[
 {
  "author": "arminw", 
  "date": "2005-10-27T18:19:06.000000Z", 
  "msg": [
   "remove redundant method, combination of setImplicitLocking(false) and setOrdering(false) will have the same effect, code cleanup"
  ], 
  "revision_id": "365079"
 }, 
 {
  "author": "arminw", 
  "date": "2005-10-27T18:09:55.000000Z", 
  "msg": [
   "remove redundant method, combination of setImplicitLocking(false) and setOrdering(false) will have the same effect"
  ], 
  "revision_id": "365078"
 }, 
 {
  "author": "arminw", 
  "date": "2005-10-27T17:34:54.000000Z", 
  "msg": [
   "add new and convenience methods"
  ], 
  "revision_id": "365077"
 }, 
 {
  "author": "arminw", 
  "date": "2005-10-27T17:33:23.000000Z", 
  "msg": [
   "use ExceptionHelper for SQLExceptions, code cleanup"
  ], 
  "revision_id": "365076"
 }, 
 {
  "author": "arminw", 
  "date": "2005-10-27T14:55:31.000000Z", 
  "msg": [
   "patch by Ilkka Priha", 
   "Handling of PreparedStatement during connection validation is invalid. The fetch size is set first, but javadoc specifies that PreparedStatement.setFetchSize(rows) may throw an exception if", 
   "0 <= rows <= this.getMaxRows()", 
   "Now, zero is the default for PreparedStatement.getMaxRows() and although  its meaning is an unlimited number of rows, Sun's JDBC/ODBC driver takes the spec literally and throws an exception when the fetch size is set above zero without first setting the max rows to at least the same size. So changing the order of the fetch size and max rows settings fixes the query."
  ], 
  "revision_id": "365075"
 }
]