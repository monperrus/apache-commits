[
 {
  "author": "ayza", 
  "date": "2007-05-22T10:09:11.587035Z", 
  "msg": [
   "Applying patch from HARMONY-3916 ([classlib][io] Harmony throws unexpected NotActiveException when there's a ObjectInputValidation registered)"
  ], 
  "revision_id": "540515"
 }, 
 {
  "author": "manjula", 
  "date": "2007-05-22T10:03:08.210445Z", 
  "msg": [
   "Undoing the previous change."
  ], 
  "revision_id": "540514"
 }, 
 {
  "author": "fhanik", 
  "date": "2007-05-22T09:55:05.077950Z", 
  "msg": [
   "update docs"
  ], 
  "revision_id": "540513"
 }, 
 {
  "author": "fhanik", 
  "date": "2007-05-22T09:54:20.409030Z", 
  "msg": [
   "update docs"
  ], 
  "revision_id": "540512"
 }, 
 {
  "author": "gsim", 
  "date": "2007-05-22T09:50:45.898910Z", 
  "msg": [
   "Patch submitted to qpid-dev by ksmith@redhat.com. Fixes concurrency issues arising from previous move to use singleton apr pool.", 
   "\"My patch does three things:", 
   "1) Modifies the APRPool class to use alloc/free semantics for APR memory pools. Each time a caller calls APRPool::get() they'll their own pool reference. I've fixed up all the call sites I can find to also call APRPool::free() at the appropriate time.", 
   "2) Caches freed APR memory pools in a STL stack. This cuts down on the number of memory pools created overall.", 
   "3) As a result of doing #1 and #2 I've introduced a guard mutex around APRPool::get() and APRPool::free(). This is to prevent concurrent access to the memory pool cache. If it's too heavyweight, the mutex along with the caching mechanism could be removed entirely.\""
  ], 
  "revision_id": "540511"
 }
]