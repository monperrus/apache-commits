[
 {
  "author": "joe", 
  "date": "2000-09-14T21:51:56.000000Z", 
  "msg": [
   "* adm_files.c (v_extend_with_adm_name, extend_with_adm_name,", 
   "sync_adm_file, open_adm_file, close_adm_file): Modified to accept a", 
   "NULL-terminated argument list, rather than using an extra argument to", 
   "indicate the length of the list. (all callers changed)"
  ], 
  "revision_id": "837260"
 }, 
 {
  "author": "kfogel", 
  "date": "2000-09-14T21:25:52.000000Z", 
  "msg": [
   "* checkout-2.delta: new test delta", 
   "* checkout-test.sh: do new delta too."
  ], 
  "revision_id": "837259"
 }, 
 {
  "author": "sussman", 
  "date": "2000-09-14T21:07:22.000000Z", 
  "msg": [
   "DON'T TOUCH maybe_derive_ancestry();  it works perfectly.  The trick", 
   "is to *guarantee* that there's always a \"root\" frame on the parser", 
   "stack which represents the nameless root directory.  This frame", 
   "*always* has the `base' src-path and src-version, so that", 
   "maybe_derive_ancestry can correctly fall back on it.  It works now!", 
   "* xml_parse.c", 
   "(maybe_derive_ancestry): revert change -- leave it alone.", 
   "(svn_make_xml_parser): call replace_root to fetch root_baton, and", 
   "start our digger out with a `root' stackframe containing both", 
   "root_baton and our `base' ancestry.", 
   "(do_stack_append):  check for \"root\" frame by testing (previous == NULL)", 
   "(do_stack_check_remove):", 
   "check for \"root\" frame by testing (previous == NULL)", 
   "(xml_handle_end): if root frame is last remaining frame, call", 
   "close_directory on the root_baton."
  ], 
  "revision_id": "837258"
 }, 
 {
  "author": "kfogel", 
  "date": "2000-09-14T21:06:20.000000Z", 
  "msg": [
   "(replace_root): new callback.", 
   "(callbacks): add replace_root().", 
   "(svn_wc_get_update_editor): don't set dir baton here, it's done in", 
   "replace_root now.", 
   "(prep_directory): new helper func, abstracts common code for", 
   "replace_root(), replace_directory(), and add_directory().", 
   "(dir_baton): hold parent's dir_baton.", 
   "(make_dir_baton): take parent_baton arg and set it in the new", 
   "dir_baton.  Also, fixed path handling.", 
   "(svn_wc__ensure_wc, svn_wc__ensure_adm, check_adm_exists): take", 
   "ancestor_path and ancestor_version args.", 
   "All callers changed.", 
   "(init_adm): take ancestor_path arg, init ancestor file.", 
   "(SVN_WC__ADM_ANCESTOR): new #define.", 
   "(sync_adm_file): replaces svn_wc__sync_adm_file, confined to static", 
   "now.  This will be the guts for other functions.", 
   "(svn_wc__sync_text_base): use above as guts.", 
   "(svn_wc__file_modified_p): prototype.", 
   "(make_file_baton): make path the right way.", 
   "* checkout-test.c (apply_delta): call xml parser the right way."
  ], 
  "revision_id": "837257"
 }, 
 {
  "author": "kfogel", 
  "date": "2000-09-14T21:03:48.000000Z", 
  "msg": [
   "Mention top-level `iota' file."
  ], 
  "revision_id": "837256"
 }
]