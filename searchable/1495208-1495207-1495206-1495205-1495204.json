[
 {
  "author": "markt", 
  "date": "2013-06-20T21:58:25.474238Z", 
  "msg": [
   "Refactor in preparation for fixing BZ 55120"
  ], 
  "revision_id": "1495208"
 }, 
 {
  "author": "mikemccand", 
  "date": "2013-06-20T21:55:44.380650Z", 
  "msg": [
   "LUCENE-4971: fix NPE in AnalyzingSuggester when there are too many graph expansions"
  ], 
  "revision_id": "1495207"
 }, 
 {
  "author": "mikemccand", 
  "date": "2013-06-20T21:55:08.260115Z", 
  "msg": [
   "LUCENE-4971: fix NPE in AnalyzingSuggester when there are too many graph expansions"
  ], 
  "revision_id": "1495206"
 }, 
 {
  "author": "rvesse", 
  "date": "2013-06-20T21:49:37.318654Z", 
  "msg": [
   "Initial implementation of implicit join and implicit left join optimizers (JENA-473)", 
   "While there are some test cases for these the test coverage is not yet great and experimentation has shown that there", 
   "are some kinks to be worked out.  Currently these optimizations are only used if explicitly enabled", 
   "i.e. they use context.isTrue() rather than context.isTrueOrUndef() to determine whether they should be applied"
  ], 
  "revision_id": "1495205"
 }, 
 {
  "author": "stefan2", 
  "date": "2013-06-20T21:40:50.494872Z", 
  "msg": [
   "Follow-up to r1495063: integer overflows result in an inefficient hash", 
   "function and reduce cache effectiveness.", 
   "This illustrates what happened before the patch:", 
   "char c = 99;", 
   "unsigned hash = 0;", 
   "hash |= c << 8; /* c << 8 is often 0, actually it's undefined */", 
   "On a more general note, you don't want to make it easy for parts of", 
   "the input to cancel each other out.  So, adding (potentially) negative", 
   "values is a bad thing (strategically).", 
   "* subversion/libsvn_fs_fs/tree.c", 
   "(cache_lookup): prevent unnecessary integer overflows in hash function"
  ], 
  "revision_id": "1495204"
 }
]