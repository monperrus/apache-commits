[
 {
  "author": "wrowe", 
  "date": "2002-01-08T06:19:15.000000Z", 
  "msg": [
   "Add an apr_anylock_t to the rmm create/attach fns.  Only the user of the", 
   "apr_rmm knows if no lock is required, if only threads of a single process", 
   "will perform allocations, or if all processes will be allocating and", 
   "freeing blocks simultaniously.  So the caller must provide a lock, if", 
   "desired.  We will protect against lock NULL args by creating a nulllock."
  ], 
  "revision_id": "58509"
 }, 
 {
  "author": "wrowe", 
  "date": "2002-01-08T06:13:51.000000Z", 
  "msg": [
   "This trivial lock wrapper implements our apr lock types that will not be", 
   "deprecated in the near future.  It supports only lock, trylock and unlock", 
   "since that's as portable as we need for lock abstration.  If you need to", 
   "dig deeper, you need to use the explicit lock api.", 
   "This is implemented for apr_rmm.c, so it has found it's home here.  If it", 
   "turns out to be useful to an apr portability module, we can always slide", 
   "it over to apr/include."
  ], 
  "revision_id": "58508"
 }, 
 {
  "author": "trawick", 
  "date": "2002-01-05T13:44:11.000000Z", 
  "msg": [
   "get relocatable-managed-memory stuff to compile"
  ], 
  "revision_id": "58507"
 }, 
 {
  "author": "wrowe", 
  "date": "2002-01-05T07:14:29.000000Z", 
  "msg": [
   "A minimalist relocatable memory manager.  When I suggest minimalist,", 
   "it is -minimal-, still missing locking for allocation [that gets tricky,", 
   "we can discuss on list], some get largest-available and get free space", 
   "APIs, a get_management_overhead call [for determining the optimal", 
   "preallocation size before creating a block of memory to manage]", 
   "and a better-fit algorithm so we make best use of tight spaces.", 
   "This also should grow a set of typesafe offset-protection wrappers,", 
   "which I will introduce shortly.  Those have proven trickier than I", 
   "had expected.", 
   "While this is designed for Aaron's redesign of shm, it certainly", 
   "isn't limited to that application.  It is great for serializing any", 
   "sort of structures into files or between processes, or other", 
   "persistant applications."
  ], 
  "revision_id": "58506"
 }, 
 {
  "author": "jerenkrantz", 
  "date": "2002-01-04T21:54:50.000000Z", 
  "msg": [
   "Fix up VPATH support so that it will survive config.status invocations.", 
   "- Add srcdir, VPATH, and top_srcdir to all Makefile.in's", 
   "- Remove configure.in hack to add srcdir and VPATH to all Makefiles", 
   "- Rely on APR_INCLUDES for APR's path.  (Should switch to find_apr.m4 ASAP)", 
   "- Make all INCLUDES paths relative to top_srcdir/top_builddir rather than", 
   "relying on ../../../../  (way too confusing to maintain)"
  ], 
  "revision_id": "58505"
 }
]