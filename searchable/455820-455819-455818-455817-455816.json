[
 {
  "author": "jonl", 
  "date": "2005-02-10T23:02:21.000000Z", 
  "msg": [
   "Added self as author"
  ], 
  "revision_id": "455820"
 }, 
 {
  "author": "jonl", 
  "date": "2005-02-10T23:01:16.000000Z", 
  "msg": [
   "Added support for form Buttons.  Documentation and examples coming soon..."
  ], 
  "revision_id": "455819"
 }, 
 {
  "author": "jonl", 
  "date": "2005-02-10T18:29:37.000000Z", 
  "msg": [
   "Renamed Container -> MarkupContainer and WebContainer -> WebMarkupContainer"
  ], 
  "revision_id": "455818"
 }, 
 {
  "author": "jonl", 
  "date": "2005-02-10T18:02:26.000000Z", 
  "msg": [
   "Renamed Container -> MarkupContainer and WebContainer -> WebMarkupContainer"
  ], 
  "revision_id": "455817"
 }, 
 {
  "author": "jonl", 
  "date": "2005-02-10T08:56:52.000000Z", 
  "msg": [
   "Added getSharing() method to Component with values UNSHARED, APPLICATION_SHARED and SESSION_SHARED (see javadoc for details).  Changed the AbstractImage class so that it allows a component user to set the sharing mode for an image to one of these values.  When an image is SESSION_SHARED, it will have a stable URL within a given session.  When an image is APPLICATION_SHARED, it will have a stable URL across all sessions in an application.  So, to implement a really efficient dynamic image, simply store the image component in a static variable and set its sharing to APPLICATION_SHARED.  Now you will have one object that is shared everywhere that has a stable URL.  None of this requires access to temporary storage.  One catch that might come up is that shared components will have a URL like /applicationName/a0 for application shared components or /applicationName/s0 for session shared components.  In order for an application to handle such URLs it must have a servlet url mapping pattern that includes /* on the end, such as /images/*.  Also updated image example to demonstrate all this."
  ], 
  "revision_id": "455816"
 }
]